//
// Generated by protoc, do not edit by hand.
//
package org.fusesource.hawtbuf.proto;

public class UnittestEmbedOptimizeFor {

   static public final class TestEmbedOptimizedForSize extends TestEmbedOptimizedForSizeBase<TestEmbedOptimizedForSize> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasOptionalMessage() ) {
            try {
               getOptionalMessage().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"optional_message."));
            }
         }
         if( hasRepeatedMessage() ) {
            java.util.List<UnittestOptimizeFor.TestOptimizedForSize> l = getRepeatedMessageList();
            for( int i=0; i < l.size(); i++ ) {
               try {
                  l.get(i).assertInitialized();
               } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                  missingFields.addAll(prefix(e.getMissingFields(),"repeated_message["+i+"]"));
               }
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearOptionalMessage();
         clearRepeatedMessage();
      }

      public TestEmbedOptimizedForSize clone() {
         return new TestEmbedOptimizedForSize().mergeFrom(this);
      }

      public TestEmbedOptimizedForSize mergeFrom(TestEmbedOptimizedForSize other) {
         if (other.hasOptionalMessage()) {
            if (hasOptionalMessage()) {
               getOptionalMessage().mergeFrom(other.getOptionalMessage());
            } else {
               setOptionalMessage(other.getOptionalMessage().clone());
            }
         }
         if (other.hasRepeatedMessage()) {
            for(UnittestOptimizeFor.TestOptimizedForSize element: other.getRepeatedMessageList() ) {
               getRepeatedMessageList().add(element.clone());
            }
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasOptionalMessage()) {
            size += computeMessageSize(1, getOptionalMessage());
         }
         if (hasRepeatedMessage()) {
            for (UnittestOptimizeFor.TestOptimizedForSize i : getRepeatedMessageList()) {
               size += computeMessageSize(2, i);
            }
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestEmbedOptimizedForSize mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               if (hasOptionalMessage()) {
                  getOptionalMessage().mergeFramed(input);
               } else {
                  setOptionalMessage(new UnittestOptimizeFor.TestOptimizedForSize().mergeFramed(input));
               }
               break;
            case 18:
               getRepeatedMessageList().add(new UnittestOptimizeFor.TestOptimizedForSize().mergeFramed(input));
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasOptionalMessage()) {
            writeMessage(output, 1, getOptionalMessage());
         }
         if (hasRepeatedMessage()) {
            for (UnittestOptimizeFor.TestOptimizedForSize i : getRepeatedMessageList()) {
               writeMessage(output, 2, i);
            }
         }
      }

      public static TestEmbedOptimizedForSize parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmbedOptimizedForSize().mergeUnframed(data).checktInitialized();
      }

      public static TestEmbedOptimizedForSize parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmbedOptimizedForSize().mergeUnframed(data).checktInitialized();
      }

      public static TestEmbedOptimizedForSize parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmbedOptimizedForSize().mergeUnframed(data).checktInitialized();
      }

      public static TestEmbedOptimizedForSize parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmbedOptimizedForSize().mergeUnframed(data).checktInitialized();
      }

      public static TestEmbedOptimizedForSize parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmbedOptimizedForSize().mergeFramed(data).checktInitialized();
      }

      public static TestEmbedOptimizedForSize parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmbedOptimizedForSize().mergeFramed(data).checktInitialized();
      }

      public static TestEmbedOptimizedForSize parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmbedOptimizedForSize().mergeFramed(data).checktInitialized();
      }

      public static TestEmbedOptimizedForSize parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmbedOptimizedForSize().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasOptionalMessage() ) {
            sb.append(prefix+"optional_message {\n");
            getOptionalMessage().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasRepeatedMessage() ) {
            java.util.List<UnittestOptimizeFor.TestOptimizedForSize> l = getRepeatedMessageList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_message["+i+"] {\n");
               l.get(i).toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestEmbedOptimizedForSize.class )
            return false;
         
         return equals((TestEmbedOptimizedForSize)obj);
      }
      
      public boolean equals(TestEmbedOptimizedForSize obj) {
         if (hasOptionalMessage() ^ obj.hasOptionalMessage() ) 
            return false;
         if (hasOptionalMessage() && ( !getOptionalMessage().equals(obj.getOptionalMessage()) ))
            return false;
         if (hasRepeatedMessage() ^ obj.hasRepeatedMessage() ) 
            return false;
         if (hasRepeatedMessage() && ( !getRepeatedMessageList().equals(obj.getRepeatedMessageList()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=252490922;
         if (hasOptionalMessage()) {
            rc ^= ( -356353945^getOptionalMessage().hashCode() );
         }
         if (hasRepeatedMessage()) {
            rc ^= ( 305763085^getRepeatedMessageList().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestEmbedOptimizedForSizeBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional TestOptimizedForSize optional_message = 1;
      private UnittestOptimizeFor.TestOptimizedForSize f_optionalMessage = null;

      public boolean hasOptionalMessage() {
         return this.f_optionalMessage!=null;
      }

      public UnittestOptimizeFor.TestOptimizedForSize getOptionalMessage() {
         if( this.f_optionalMessage == null ) {
            this.f_optionalMessage = new UnittestOptimizeFor.TestOptimizedForSize();
         }
         return this.f_optionalMessage;
      }

      public T setOptionalMessage(UnittestOptimizeFor.TestOptimizedForSize optionalMessage) {
         loadAndClear();
         this.f_optionalMessage = optionalMessage;
         return (T)this;
      }

      public void clearOptionalMessage() {
         loadAndClear();
         this.f_optionalMessage = null;
      }

      // repeated TestOptimizedForSize repeated_message = 2;
      private java.util.List<UnittestOptimizeFor.TestOptimizedForSize> f_repeatedMessage;

      public boolean hasRepeatedMessage() {
         return this.f_repeatedMessage!=null && !this.f_repeatedMessage.isEmpty();
      }

      public java.util.List<UnittestOptimizeFor.TestOptimizedForSize> getRepeatedMessageList() {
         if( this.f_repeatedMessage == null ) {
            this.f_repeatedMessage = new java.util.ArrayList<UnittestOptimizeFor.TestOptimizedForSize>();
         }
         return this.f_repeatedMessage;
      }

      public T setRepeatedMessageList(java.util.List<UnittestOptimizeFor.TestOptimizedForSize> repeatedMessage) {
         loadAndClear();
         this.f_repeatedMessage = repeatedMessage;
         return (T)this;
      }

      public int getRepeatedMessageCount() {
         if( this.f_repeatedMessage == null ) {
            return 0;
         }
         return this.f_repeatedMessage.size();
      }

      public UnittestOptimizeFor.TestOptimizedForSize getRepeatedMessage(int index) {
         if( this.f_repeatedMessage == null ) {
            return null;
         }
         return this.f_repeatedMessage.get(index);
      }

      public T setRepeatedMessage(int index, UnittestOptimizeFor.TestOptimizedForSize value) {
         loadAndClear();
         getRepeatedMessageList().set(index, value);
         return (T)this;
      }

      public T addRepeatedMessage(UnittestOptimizeFor.TestOptimizedForSize value) {
         loadAndClear();
         getRepeatedMessageList().add(value);
         return (T)this;
      }

      public T addAllRepeatedMessage(java.lang.Iterable<? extends UnittestOptimizeFor.TestOptimizedForSize> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedMessageList());
         return (T)this;
      }

      public void clearRepeatedMessage() {
         loadAndClear();
         this.f_repeatedMessage = null;
      }

   }

}
