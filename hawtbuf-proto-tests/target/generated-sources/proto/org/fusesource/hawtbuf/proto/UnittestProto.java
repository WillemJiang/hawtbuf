//
// Generated by protoc, do not edit by hand.
//
package org.fusesource.hawtbuf.proto;

public class UnittestProto {

   public static enum ForeignEnum {

      FOREIGN_FOO("FOREIGN_FOO", 4),
      FOREIGN_BAR("FOREIGN_BAR", 5),
      FOREIGN_BAZ("FOREIGN_BAZ", 6);

      private final String name;
      private final int value;

      private ForeignEnum(String name, int value) {
         this.name = name;
         this.value = value;
      }

      public final int getNumber() {
         return value;
      }

      public final String toString() {
         return name;
      }

      public static ForeignEnum valueOf(int value) {
         switch (value) {
         case 4:
            return FOREIGN_FOO;
         case 5:
            return FOREIGN_BAR;
         case 6:
            return FOREIGN_BAZ;
         default:
            return null;
         }
      }

   }


   public static enum TestEnumWithDupValue {

      FOO1("FOO1", 1),
      BAR1("BAR1", 2),
      BAZ("BAZ", 3),
      FOO2("FOO2", 1),
      BAR2("BAR2", 2);

      private final String name;
      private final int value;

      private TestEnumWithDupValue(String name, int value) {
         this.name = name;
         this.value = value;
      }

      public final int getNumber() {
         return value;
      }

      public final String toString() {
         return name;
      }

      public static TestEnumWithDupValue valueOf(int value) {
         switch (value) {
         case 1:
            return FOO1;
         case 2:
            return BAR1;
         case 3:
            return BAZ;
         default:
            return null;
         }
      }

   }


   public static enum TestSparseEnum {

      SPARSE_A("SPARSE_A", 123),
      SPARSE_B("SPARSE_B", 62374),
      SPARSE_C("SPARSE_C", 12589234),
      SPARSE_D("SPARSE_D", -15),
      SPARSE_E("SPARSE_E", -53452),
      SPARSE_F("SPARSE_F", 0),
      SPARSE_G("SPARSE_G", 2);

      private final String name;
      private final int value;

      private TestSparseEnum(String name, int value) {
         this.name = name;
         this.value = value;
      }

      public final int getNumber() {
         return value;
      }

      public final String toString() {
         return name;
      }

      public static TestSparseEnum valueOf(int value) {
         switch (value) {
         case 123:
            return SPARSE_A;
         case 62374:
            return SPARSE_B;
         case 12589234:
            return SPARSE_C;
         case -15:
            return SPARSE_D;
         case -53452:
            return SPARSE_E;
         case 0:
            return SPARSE_F;
         case 2:
            return SPARSE_G;
         default:
            return null;
         }
      }

   }


   static public final class TestAllTypes extends TestAllTypesBase<TestAllTypes> {


      public static enum NestedEnum {

         FOO("FOO", 1),
         BAR("BAR", 2),
         BAZ("BAZ", 3);

         private final String name;
         private final int value;

         private NestedEnum(String name, int value) {
            this.name = name;
            this.value = value;
         }

         public final int getNumber() {
            return value;
         }

         public final String toString() {
            return name;
         }

         public static NestedEnum valueOf(int value) {
            switch (value) {
            case 1:
               return FOO;
            case 2:
               return BAR;
            case 3:
               return BAZ;
            default:
               return null;
            }
         }

      }


      static public final class NestedMessage extends NestedMessageBase<NestedMessage> {

         public java.util.ArrayList<String> missingFields() {
            java.util.ArrayList<String> missingFields = super.missingFields();
            return missingFields;
         }

         public void clear() {
            super.clear();
            clearBb();
         }

         public NestedMessage clone() {
            return new NestedMessage().mergeFrom(this);
         }

         public NestedMessage mergeFrom(NestedMessage other) {
            if (other.hasBb()) {
               setBb(other.getBb());
            }
            return this;
         }

         public int serializedSizeUnframed() {
            if (memoizedSerializedSize != -1)
               return memoizedSerializedSize;

            int size = 0;
            if (hasBb()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getBb());
            }
            memoizedSerializedSize = size;
            return size;
         }

         public NestedMessage mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setBb(input.readInt32());
                  break;
               }
            }
         }
         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (hasBb()) {
               output.writeInt32(1, getBb());
            }
         }

         public static NestedMessage parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasBb() ) {
               sb.append(prefix+"bb: ");
               sb.append(getBb());
               sb.append("\n");
            }
            return sb;
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=NestedMessage.class )
               return false;
            
            return equals((NestedMessage)obj);
         }
         
         public boolean equals(NestedMessage obj) {
            if (hasBb() ^ obj.hasBb() ) 
               return false;
            if (hasBb() && ( getBb()!=obj.getBb() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-132205840;
            if (hasBb()) {
               rc ^= ( 2144^getBb() );
            }
            return rc;
         }
         
      }

      static abstract class NestedMessageBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

         // optional int32 bb = 1;
         private int f_bb = 0;
         private boolean b_bb;

         public boolean hasBb() {
            return this.b_bb;
         }

         public int getBb() {
            return this.f_bb;
         }

         public T setBb(int bb) {
            loadAndClear();
            this.b_bb = true;
            this.f_bb = bb;
            return (T)this;
         }

         public void clearBb() {
            loadAndClear();
            this.b_bb = false;
            this.f_bb = 0;
         }

      }


      static public final class OptionalGroup extends OptionalGroupBase<OptionalGroup> {

         public java.util.ArrayList<String> missingFields() {
            java.util.ArrayList<String> missingFields = super.missingFields();
            return missingFields;
         }

         public void clear() {
            super.clear();
            clearA();
         }

         public OptionalGroup clone() {
            return new OptionalGroup().mergeFrom(this);
         }

         public OptionalGroup mergeFrom(OptionalGroup other) {
            if (other.hasA()) {
               setA(other.getA());
            }
            return this;
         }

         public int serializedSizeUnframed() {
            if (memoizedSerializedSize != -1)
               return memoizedSerializedSize;

            int size = 0;
            if (hasA()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(17, getA());
            }
            memoizedSerializedSize = size;
            return size;
         }

         public OptionalGroup mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 136:
                  setA(input.readInt32());
                  break;
               }
            }
         }
         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (hasA()) {
               output.writeInt32(17, getA());
            }
         }

         public static OptionalGroup parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new OptionalGroup().mergeUnframed(data).checktInitialized();
         }

         public static OptionalGroup parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new OptionalGroup().mergeUnframed(data).checktInitialized();
         }

         public static OptionalGroup parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new OptionalGroup().mergeUnframed(data).checktInitialized();
         }

         public static OptionalGroup parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new OptionalGroup().mergeUnframed(data).checktInitialized();
         }

         public static OptionalGroup parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new OptionalGroup().mergeFramed(data).checktInitialized();
         }

         public static OptionalGroup parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new OptionalGroup().mergeFramed(data).checktInitialized();
         }

         public static OptionalGroup parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new OptionalGroup().mergeFramed(data).checktInitialized();
         }

         public static OptionalGroup parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new OptionalGroup().mergeFramed(data).checktInitialized();
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasA() ) {
               sb.append(prefix+"a: ");
               sb.append(getA());
               sb.append("\n");
            }
            return sb;
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=OptionalGroup.class )
               return false;
            
            return equals((OptionalGroup)obj);
         }
         
         public boolean equals(OptionalGroup obj) {
            if (hasA() ^ obj.hasA() ) 
               return false;
            if (hasA() && ( getA()!=obj.getA() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=1442514655;
            if (hasA()) {
               rc ^= ( 65^getA() );
            }
            return rc;
         }
         
      }

      static abstract class OptionalGroupBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

         // optional int32 a = 17;
         private int f_a = 0;
         private boolean b_a;

         public boolean hasA() {
            return this.b_a;
         }

         public int getA() {
            return this.f_a;
         }

         public T setA(int a) {
            loadAndClear();
            this.b_a = true;
            this.f_a = a;
            return (T)this;
         }

         public void clearA() {
            loadAndClear();
            this.b_a = false;
            this.f_a = 0;
         }

      }


      static public final class RepeatedGroup extends RepeatedGroupBase<RepeatedGroup> {

         public java.util.ArrayList<String> missingFields() {
            java.util.ArrayList<String> missingFields = super.missingFields();
            return missingFields;
         }

         public void clear() {
            super.clear();
            clearA();
         }

         public RepeatedGroup clone() {
            return new RepeatedGroup().mergeFrom(this);
         }

         public RepeatedGroup mergeFrom(RepeatedGroup other) {
            if (other.hasA()) {
               setA(other.getA());
            }
            return this;
         }

         public int serializedSizeUnframed() {
            if (memoizedSerializedSize != -1)
               return memoizedSerializedSize;

            int size = 0;
            if (hasA()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(47, getA());
            }
            memoizedSerializedSize = size;
            return size;
         }

         public RepeatedGroup mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 376:
                  setA(input.readInt32());
                  break;
               }
            }
         }
         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (hasA()) {
               output.writeInt32(47, getA());
            }
         }

         public static RepeatedGroup parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new RepeatedGroup().mergeUnframed(data).checktInitialized();
         }

         public static RepeatedGroup parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new RepeatedGroup().mergeUnframed(data).checktInitialized();
         }

         public static RepeatedGroup parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new RepeatedGroup().mergeUnframed(data).checktInitialized();
         }

         public static RepeatedGroup parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new RepeatedGroup().mergeUnframed(data).checktInitialized();
         }

         public static RepeatedGroup parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new RepeatedGroup().mergeFramed(data).checktInitialized();
         }

         public static RepeatedGroup parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new RepeatedGroup().mergeFramed(data).checktInitialized();
         }

         public static RepeatedGroup parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new RepeatedGroup().mergeFramed(data).checktInitialized();
         }

         public static RepeatedGroup parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new RepeatedGroup().mergeFramed(data).checktInitialized();
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasA() ) {
               sb.append(prefix+"a: ");
               sb.append(getA());
               sb.append("\n");
            }
            return sb;
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=RepeatedGroup.class )
               return false;
            
            return equals((RepeatedGroup)obj);
         }
         
         public boolean equals(RepeatedGroup obj) {
            if (hasA() ^ obj.hasA() ) 
               return false;
            if (hasA() && ( getA()!=obj.getA() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-1046179067;
            if (hasA()) {
               rc ^= ( 65^getA() );
            }
            return rc;
         }
         
      }

      static abstract class RepeatedGroupBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

         // optional int32 a = 47;
         private int f_a = 0;
         private boolean b_a;

         public boolean hasA() {
            return this.b_a;
         }

         public int getA() {
            return this.f_a;
         }

         public T setA(int a) {
            loadAndClear();
            this.b_a = true;
            this.f_a = a;
            return (T)this;
         }

         public void clearA() {
            loadAndClear();
            this.b_a = false;
            this.f_a = 0;
         }

      }

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasOptionalGroup() ) {
            try {
               getOptionalGroup().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"OptionalGroup."));
            }
         }
         if( hasOptionalNestedMessage() ) {
            try {
               getOptionalNestedMessage().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"optional_nested_message."));
            }
         }
         if( hasOptionalForeignMessage() ) {
            try {
               getOptionalForeignMessage().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"optional_foreign_message."));
            }
         }
         if( hasOptionalImportMessage() ) {
            try {
               getOptionalImportMessage().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"optional_import_message."));
            }
         }
         if( hasRepeatedGroup() ) {
            java.util.List<TestAllTypes.RepeatedGroup> l = getRepeatedGroupList();
            for( int i=0; i < l.size(); i++ ) {
               try {
                  l.get(i).assertInitialized();
               } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                  missingFields.addAll(prefix(e.getMissingFields(),"RepeatedGroup["+i+"]"));
               }
            }
         }
         if( hasRepeatedNestedMessage() ) {
            java.util.List<TestAllTypes.NestedMessage> l = getRepeatedNestedMessageList();
            for( int i=0; i < l.size(); i++ ) {
               try {
                  l.get(i).assertInitialized();
               } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                  missingFields.addAll(prefix(e.getMissingFields(),"repeated_nested_message["+i+"]"));
               }
            }
         }
         if( hasRepeatedForeignMessage() ) {
            java.util.List<ForeignMessage> l = getRepeatedForeignMessageList();
            for( int i=0; i < l.size(); i++ ) {
               try {
                  l.get(i).assertInitialized();
               } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                  missingFields.addAll(prefix(e.getMissingFields(),"repeated_foreign_message["+i+"]"));
               }
            }
         }
         if( hasRepeatedImportMessage() ) {
            java.util.List<UnittestImport.ImportMessage> l = getRepeatedImportMessageList();
            for( int i=0; i < l.size(); i++ ) {
               try {
                  l.get(i).assertInitialized();
               } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                  missingFields.addAll(prefix(e.getMissingFields(),"repeated_import_message["+i+"]"));
               }
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearOptionalInt32();
         clearOptionalInt64();
         clearOptionalUint32();
         clearOptionalUint64();
         clearOptionalSint32();
         clearOptionalSint64();
         clearOptionalFixed32();
         clearOptionalFixed64();
         clearOptionalSfixed32();
         clearOptionalSfixed64();
         clearOptionalFloat();
         clearOptionalDouble();
         clearOptionalBool();
         clearOptionalString();
         clearOptionalBytes();
         clearOptionalGroup();
         clearOptionalNestedMessage();
         clearOptionalForeignMessage();
         clearOptionalImportMessage();
         clearOptionalNestedEnum();
         clearOptionalForeignEnum();
         clearOptionalImportEnum();
         clearOptionalStringPiece();
         clearOptionalCord();
         clearRepeatedInt32();
         clearRepeatedInt64();
         clearRepeatedUint32();
         clearRepeatedUint64();
         clearRepeatedSint32();
         clearRepeatedSint64();
         clearRepeatedFixed32();
         clearRepeatedFixed64();
         clearRepeatedSfixed32();
         clearRepeatedSfixed64();
         clearRepeatedFloat();
         clearRepeatedDouble();
         clearRepeatedBool();
         clearRepeatedString();
         clearRepeatedBytes();
         clearRepeatedGroup();
         clearRepeatedNestedMessage();
         clearRepeatedForeignMessage();
         clearRepeatedImportMessage();
         clearRepeatedNestedEnum();
         clearRepeatedForeignEnum();
         clearRepeatedImportEnum();
         clearRepeatedStringPiece();
         clearRepeatedCord();
         clearDefaultInt32();
         clearDefaultInt64();
         clearDefaultUint32();
         clearDefaultUint64();
         clearDefaultSint32();
         clearDefaultSint64();
         clearDefaultFixed32();
         clearDefaultFixed64();
         clearDefaultSfixed32();
         clearDefaultSfixed64();
         clearDefaultFloat();
         clearDefaultDouble();
         clearDefaultBool();
         clearDefaultString();
         clearDefaultBytes();
         clearDefaultNestedEnum();
         clearDefaultForeignEnum();
         clearDefaultImportEnum();
         clearDefaultStringPiece();
         clearDefaultCord();
      }

      public TestAllTypes clone() {
         return new TestAllTypes().mergeFrom(this);
      }

      public TestAllTypes mergeFrom(TestAllTypes other) {
         if (other.hasOptionalInt32()) {
            setOptionalInt32(other.getOptionalInt32());
         }
         if (other.hasOptionalInt64()) {
            setOptionalInt64(other.getOptionalInt64());
         }
         if (other.hasOptionalUint32()) {
            setOptionalUint32(other.getOptionalUint32());
         }
         if (other.hasOptionalUint64()) {
            setOptionalUint64(other.getOptionalUint64());
         }
         if (other.hasOptionalSint32()) {
            setOptionalSint32(other.getOptionalSint32());
         }
         if (other.hasOptionalSint64()) {
            setOptionalSint64(other.getOptionalSint64());
         }
         if (other.hasOptionalFixed32()) {
            setOptionalFixed32(other.getOptionalFixed32());
         }
         if (other.hasOptionalFixed64()) {
            setOptionalFixed64(other.getOptionalFixed64());
         }
         if (other.hasOptionalSfixed32()) {
            setOptionalSfixed32(other.getOptionalSfixed32());
         }
         if (other.hasOptionalSfixed64()) {
            setOptionalSfixed64(other.getOptionalSfixed64());
         }
         if (other.hasOptionalFloat()) {
            setOptionalFloat(other.getOptionalFloat());
         }
         if (other.hasOptionalDouble()) {
            setOptionalDouble(other.getOptionalDouble());
         }
         if (other.hasOptionalBool()) {
            setOptionalBool(other.getOptionalBool());
         }
         if (other.hasOptionalString()) {
            setOptionalString(other.getOptionalString());
         }
         if (other.hasOptionalBytes()) {
            setOptionalBytes(other.getOptionalBytes());
         }
         if (other.hasOptionalGroup()) {
            if (hasOptionalGroup()) {
               getOptionalGroup().mergeFrom(other.getOptionalGroup());
            } else {
               setOptionalGroup(other.getOptionalGroup().clone());
            }
         }
         if (other.hasOptionalNestedMessage()) {
            if (hasOptionalNestedMessage()) {
               getOptionalNestedMessage().mergeFrom(other.getOptionalNestedMessage());
            } else {
               setOptionalNestedMessage(other.getOptionalNestedMessage().clone());
            }
         }
         if (other.hasOptionalForeignMessage()) {
            if (hasOptionalForeignMessage()) {
               getOptionalForeignMessage().mergeFrom(other.getOptionalForeignMessage());
            } else {
               setOptionalForeignMessage(other.getOptionalForeignMessage().clone());
            }
         }
         if (other.hasOptionalImportMessage()) {
            if (hasOptionalImportMessage()) {
               getOptionalImportMessage().mergeFrom(other.getOptionalImportMessage());
            } else {
               setOptionalImportMessage(other.getOptionalImportMessage().clone());
            }
         }
         if (other.hasOptionalNestedEnum()) {
            setOptionalNestedEnum(other.getOptionalNestedEnum());
         }
         if (other.hasOptionalForeignEnum()) {
            setOptionalForeignEnum(other.getOptionalForeignEnum());
         }
         if (other.hasOptionalImportEnum()) {
            setOptionalImportEnum(other.getOptionalImportEnum());
         }
         if (other.hasOptionalStringPiece()) {
            setOptionalStringPiece(other.getOptionalStringPiece());
         }
         if (other.hasOptionalCord()) {
            setOptionalCord(other.getOptionalCord());
         }
         if (other.hasRepeatedInt32()) {
            getRepeatedInt32List().addAll(other.getRepeatedInt32List());
         }
         if (other.hasRepeatedInt64()) {
            getRepeatedInt64List().addAll(other.getRepeatedInt64List());
         }
         if (other.hasRepeatedUint32()) {
            getRepeatedUint32List().addAll(other.getRepeatedUint32List());
         }
         if (other.hasRepeatedUint64()) {
            getRepeatedUint64List().addAll(other.getRepeatedUint64List());
         }
         if (other.hasRepeatedSint32()) {
            getRepeatedSint32List().addAll(other.getRepeatedSint32List());
         }
         if (other.hasRepeatedSint64()) {
            getRepeatedSint64List().addAll(other.getRepeatedSint64List());
         }
         if (other.hasRepeatedFixed32()) {
            getRepeatedFixed32List().addAll(other.getRepeatedFixed32List());
         }
         if (other.hasRepeatedFixed64()) {
            getRepeatedFixed64List().addAll(other.getRepeatedFixed64List());
         }
         if (other.hasRepeatedSfixed32()) {
            getRepeatedSfixed32List().addAll(other.getRepeatedSfixed32List());
         }
         if (other.hasRepeatedSfixed64()) {
            getRepeatedSfixed64List().addAll(other.getRepeatedSfixed64List());
         }
         if (other.hasRepeatedFloat()) {
            getRepeatedFloatList().addAll(other.getRepeatedFloatList());
         }
         if (other.hasRepeatedDouble()) {
            getRepeatedDoubleList().addAll(other.getRepeatedDoubleList());
         }
         if (other.hasRepeatedBool()) {
            getRepeatedBoolList().addAll(other.getRepeatedBoolList());
         }
         if (other.hasRepeatedString()) {
            getRepeatedStringList().addAll(other.getRepeatedStringList());
         }
         if (other.hasRepeatedBytes()) {
            getRepeatedBytesList().addAll(other.getRepeatedBytesList());
         }
         if (other.hasRepeatedGroup()) {
            for(TestAllTypes.RepeatedGroup element: other.getRepeatedGroupList() ) {
               getRepeatedGroupList().add(element.clone());
            }
         }
         if (other.hasRepeatedNestedMessage()) {
            for(TestAllTypes.NestedMessage element: other.getRepeatedNestedMessageList() ) {
               getRepeatedNestedMessageList().add(element.clone());
            }
         }
         if (other.hasRepeatedForeignMessage()) {
            for(ForeignMessage element: other.getRepeatedForeignMessageList() ) {
               getRepeatedForeignMessageList().add(element.clone());
            }
         }
         if (other.hasRepeatedImportMessage()) {
            for(UnittestImport.ImportMessage element: other.getRepeatedImportMessageList() ) {
               getRepeatedImportMessageList().add(element.clone());
            }
         }
         if (other.hasRepeatedNestedEnum()) {
            getRepeatedNestedEnumList().addAll(other.getRepeatedNestedEnumList());
         }
         if (other.hasRepeatedForeignEnum()) {
            getRepeatedForeignEnumList().addAll(other.getRepeatedForeignEnumList());
         }
         if (other.hasRepeatedImportEnum()) {
            getRepeatedImportEnumList().addAll(other.getRepeatedImportEnumList());
         }
         if (other.hasRepeatedStringPiece()) {
            getRepeatedStringPieceList().addAll(other.getRepeatedStringPieceList());
         }
         if (other.hasRepeatedCord()) {
            getRepeatedCordList().addAll(other.getRepeatedCordList());
         }
         if (other.hasDefaultInt32()) {
            setDefaultInt32(other.getDefaultInt32());
         }
         if (other.hasDefaultInt64()) {
            setDefaultInt64(other.getDefaultInt64());
         }
         if (other.hasDefaultUint32()) {
            setDefaultUint32(other.getDefaultUint32());
         }
         if (other.hasDefaultUint64()) {
            setDefaultUint64(other.getDefaultUint64());
         }
         if (other.hasDefaultSint32()) {
            setDefaultSint32(other.getDefaultSint32());
         }
         if (other.hasDefaultSint64()) {
            setDefaultSint64(other.getDefaultSint64());
         }
         if (other.hasDefaultFixed32()) {
            setDefaultFixed32(other.getDefaultFixed32());
         }
         if (other.hasDefaultFixed64()) {
            setDefaultFixed64(other.getDefaultFixed64());
         }
         if (other.hasDefaultSfixed32()) {
            setDefaultSfixed32(other.getDefaultSfixed32());
         }
         if (other.hasDefaultSfixed64()) {
            setDefaultSfixed64(other.getDefaultSfixed64());
         }
         if (other.hasDefaultFloat()) {
            setDefaultFloat(other.getDefaultFloat());
         }
         if (other.hasDefaultDouble()) {
            setDefaultDouble(other.getDefaultDouble());
         }
         if (other.hasDefaultBool()) {
            setDefaultBool(other.getDefaultBool());
         }
         if (other.hasDefaultString()) {
            setDefaultString(other.getDefaultString());
         }
         if (other.hasDefaultBytes()) {
            setDefaultBytes(other.getDefaultBytes());
         }
         if (other.hasDefaultNestedEnum()) {
            setDefaultNestedEnum(other.getDefaultNestedEnum());
         }
         if (other.hasDefaultForeignEnum()) {
            setDefaultForeignEnum(other.getDefaultForeignEnum());
         }
         if (other.hasDefaultImportEnum()) {
            setDefaultImportEnum(other.getDefaultImportEnum());
         }
         if (other.hasDefaultStringPiece()) {
            setDefaultStringPiece(other.getDefaultStringPiece());
         }
         if (other.hasDefaultCord()) {
            setDefaultCord(other.getDefaultCord());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasOptionalInt32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getOptionalInt32());
         }
         if (hasOptionalInt64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(2, getOptionalInt64());
         }
         if (hasOptionalUint32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt32Size(3, getOptionalUint32());
         }
         if (hasOptionalUint64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt64Size(4, getOptionalUint64());
         }
         if (hasOptionalSint32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSInt32Size(5, getOptionalSint32());
         }
         if (hasOptionalSint64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSInt64Size(6, getOptionalSint64());
         }
         if (hasOptionalFixed32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFixed32Size(7, getOptionalFixed32());
         }
         if (hasOptionalFixed64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFixed64Size(8, getOptionalFixed64());
         }
         if (hasOptionalSfixed32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSFixed32Size(9, getOptionalSfixed32());
         }
         if (hasOptionalSfixed64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSFixed64Size(10, getOptionalSfixed64());
         }
         if (hasOptionalFloat()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFloatSize(11, getOptionalFloat());
         }
         if (hasOptionalDouble()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeDoubleSize(12, getOptionalDouble());
         }
         if (hasOptionalBool()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBoolSize(13, getOptionalBool());
         }
         if (hasOptionalString()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(14, getOptionalString());
         }
         if (hasOptionalBytes()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(15, getOptionalBytes());
         }
         if (hasOptionalGroup()) {
            size += computeGroupSize(16, getOptionalGroup());
         }
         if (hasOptionalNestedMessage()) {
            size += computeMessageSize(18, getOptionalNestedMessage());
         }
         if (hasOptionalForeignMessage()) {
            size += computeMessageSize(19, getOptionalForeignMessage());
         }
         if (hasOptionalImportMessage()) {
            size += computeMessageSize(20, getOptionalImportMessage());
         }
         if (hasOptionalNestedEnum()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(21, getOptionalNestedEnum().getNumber());
         }
         if (hasOptionalForeignEnum()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(22, getOptionalForeignEnum().getNumber());
         }
         if (hasOptionalImportEnum()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(23, getOptionalImportEnum().getNumber());
         }
         if (hasOptionalStringPiece()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(24, getOptionalStringPiece());
         }
         if (hasOptionalCord()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(25, getOptionalCord());
         }
         if (hasRepeatedInt32()) {
            for (int i : getRepeatedInt32List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(31, i);
            }
         }
         if (hasRepeatedInt64()) {
            for (long i : getRepeatedInt64List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(32, i);
            }
         }
         if (hasRepeatedUint32()) {
            for (int i : getRepeatedUint32List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt32Size(33, i);
            }
         }
         if (hasRepeatedUint64()) {
            for (long i : getRepeatedUint64List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt64Size(34, i);
            }
         }
         if (hasRepeatedSint32()) {
            for (int i : getRepeatedSint32List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSInt32Size(35, i);
            }
         }
         if (hasRepeatedSint64()) {
            for (long i : getRepeatedSint64List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSInt64Size(36, i);
            }
         }
         if (hasRepeatedFixed32()) {
            for (int i : getRepeatedFixed32List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFixed32Size(37, i);
            }
         }
         if (hasRepeatedFixed64()) {
            for (long i : getRepeatedFixed64List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFixed64Size(38, i);
            }
         }
         if (hasRepeatedSfixed32()) {
            for (int i : getRepeatedSfixed32List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSFixed32Size(39, i);
            }
         }
         if (hasRepeatedSfixed64()) {
            for (long i : getRepeatedSfixed64List()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSFixed64Size(40, i);
            }
         }
         if (hasRepeatedFloat()) {
            for (float i : getRepeatedFloatList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFloatSize(41, i);
            }
         }
         if (hasRepeatedDouble()) {
            for (double i : getRepeatedDoubleList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeDoubleSize(42, i);
            }
         }
         if (hasRepeatedBool()) {
            for (boolean i : getRepeatedBoolList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBoolSize(43, i);
            }
         }
         if (hasRepeatedString()) {
            for (java.lang.String i : getRepeatedStringList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(44, i);
            }
         }
         if (hasRepeatedBytes()) {
            for (org.fusesource.hawtbuf.Buffer i : getRepeatedBytesList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(45, i);
            }
         }
         if (hasRepeatedGroup()) {
            for (TestAllTypes.RepeatedGroup i : getRepeatedGroupList()) {
               size += computeGroupSize(46, i);
            }
         }
         if (hasRepeatedNestedMessage()) {
            for (TestAllTypes.NestedMessage i : getRepeatedNestedMessageList()) {
               size += computeMessageSize(48, i);
            }
         }
         if (hasRepeatedForeignMessage()) {
            for (ForeignMessage i : getRepeatedForeignMessageList()) {
               size += computeMessageSize(49, i);
            }
         }
         if (hasRepeatedImportMessage()) {
            for (UnittestImport.ImportMessage i : getRepeatedImportMessageList()) {
               size += computeMessageSize(50, i);
            }
         }
         if (hasRepeatedNestedEnum()) {
            for (TestAllTypes.NestedEnum i : getRepeatedNestedEnumList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(51, i.getNumber());
            }
         }
         if (hasRepeatedForeignEnum()) {
            for (ForeignEnum i : getRepeatedForeignEnumList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(52, i.getNumber());
            }
         }
         if (hasRepeatedImportEnum()) {
            for (UnittestImport.ImportEnum i : getRepeatedImportEnumList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(53, i.getNumber());
            }
         }
         if (hasRepeatedStringPiece()) {
            for (java.lang.String i : getRepeatedStringPieceList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(54, i);
            }
         }
         if (hasRepeatedCord()) {
            for (java.lang.String i : getRepeatedCordList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(55, i);
            }
         }
         if (hasDefaultInt32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(61, getDefaultInt32());
         }
         if (hasDefaultInt64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(62, getDefaultInt64());
         }
         if (hasDefaultUint32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt32Size(63, getDefaultUint32());
         }
         if (hasDefaultUint64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt64Size(64, getDefaultUint64());
         }
         if (hasDefaultSint32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSInt32Size(65, getDefaultSint32());
         }
         if (hasDefaultSint64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSInt64Size(66, getDefaultSint64());
         }
         if (hasDefaultFixed32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFixed32Size(67, getDefaultFixed32());
         }
         if (hasDefaultFixed64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFixed64Size(68, getDefaultFixed64());
         }
         if (hasDefaultSfixed32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSFixed32Size(69, getDefaultSfixed32());
         }
         if (hasDefaultSfixed64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSFixed64Size(70, getDefaultSfixed64());
         }
         if (hasDefaultFloat()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFloatSize(71, getDefaultFloat());
         }
         if (hasDefaultDouble()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeDoubleSize(72, getDefaultDouble());
         }
         if (hasDefaultBool()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBoolSize(73, getDefaultBool());
         }
         if (hasDefaultString()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(74, getDefaultString());
         }
         if (hasDefaultBytes()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(75, getDefaultBytes());
         }
         if (hasDefaultNestedEnum()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(81, getDefaultNestedEnum().getNumber());
         }
         if (hasDefaultForeignEnum()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(82, getDefaultForeignEnum().getNumber());
         }
         if (hasDefaultImportEnum()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(83, getDefaultImportEnum().getNumber());
         }
         if (hasDefaultStringPiece()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(84, getDefaultStringPiece());
         }
         if (hasDefaultCord()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(85, getDefaultCord());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestAllTypes mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setOptionalInt32(input.readInt32());
               break;
            case 16:
               setOptionalInt64(input.readInt64());
               break;
            case 24:
               setOptionalUint32(input.readUInt32());
               break;
            case 32:
               setOptionalUint64(input.readUInt64());
               break;
            case 40:
               setOptionalSint32(input.readSInt32());
               break;
            case 48:
               setOptionalSint64(input.readSInt64());
               break;
            case 61:
               setOptionalFixed32(input.readFixed32());
               break;
            case 65:
               setOptionalFixed64(input.readFixed64());
               break;
            case 77:
               setOptionalSfixed32(input.readSFixed32());
               break;
            case 81:
               setOptionalSfixed64(input.readSFixed64());
               break;
            case 93:
               setOptionalFloat(input.readFloat());
               break;
            case 97:
               setOptionalDouble(input.readDouble());
               break;
            case 104:
               setOptionalBool(input.readBool());
               break;
            case 114:
               setOptionalString(input.readString());
               break;
            case 122:
               setOptionalBytes(input.readBytes());
               break;
            case 131:
               if (hasOptionalGroup()) {
                  readGroup(input, 16, getOptionalGroup());
               } else {
                  setOptionalGroup(readGroup(input, 16,new TestAllTypes.OptionalGroup()));
               }
               
               break;
            case 146:
               if (hasOptionalNestedMessage()) {
                  getOptionalNestedMessage().mergeFramed(input);
               } else {
                  setOptionalNestedMessage(new TestAllTypes.NestedMessage().mergeFramed(input));
               }
               break;
            case 154:
               if (hasOptionalForeignMessage()) {
                  getOptionalForeignMessage().mergeFramed(input);
               } else {
                  setOptionalForeignMessage(new ForeignMessage().mergeFramed(input));
               }
               break;
            case 162:
               if (hasOptionalImportMessage()) {
                  getOptionalImportMessage().mergeFramed(input);
               } else {
                  setOptionalImportMessage(new UnittestImport.ImportMessage().mergeFramed(input));
               }
               break;
            case 168:
               {
                  int t = input.readEnum();
                  TestAllTypes.NestedEnum value = TestAllTypes.NestedEnum.valueOf(t);
                  if( value !=null ) {
                     setOptionalNestedEnum(value);
                  }
               }
               break;
            case 176:
               {
                  int t = input.readEnum();
                  ForeignEnum value = ForeignEnum.valueOf(t);
                  if( value !=null ) {
                     setOptionalForeignEnum(value);
                  }
               }
               break;
            case 184:
               {
                  int t = input.readEnum();
                  UnittestImport.ImportEnum value = UnittestImport.ImportEnum.valueOf(t);
                  if( value !=null ) {
                     setOptionalImportEnum(value);
                  }
               }
               break;
            case 194:
               setOptionalStringPiece(input.readString());
               break;
            case 202:
               setOptionalCord(input.readString());
               break;
            case 248:
               getRepeatedInt32List().add(input.readInt32());
               break;
            case 256:
               getRepeatedInt64List().add(input.readInt64());
               break;
            case 264:
               getRepeatedUint32List().add(input.readUInt32());
               break;
            case 272:
               getRepeatedUint64List().add(input.readUInt64());
               break;
            case 280:
               getRepeatedSint32List().add(input.readSInt32());
               break;
            case 288:
               getRepeatedSint64List().add(input.readSInt64());
               break;
            case 301:
               getRepeatedFixed32List().add(input.readFixed32());
               break;
            case 305:
               getRepeatedFixed64List().add(input.readFixed64());
               break;
            case 317:
               getRepeatedSfixed32List().add(input.readSFixed32());
               break;
            case 321:
               getRepeatedSfixed64List().add(input.readSFixed64());
               break;
            case 333:
               getRepeatedFloatList().add(input.readFloat());
               break;
            case 337:
               getRepeatedDoubleList().add(input.readDouble());
               break;
            case 344:
               getRepeatedBoolList().add(input.readBool());
               break;
            case 354:
               getRepeatedStringList().add(input.readString());
               break;
            case 362:
               getRepeatedBytesList().add(input.readBytes());
               break;
            case 371:
               getRepeatedGroupList().add(readGroup(input, 46, new TestAllTypes.RepeatedGroup()));
               
               break;
            case 386:
               getRepeatedNestedMessageList().add(new TestAllTypes.NestedMessage().mergeFramed(input));
               break;
            case 394:
               getRepeatedForeignMessageList().add(new ForeignMessage().mergeFramed(input));
               break;
            case 402:
               getRepeatedImportMessageList().add(new UnittestImport.ImportMessage().mergeFramed(input));
               break;
            case 408:
               {
                  int t = input.readEnum();
                  TestAllTypes.NestedEnum value = TestAllTypes.NestedEnum.valueOf(t);
                  if( value !=null ) {
                     getRepeatedNestedEnumList().add(value);
                  }
               }
               break;
            case 416:
               {
                  int t = input.readEnum();
                  ForeignEnum value = ForeignEnum.valueOf(t);
                  if( value !=null ) {
                     getRepeatedForeignEnumList().add(value);
                  }
               }
               break;
            case 424:
               {
                  int t = input.readEnum();
                  UnittestImport.ImportEnum value = UnittestImport.ImportEnum.valueOf(t);
                  if( value !=null ) {
                     getRepeatedImportEnumList().add(value);
                  }
               }
               break;
            case 434:
               getRepeatedStringPieceList().add(input.readString());
               break;
            case 442:
               getRepeatedCordList().add(input.readString());
               break;
            case 488:
               setDefaultInt32(input.readInt32());
               break;
            case 496:
               setDefaultInt64(input.readInt64());
               break;
            case 504:
               setDefaultUint32(input.readUInt32());
               break;
            case 512:
               setDefaultUint64(input.readUInt64());
               break;
            case 520:
               setDefaultSint32(input.readSInt32());
               break;
            case 528:
               setDefaultSint64(input.readSInt64());
               break;
            case 541:
               setDefaultFixed32(input.readFixed32());
               break;
            case 545:
               setDefaultFixed64(input.readFixed64());
               break;
            case 557:
               setDefaultSfixed32(input.readSFixed32());
               break;
            case 561:
               setDefaultSfixed64(input.readSFixed64());
               break;
            case 573:
               setDefaultFloat(input.readFloat());
               break;
            case 577:
               setDefaultDouble(input.readDouble());
               break;
            case 584:
               setDefaultBool(input.readBool());
               break;
            case 594:
               setDefaultString(input.readString());
               break;
            case 602:
               setDefaultBytes(input.readBytes());
               break;
            case 648:
               {
                  int t = input.readEnum();
                  TestAllTypes.NestedEnum value = TestAllTypes.NestedEnum.valueOf(t);
                  if( value !=null ) {
                     setDefaultNestedEnum(value);
                  }
               }
               break;
            case 656:
               {
                  int t = input.readEnum();
                  ForeignEnum value = ForeignEnum.valueOf(t);
                  if( value !=null ) {
                     setDefaultForeignEnum(value);
                  }
               }
               break;
            case 664:
               {
                  int t = input.readEnum();
                  UnittestImport.ImportEnum value = UnittestImport.ImportEnum.valueOf(t);
                  if( value !=null ) {
                     setDefaultImportEnum(value);
                  }
               }
               break;
            case 674:
               setDefaultStringPiece(input.readString());
               break;
            case 682:
               setDefaultCord(input.readString());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasOptionalInt32()) {
            output.writeInt32(1, getOptionalInt32());
         }
         if (hasOptionalInt64()) {
            output.writeInt64(2, getOptionalInt64());
         }
         if (hasOptionalUint32()) {
            output.writeUInt32(3, getOptionalUint32());
         }
         if (hasOptionalUint64()) {
            output.writeUInt64(4, getOptionalUint64());
         }
         if (hasOptionalSint32()) {
            output.writeSInt32(5, getOptionalSint32());
         }
         if (hasOptionalSint64()) {
            output.writeSInt64(6, getOptionalSint64());
         }
         if (hasOptionalFixed32()) {
            output.writeFixed32(7, getOptionalFixed32());
         }
         if (hasOptionalFixed64()) {
            output.writeFixed64(8, getOptionalFixed64());
         }
         if (hasOptionalSfixed32()) {
            output.writeSFixed32(9, getOptionalSfixed32());
         }
         if (hasOptionalSfixed64()) {
            output.writeSFixed64(10, getOptionalSfixed64());
         }
         if (hasOptionalFloat()) {
            output.writeFloat(11, getOptionalFloat());
         }
         if (hasOptionalDouble()) {
            output.writeDouble(12, getOptionalDouble());
         }
         if (hasOptionalBool()) {
            output.writeBool(13, getOptionalBool());
         }
         if (hasOptionalString()) {
            output.writeString(14, getOptionalString());
         }
         if (hasOptionalBytes()) {
            output.writeBytes(15, getOptionalBytes());
         }
         if (hasOptionalGroup()) {
            writeGroup(output, 16, getOptionalGroup());
         }
         if (hasOptionalNestedMessage()) {
            writeMessage(output, 18, getOptionalNestedMessage());
         }
         if (hasOptionalForeignMessage()) {
            writeMessage(output, 19, getOptionalForeignMessage());
         }
         if (hasOptionalImportMessage()) {
            writeMessage(output, 20, getOptionalImportMessage());
         }
         if (hasOptionalNestedEnum()) {
            output.writeEnum(21, getOptionalNestedEnum().getNumber());
         }
         if (hasOptionalForeignEnum()) {
            output.writeEnum(22, getOptionalForeignEnum().getNumber());
         }
         if (hasOptionalImportEnum()) {
            output.writeEnum(23, getOptionalImportEnum().getNumber());
         }
         if (hasOptionalStringPiece()) {
            output.writeString(24, getOptionalStringPiece());
         }
         if (hasOptionalCord()) {
            output.writeString(25, getOptionalCord());
         }
         if (hasRepeatedInt32()) {
            for (int i : getRepeatedInt32List()) {
               output.writeInt32(31, i);
            }
         }
         if (hasRepeatedInt64()) {
            for (long i : getRepeatedInt64List()) {
               output.writeInt64(32, i);
            }
         }
         if (hasRepeatedUint32()) {
            for (int i : getRepeatedUint32List()) {
               output.writeUInt32(33, i);
            }
         }
         if (hasRepeatedUint64()) {
            for (long i : getRepeatedUint64List()) {
               output.writeUInt64(34, i);
            }
         }
         if (hasRepeatedSint32()) {
            for (int i : getRepeatedSint32List()) {
               output.writeSInt32(35, i);
            }
         }
         if (hasRepeatedSint64()) {
            for (long i : getRepeatedSint64List()) {
               output.writeSInt64(36, i);
            }
         }
         if (hasRepeatedFixed32()) {
            for (int i : getRepeatedFixed32List()) {
               output.writeFixed32(37, i);
            }
         }
         if (hasRepeatedFixed64()) {
            for (long i : getRepeatedFixed64List()) {
               output.writeFixed64(38, i);
            }
         }
         if (hasRepeatedSfixed32()) {
            for (int i : getRepeatedSfixed32List()) {
               output.writeSFixed32(39, i);
            }
         }
         if (hasRepeatedSfixed64()) {
            for (long i : getRepeatedSfixed64List()) {
               output.writeSFixed64(40, i);
            }
         }
         if (hasRepeatedFloat()) {
            for (float i : getRepeatedFloatList()) {
               output.writeFloat(41, i);
            }
         }
         if (hasRepeatedDouble()) {
            for (double i : getRepeatedDoubleList()) {
               output.writeDouble(42, i);
            }
         }
         if (hasRepeatedBool()) {
            for (boolean i : getRepeatedBoolList()) {
               output.writeBool(43, i);
            }
         }
         if (hasRepeatedString()) {
            for (java.lang.String i : getRepeatedStringList()) {
               output.writeString(44, i);
            }
         }
         if (hasRepeatedBytes()) {
            for (org.fusesource.hawtbuf.Buffer i : getRepeatedBytesList()) {
               output.writeBytes(45, i);
            }
         }
         if (hasRepeatedGroup()) {
            for (TestAllTypes.RepeatedGroup i : getRepeatedGroupList()) {
               writeGroup(output, 46, i);
            }
         }
         if (hasRepeatedNestedMessage()) {
            for (TestAllTypes.NestedMessage i : getRepeatedNestedMessageList()) {
               writeMessage(output, 48, i);
            }
         }
         if (hasRepeatedForeignMessage()) {
            for (ForeignMessage i : getRepeatedForeignMessageList()) {
               writeMessage(output, 49, i);
            }
         }
         if (hasRepeatedImportMessage()) {
            for (UnittestImport.ImportMessage i : getRepeatedImportMessageList()) {
               writeMessage(output, 50, i);
            }
         }
         if (hasRepeatedNestedEnum()) {
            for (TestAllTypes.NestedEnum i : getRepeatedNestedEnumList()) {
               output.writeEnum(51, i.getNumber());
            }
         }
         if (hasRepeatedForeignEnum()) {
            for (ForeignEnum i : getRepeatedForeignEnumList()) {
               output.writeEnum(52, i.getNumber());
            }
         }
         if (hasRepeatedImportEnum()) {
            for (UnittestImport.ImportEnum i : getRepeatedImportEnumList()) {
               output.writeEnum(53, i.getNumber());
            }
         }
         if (hasRepeatedStringPiece()) {
            for (java.lang.String i : getRepeatedStringPieceList()) {
               output.writeString(54, i);
            }
         }
         if (hasRepeatedCord()) {
            for (java.lang.String i : getRepeatedCordList()) {
               output.writeString(55, i);
            }
         }
         if (hasDefaultInt32()) {
            output.writeInt32(61, getDefaultInt32());
         }
         if (hasDefaultInt64()) {
            output.writeInt64(62, getDefaultInt64());
         }
         if (hasDefaultUint32()) {
            output.writeUInt32(63, getDefaultUint32());
         }
         if (hasDefaultUint64()) {
            output.writeUInt64(64, getDefaultUint64());
         }
         if (hasDefaultSint32()) {
            output.writeSInt32(65, getDefaultSint32());
         }
         if (hasDefaultSint64()) {
            output.writeSInt64(66, getDefaultSint64());
         }
         if (hasDefaultFixed32()) {
            output.writeFixed32(67, getDefaultFixed32());
         }
         if (hasDefaultFixed64()) {
            output.writeFixed64(68, getDefaultFixed64());
         }
         if (hasDefaultSfixed32()) {
            output.writeSFixed32(69, getDefaultSfixed32());
         }
         if (hasDefaultSfixed64()) {
            output.writeSFixed64(70, getDefaultSfixed64());
         }
         if (hasDefaultFloat()) {
            output.writeFloat(71, getDefaultFloat());
         }
         if (hasDefaultDouble()) {
            output.writeDouble(72, getDefaultDouble());
         }
         if (hasDefaultBool()) {
            output.writeBool(73, getDefaultBool());
         }
         if (hasDefaultString()) {
            output.writeString(74, getDefaultString());
         }
         if (hasDefaultBytes()) {
            output.writeBytes(75, getDefaultBytes());
         }
         if (hasDefaultNestedEnum()) {
            output.writeEnum(81, getDefaultNestedEnum().getNumber());
         }
         if (hasDefaultForeignEnum()) {
            output.writeEnum(82, getDefaultForeignEnum().getNumber());
         }
         if (hasDefaultImportEnum()) {
            output.writeEnum(83, getDefaultImportEnum().getNumber());
         }
         if (hasDefaultStringPiece()) {
            output.writeString(84, getDefaultStringPiece());
         }
         if (hasDefaultCord()) {
            output.writeString(85, getDefaultCord());
         }
      }

      public static TestAllTypes parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllTypes().mergeUnframed(data).checktInitialized();
      }

      public static TestAllTypes parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllTypes().mergeUnframed(data).checktInitialized();
      }

      public static TestAllTypes parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllTypes().mergeUnframed(data).checktInitialized();
      }

      public static TestAllTypes parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllTypes().mergeUnframed(data).checktInitialized();
      }

      public static TestAllTypes parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllTypes().mergeFramed(data).checktInitialized();
      }

      public static TestAllTypes parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllTypes().mergeFramed(data).checktInitialized();
      }

      public static TestAllTypes parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllTypes().mergeFramed(data).checktInitialized();
      }

      public static TestAllTypes parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllTypes().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasOptionalInt32() ) {
            sb.append(prefix+"optional_int32: ");
            sb.append(getOptionalInt32());
            sb.append("\n");
         }
         if(  hasOptionalInt64() ) {
            sb.append(prefix+"optional_int64: ");
            sb.append(getOptionalInt64());
            sb.append("\n");
         }
         if(  hasOptionalUint32() ) {
            sb.append(prefix+"optional_uint32: ");
            sb.append(getOptionalUint32());
            sb.append("\n");
         }
         if(  hasOptionalUint64() ) {
            sb.append(prefix+"optional_uint64: ");
            sb.append(getOptionalUint64());
            sb.append("\n");
         }
         if(  hasOptionalSint32() ) {
            sb.append(prefix+"optional_sint32: ");
            sb.append(getOptionalSint32());
            sb.append("\n");
         }
         if(  hasOptionalSint64() ) {
            sb.append(prefix+"optional_sint64: ");
            sb.append(getOptionalSint64());
            sb.append("\n");
         }
         if(  hasOptionalFixed32() ) {
            sb.append(prefix+"optional_fixed32: ");
            sb.append(getOptionalFixed32());
            sb.append("\n");
         }
         if(  hasOptionalFixed64() ) {
            sb.append(prefix+"optional_fixed64: ");
            sb.append(getOptionalFixed64());
            sb.append("\n");
         }
         if(  hasOptionalSfixed32() ) {
            sb.append(prefix+"optional_sfixed32: ");
            sb.append(getOptionalSfixed32());
            sb.append("\n");
         }
         if(  hasOptionalSfixed64() ) {
            sb.append(prefix+"optional_sfixed64: ");
            sb.append(getOptionalSfixed64());
            sb.append("\n");
         }
         if(  hasOptionalFloat() ) {
            sb.append(prefix+"optional_float: ");
            sb.append(getOptionalFloat());
            sb.append("\n");
         }
         if(  hasOptionalDouble() ) {
            sb.append(prefix+"optional_double: ");
            sb.append(getOptionalDouble());
            sb.append("\n");
         }
         if(  hasOptionalBool() ) {
            sb.append(prefix+"optional_bool: ");
            sb.append(getOptionalBool());
            sb.append("\n");
         }
         if(  hasOptionalString() ) {
            sb.append(prefix+"optional_string: ");
            sb.append(getOptionalString());
            sb.append("\n");
         }
         if(  hasOptionalBytes() ) {
            sb.append(prefix+"optional_bytes: ");
            sb.append(getOptionalBytes());
            sb.append("\n");
         }
         if(  hasOptionalGroup() ) {
            sb.append(prefix+"OptionalGroup {\n");
            getOptionalGroup().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasOptionalNestedMessage() ) {
            sb.append(prefix+"optional_nested_message {\n");
            getOptionalNestedMessage().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasOptionalForeignMessage() ) {
            sb.append(prefix+"optional_foreign_message {\n");
            getOptionalForeignMessage().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasOptionalImportMessage() ) {
            sb.append(prefix+"optional_import_message {\n");
            getOptionalImportMessage().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasOptionalNestedEnum() ) {
            sb.append(prefix+"optional_nested_enum: ");
            sb.append(getOptionalNestedEnum());
            sb.append("\n");
         }
         if(  hasOptionalForeignEnum() ) {
            sb.append(prefix+"optional_foreign_enum: ");
            sb.append(getOptionalForeignEnum());
            sb.append("\n");
         }
         if(  hasOptionalImportEnum() ) {
            sb.append(prefix+"optional_import_enum: ");
            sb.append(getOptionalImportEnum());
            sb.append("\n");
         }
         if(  hasOptionalStringPiece() ) {
            sb.append(prefix+"optional_string_piece: ");
            sb.append(getOptionalStringPiece());
            sb.append("\n");
         }
         if(  hasOptionalCord() ) {
            sb.append(prefix+"optional_cord: ");
            sb.append(getOptionalCord());
            sb.append("\n");
         }
         if(  hasRepeatedInt32() ) {
            java.util.List<java.lang.Integer> l = getRepeatedInt32List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_int32["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedInt64() ) {
            java.util.List<java.lang.Long> l = getRepeatedInt64List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_int64["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedUint32() ) {
            java.util.List<java.lang.Integer> l = getRepeatedUint32List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_uint32["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedUint64() ) {
            java.util.List<java.lang.Long> l = getRepeatedUint64List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_uint64["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedSint32() ) {
            java.util.List<java.lang.Integer> l = getRepeatedSint32List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_sint32["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedSint64() ) {
            java.util.List<java.lang.Long> l = getRepeatedSint64List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_sint64["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedFixed32() ) {
            java.util.List<java.lang.Integer> l = getRepeatedFixed32List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_fixed32["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedFixed64() ) {
            java.util.List<java.lang.Long> l = getRepeatedFixed64List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_fixed64["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedSfixed32() ) {
            java.util.List<java.lang.Integer> l = getRepeatedSfixed32List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_sfixed32["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedSfixed64() ) {
            java.util.List<java.lang.Long> l = getRepeatedSfixed64List();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_sfixed64["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedFloat() ) {
            java.util.List<java.lang.Float> l = getRepeatedFloatList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_float["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedDouble() ) {
            java.util.List<java.lang.Double> l = getRepeatedDoubleList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_double["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedBool() ) {
            java.util.List<java.lang.Boolean> l = getRepeatedBoolList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_bool["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedString() ) {
            java.util.List<java.lang.String> l = getRepeatedStringList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_string["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedBytes() ) {
            java.util.List<org.fusesource.hawtbuf.Buffer> l = getRepeatedBytesList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_bytes["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedGroup() ) {
            java.util.List<TestAllTypes.RepeatedGroup> l = getRepeatedGroupList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"RepeatedGroup["+i+"] {\n");
               l.get(i).toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
         }
         if(  hasRepeatedNestedMessage() ) {
            java.util.List<TestAllTypes.NestedMessage> l = getRepeatedNestedMessageList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_nested_message["+i+"] {\n");
               l.get(i).toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
         }
         if(  hasRepeatedForeignMessage() ) {
            java.util.List<ForeignMessage> l = getRepeatedForeignMessageList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_foreign_message["+i+"] {\n");
               l.get(i).toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
         }
         if(  hasRepeatedImportMessage() ) {
            java.util.List<UnittestImport.ImportMessage> l = getRepeatedImportMessageList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_import_message["+i+"] {\n");
               l.get(i).toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
         }
         if(  hasRepeatedNestedEnum() ) {
            java.util.List<TestAllTypes.NestedEnum> l = getRepeatedNestedEnumList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_nested_enum["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedForeignEnum() ) {
            java.util.List<ForeignEnum> l = getRepeatedForeignEnumList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_foreign_enum["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedImportEnum() ) {
            java.util.List<UnittestImport.ImportEnum> l = getRepeatedImportEnumList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_import_enum["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedStringPiece() ) {
            java.util.List<java.lang.String> l = getRepeatedStringPieceList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_string_piece["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedCord() ) {
            java.util.List<java.lang.String> l = getRepeatedCordList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_cord["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasDefaultInt32() ) {
            sb.append(prefix+"default_int32: ");
            sb.append(getDefaultInt32());
            sb.append("\n");
         }
         if(  hasDefaultInt64() ) {
            sb.append(prefix+"default_int64: ");
            sb.append(getDefaultInt64());
            sb.append("\n");
         }
         if(  hasDefaultUint32() ) {
            sb.append(prefix+"default_uint32: ");
            sb.append(getDefaultUint32());
            sb.append("\n");
         }
         if(  hasDefaultUint64() ) {
            sb.append(prefix+"default_uint64: ");
            sb.append(getDefaultUint64());
            sb.append("\n");
         }
         if(  hasDefaultSint32() ) {
            sb.append(prefix+"default_sint32: ");
            sb.append(getDefaultSint32());
            sb.append("\n");
         }
         if(  hasDefaultSint64() ) {
            sb.append(prefix+"default_sint64: ");
            sb.append(getDefaultSint64());
            sb.append("\n");
         }
         if(  hasDefaultFixed32() ) {
            sb.append(prefix+"default_fixed32: ");
            sb.append(getDefaultFixed32());
            sb.append("\n");
         }
         if(  hasDefaultFixed64() ) {
            sb.append(prefix+"default_fixed64: ");
            sb.append(getDefaultFixed64());
            sb.append("\n");
         }
         if(  hasDefaultSfixed32() ) {
            sb.append(prefix+"default_sfixed32: ");
            sb.append(getDefaultSfixed32());
            sb.append("\n");
         }
         if(  hasDefaultSfixed64() ) {
            sb.append(prefix+"default_sfixed64: ");
            sb.append(getDefaultSfixed64());
            sb.append("\n");
         }
         if(  hasDefaultFloat() ) {
            sb.append(prefix+"default_float: ");
            sb.append(getDefaultFloat());
            sb.append("\n");
         }
         if(  hasDefaultDouble() ) {
            sb.append(prefix+"default_double: ");
            sb.append(getDefaultDouble());
            sb.append("\n");
         }
         if(  hasDefaultBool() ) {
            sb.append(prefix+"default_bool: ");
            sb.append(getDefaultBool());
            sb.append("\n");
         }
         if(  hasDefaultString() ) {
            sb.append(prefix+"default_string: ");
            sb.append(getDefaultString());
            sb.append("\n");
         }
         if(  hasDefaultBytes() ) {
            sb.append(prefix+"default_bytes: ");
            sb.append(getDefaultBytes());
            sb.append("\n");
         }
         if(  hasDefaultNestedEnum() ) {
            sb.append(prefix+"default_nested_enum: ");
            sb.append(getDefaultNestedEnum());
            sb.append("\n");
         }
         if(  hasDefaultForeignEnum() ) {
            sb.append(prefix+"default_foreign_enum: ");
            sb.append(getDefaultForeignEnum());
            sb.append("\n");
         }
         if(  hasDefaultImportEnum() ) {
            sb.append(prefix+"default_import_enum: ");
            sb.append(getDefaultImportEnum());
            sb.append("\n");
         }
         if(  hasDefaultStringPiece() ) {
            sb.append(prefix+"default_string_piece: ");
            sb.append(getDefaultStringPiece());
            sb.append("\n");
         }
         if(  hasDefaultCord() ) {
            sb.append(prefix+"default_cord: ");
            sb.append(getDefaultCord());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestAllTypes.class )
            return false;
         
         return equals((TestAllTypes)obj);
      }
      
      public boolean equals(TestAllTypes obj) {
         if (hasOptionalInt32() ^ obj.hasOptionalInt32() ) 
            return false;
         if (hasOptionalInt32() && ( getOptionalInt32()!=obj.getOptionalInt32() ))
            return false;
         if (hasOptionalInt64() ^ obj.hasOptionalInt64() ) 
            return false;
         if (hasOptionalInt64() && ( getOptionalInt64()!=obj.getOptionalInt64() ))
            return false;
         if (hasOptionalUint32() ^ obj.hasOptionalUint32() ) 
            return false;
         if (hasOptionalUint32() && ( getOptionalUint32()!=obj.getOptionalUint32() ))
            return false;
         if (hasOptionalUint64() ^ obj.hasOptionalUint64() ) 
            return false;
         if (hasOptionalUint64() && ( getOptionalUint64()!=obj.getOptionalUint64() ))
            return false;
         if (hasOptionalSint32() ^ obj.hasOptionalSint32() ) 
            return false;
         if (hasOptionalSint32() && ( getOptionalSint32()!=obj.getOptionalSint32() ))
            return false;
         if (hasOptionalSint64() ^ obj.hasOptionalSint64() ) 
            return false;
         if (hasOptionalSint64() && ( getOptionalSint64()!=obj.getOptionalSint64() ))
            return false;
         if (hasOptionalFixed32() ^ obj.hasOptionalFixed32() ) 
            return false;
         if (hasOptionalFixed32() && ( getOptionalFixed32()!=obj.getOptionalFixed32() ))
            return false;
         if (hasOptionalFixed64() ^ obj.hasOptionalFixed64() ) 
            return false;
         if (hasOptionalFixed64() && ( getOptionalFixed64()!=obj.getOptionalFixed64() ))
            return false;
         if (hasOptionalSfixed32() ^ obj.hasOptionalSfixed32() ) 
            return false;
         if (hasOptionalSfixed32() && ( getOptionalSfixed32()!=obj.getOptionalSfixed32() ))
            return false;
         if (hasOptionalSfixed64() ^ obj.hasOptionalSfixed64() ) 
            return false;
         if (hasOptionalSfixed64() && ( getOptionalSfixed64()!=obj.getOptionalSfixed64() ))
            return false;
         if (hasOptionalFloat() ^ obj.hasOptionalFloat() ) 
            return false;
         if (hasOptionalFloat() && ( getOptionalFloat()!=obj.getOptionalFloat() ))
            return false;
         if (hasOptionalDouble() ^ obj.hasOptionalDouble() ) 
            return false;
         if (hasOptionalDouble() && ( getOptionalDouble()!=obj.getOptionalDouble() ))
            return false;
         if (hasOptionalBool() ^ obj.hasOptionalBool() ) 
            return false;
         if (hasOptionalBool() && ( getOptionalBool()!=obj.getOptionalBool() ))
            return false;
         if (hasOptionalString() ^ obj.hasOptionalString() ) 
            return false;
         if (hasOptionalString() && ( !getOptionalString().equals(obj.getOptionalString()) ))
            return false;
         if (hasOptionalBytes() ^ obj.hasOptionalBytes() ) 
            return false;
         if (hasOptionalBytes() && ( !getOptionalBytes().equals(obj.getOptionalBytes()) ))
            return false;
         if (hasOptionalGroup() ^ obj.hasOptionalGroup() ) 
            return false;
         if (hasOptionalGroup() && ( !getOptionalGroup().equals(obj.getOptionalGroup()) ))
            return false;
         if (hasOptionalNestedMessage() ^ obj.hasOptionalNestedMessage() ) 
            return false;
         if (hasOptionalNestedMessage() && ( !getOptionalNestedMessage().equals(obj.getOptionalNestedMessage()) ))
            return false;
         if (hasOptionalForeignMessage() ^ obj.hasOptionalForeignMessage() ) 
            return false;
         if (hasOptionalForeignMessage() && ( !getOptionalForeignMessage().equals(obj.getOptionalForeignMessage()) ))
            return false;
         if (hasOptionalImportMessage() ^ obj.hasOptionalImportMessage() ) 
            return false;
         if (hasOptionalImportMessage() && ( !getOptionalImportMessage().equals(obj.getOptionalImportMessage()) ))
            return false;
         if (hasOptionalNestedEnum() ^ obj.hasOptionalNestedEnum() ) 
            return false;
         if (hasOptionalNestedEnum() && ( !getOptionalNestedEnum().equals(obj.getOptionalNestedEnum()) ))
            return false;
         if (hasOptionalForeignEnum() ^ obj.hasOptionalForeignEnum() ) 
            return false;
         if (hasOptionalForeignEnum() && ( !getOptionalForeignEnum().equals(obj.getOptionalForeignEnum()) ))
            return false;
         if (hasOptionalImportEnum() ^ obj.hasOptionalImportEnum() ) 
            return false;
         if (hasOptionalImportEnum() && ( !getOptionalImportEnum().equals(obj.getOptionalImportEnum()) ))
            return false;
         if (hasOptionalStringPiece() ^ obj.hasOptionalStringPiece() ) 
            return false;
         if (hasOptionalStringPiece() && ( !getOptionalStringPiece().equals(obj.getOptionalStringPiece()) ))
            return false;
         if (hasOptionalCord() ^ obj.hasOptionalCord() ) 
            return false;
         if (hasOptionalCord() && ( !getOptionalCord().equals(obj.getOptionalCord()) ))
            return false;
         if (hasRepeatedInt32() ^ obj.hasRepeatedInt32() ) 
            return false;
         if (hasRepeatedInt32() && ( !getRepeatedInt32List().equals(obj.getRepeatedInt32List()) ))
            return false;
         if (hasRepeatedInt64() ^ obj.hasRepeatedInt64() ) 
            return false;
         if (hasRepeatedInt64() && ( !getRepeatedInt64List().equals(obj.getRepeatedInt64List()) ))
            return false;
         if (hasRepeatedUint32() ^ obj.hasRepeatedUint32() ) 
            return false;
         if (hasRepeatedUint32() && ( !getRepeatedUint32List().equals(obj.getRepeatedUint32List()) ))
            return false;
         if (hasRepeatedUint64() ^ obj.hasRepeatedUint64() ) 
            return false;
         if (hasRepeatedUint64() && ( !getRepeatedUint64List().equals(obj.getRepeatedUint64List()) ))
            return false;
         if (hasRepeatedSint32() ^ obj.hasRepeatedSint32() ) 
            return false;
         if (hasRepeatedSint32() && ( !getRepeatedSint32List().equals(obj.getRepeatedSint32List()) ))
            return false;
         if (hasRepeatedSint64() ^ obj.hasRepeatedSint64() ) 
            return false;
         if (hasRepeatedSint64() && ( !getRepeatedSint64List().equals(obj.getRepeatedSint64List()) ))
            return false;
         if (hasRepeatedFixed32() ^ obj.hasRepeatedFixed32() ) 
            return false;
         if (hasRepeatedFixed32() && ( !getRepeatedFixed32List().equals(obj.getRepeatedFixed32List()) ))
            return false;
         if (hasRepeatedFixed64() ^ obj.hasRepeatedFixed64() ) 
            return false;
         if (hasRepeatedFixed64() && ( !getRepeatedFixed64List().equals(obj.getRepeatedFixed64List()) ))
            return false;
         if (hasRepeatedSfixed32() ^ obj.hasRepeatedSfixed32() ) 
            return false;
         if (hasRepeatedSfixed32() && ( !getRepeatedSfixed32List().equals(obj.getRepeatedSfixed32List()) ))
            return false;
         if (hasRepeatedSfixed64() ^ obj.hasRepeatedSfixed64() ) 
            return false;
         if (hasRepeatedSfixed64() && ( !getRepeatedSfixed64List().equals(obj.getRepeatedSfixed64List()) ))
            return false;
         if (hasRepeatedFloat() ^ obj.hasRepeatedFloat() ) 
            return false;
         if (hasRepeatedFloat() && ( !getRepeatedFloatList().equals(obj.getRepeatedFloatList()) ))
            return false;
         if (hasRepeatedDouble() ^ obj.hasRepeatedDouble() ) 
            return false;
         if (hasRepeatedDouble() && ( !getRepeatedDoubleList().equals(obj.getRepeatedDoubleList()) ))
            return false;
         if (hasRepeatedBool() ^ obj.hasRepeatedBool() ) 
            return false;
         if (hasRepeatedBool() && ( !getRepeatedBoolList().equals(obj.getRepeatedBoolList()) ))
            return false;
         if (hasRepeatedString() ^ obj.hasRepeatedString() ) 
            return false;
         if (hasRepeatedString() && ( !getRepeatedStringList().equals(obj.getRepeatedStringList()) ))
            return false;
         if (hasRepeatedBytes() ^ obj.hasRepeatedBytes() ) 
            return false;
         if (hasRepeatedBytes() && ( !getRepeatedBytesList().equals(obj.getRepeatedBytesList()) ))
            return false;
         if (hasRepeatedGroup() ^ obj.hasRepeatedGroup() ) 
            return false;
         if (hasRepeatedGroup() && ( !getRepeatedGroupList().equals(obj.getRepeatedGroupList()) ))
            return false;
         if (hasRepeatedNestedMessage() ^ obj.hasRepeatedNestedMessage() ) 
            return false;
         if (hasRepeatedNestedMessage() && ( !getRepeatedNestedMessageList().equals(obj.getRepeatedNestedMessageList()) ))
            return false;
         if (hasRepeatedForeignMessage() ^ obj.hasRepeatedForeignMessage() ) 
            return false;
         if (hasRepeatedForeignMessage() && ( !getRepeatedForeignMessageList().equals(obj.getRepeatedForeignMessageList()) ))
            return false;
         if (hasRepeatedImportMessage() ^ obj.hasRepeatedImportMessage() ) 
            return false;
         if (hasRepeatedImportMessage() && ( !getRepeatedImportMessageList().equals(obj.getRepeatedImportMessageList()) ))
            return false;
         if (hasRepeatedNestedEnum() ^ obj.hasRepeatedNestedEnum() ) 
            return false;
         if (hasRepeatedNestedEnum() && ( !getRepeatedNestedEnumList().equals(obj.getRepeatedNestedEnumList()) ))
            return false;
         if (hasRepeatedForeignEnum() ^ obj.hasRepeatedForeignEnum() ) 
            return false;
         if (hasRepeatedForeignEnum() && ( !getRepeatedForeignEnumList().equals(obj.getRepeatedForeignEnumList()) ))
            return false;
         if (hasRepeatedImportEnum() ^ obj.hasRepeatedImportEnum() ) 
            return false;
         if (hasRepeatedImportEnum() && ( !getRepeatedImportEnumList().equals(obj.getRepeatedImportEnumList()) ))
            return false;
         if (hasRepeatedStringPiece() ^ obj.hasRepeatedStringPiece() ) 
            return false;
         if (hasRepeatedStringPiece() && ( !getRepeatedStringPieceList().equals(obj.getRepeatedStringPieceList()) ))
            return false;
         if (hasRepeatedCord() ^ obj.hasRepeatedCord() ) 
            return false;
         if (hasRepeatedCord() && ( !getRepeatedCordList().equals(obj.getRepeatedCordList()) ))
            return false;
         if (hasDefaultInt32() ^ obj.hasDefaultInt32() ) 
            return false;
         if (hasDefaultInt32() && ( getDefaultInt32()!=obj.getDefaultInt32() ))
            return false;
         if (hasDefaultInt64() ^ obj.hasDefaultInt64() ) 
            return false;
         if (hasDefaultInt64() && ( getDefaultInt64()!=obj.getDefaultInt64() ))
            return false;
         if (hasDefaultUint32() ^ obj.hasDefaultUint32() ) 
            return false;
         if (hasDefaultUint32() && ( getDefaultUint32()!=obj.getDefaultUint32() ))
            return false;
         if (hasDefaultUint64() ^ obj.hasDefaultUint64() ) 
            return false;
         if (hasDefaultUint64() && ( getDefaultUint64()!=obj.getDefaultUint64() ))
            return false;
         if (hasDefaultSint32() ^ obj.hasDefaultSint32() ) 
            return false;
         if (hasDefaultSint32() && ( getDefaultSint32()!=obj.getDefaultSint32() ))
            return false;
         if (hasDefaultSint64() ^ obj.hasDefaultSint64() ) 
            return false;
         if (hasDefaultSint64() && ( getDefaultSint64()!=obj.getDefaultSint64() ))
            return false;
         if (hasDefaultFixed32() ^ obj.hasDefaultFixed32() ) 
            return false;
         if (hasDefaultFixed32() && ( getDefaultFixed32()!=obj.getDefaultFixed32() ))
            return false;
         if (hasDefaultFixed64() ^ obj.hasDefaultFixed64() ) 
            return false;
         if (hasDefaultFixed64() && ( getDefaultFixed64()!=obj.getDefaultFixed64() ))
            return false;
         if (hasDefaultSfixed32() ^ obj.hasDefaultSfixed32() ) 
            return false;
         if (hasDefaultSfixed32() && ( getDefaultSfixed32()!=obj.getDefaultSfixed32() ))
            return false;
         if (hasDefaultSfixed64() ^ obj.hasDefaultSfixed64() ) 
            return false;
         if (hasDefaultSfixed64() && ( getDefaultSfixed64()!=obj.getDefaultSfixed64() ))
            return false;
         if (hasDefaultFloat() ^ obj.hasDefaultFloat() ) 
            return false;
         if (hasDefaultFloat() && ( getDefaultFloat()!=obj.getDefaultFloat() ))
            return false;
         if (hasDefaultDouble() ^ obj.hasDefaultDouble() ) 
            return false;
         if (hasDefaultDouble() && ( getDefaultDouble()!=obj.getDefaultDouble() ))
            return false;
         if (hasDefaultBool() ^ obj.hasDefaultBool() ) 
            return false;
         if (hasDefaultBool() && ( getDefaultBool()!=obj.getDefaultBool() ))
            return false;
         if (hasDefaultString() ^ obj.hasDefaultString() ) 
            return false;
         if (hasDefaultString() && ( !getDefaultString().equals(obj.getDefaultString()) ))
            return false;
         if (hasDefaultBytes() ^ obj.hasDefaultBytes() ) 
            return false;
         if (hasDefaultBytes() && ( !getDefaultBytes().equals(obj.getDefaultBytes()) ))
            return false;
         if (hasDefaultNestedEnum() ^ obj.hasDefaultNestedEnum() ) 
            return false;
         if (hasDefaultNestedEnum() && ( !getDefaultNestedEnum().equals(obj.getDefaultNestedEnum()) ))
            return false;
         if (hasDefaultForeignEnum() ^ obj.hasDefaultForeignEnum() ) 
            return false;
         if (hasDefaultForeignEnum() && ( !getDefaultForeignEnum().equals(obj.getDefaultForeignEnum()) ))
            return false;
         if (hasDefaultImportEnum() ^ obj.hasDefaultImportEnum() ) 
            return false;
         if (hasDefaultImportEnum() && ( !getDefaultImportEnum().equals(obj.getDefaultImportEnum()) ))
            return false;
         if (hasDefaultStringPiece() ^ obj.hasDefaultStringPiece() ) 
            return false;
         if (hasDefaultStringPiece() && ( !getDefaultStringPiece().equals(obj.getDefaultStringPiece()) ))
            return false;
         if (hasDefaultCord() ^ obj.hasDefaultCord() ) 
            return false;
         if (hasDefaultCord() && ( !getDefaultCord().equals(obj.getDefaultCord()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-1628039638;
         if (hasOptionalInt32()) {
            rc ^= ( 1444245230^getOptionalInt32() );
         }
         if (hasOptionalInt64()) {
            rc ^= ( 1444245325^(new Long(getOptionalInt64())).hashCode() );
         }
         if (hasOptionalUint32()) {
            rc ^= ( -2134222119^getOptionalUint32() );
         }
         if (hasOptionalUint64()) {
            rc ^= ( -2134222024^(new Long(getOptionalUint64())).hashCode() );
         }
         if (hasOptionalSint32()) {
            rc ^= ( 2103486875^getOptionalSint32() );
         }
         if (hasOptionalSint64()) {
            rc ^= ( 2103486970^(new Long(getOptionalSint64())).hashCode() );
         }
         if (hasOptionalFixed32()) {
            rc ^= ( 2139773235^getOptionalFixed32() );
         }
         if (hasOptionalFixed64()) {
            rc ^= ( 2139773330^(new Long(getOptionalFixed64())).hashCode() );
         }
         if (hasOptionalSfixed32()) {
            rc ^= ( 15834272^getOptionalSfixed32() );
         }
         if (hasOptionalSfixed64()) {
            rc ^= ( 15834367^(new Long(getOptionalSfixed64())).hashCode() );
         }
         if (hasOptionalFloat()) {
            rc ^= ( 1441411772^(new Double(getOptionalFloat())).hashCode() );
         }
         if (hasOptionalDouble()) {
            rc ^= ( 1679783793^(new Double(getOptionalDouble())).hashCode() );
         }
         if (hasOptionalBool()) {
            rc ^= ( 1986043530^ (getOptionalBool()? 13:-13) );
         }
         if (hasOptionalString()) {
            rc ^= ( 2113756081^getOptionalString().hashCode() );
         }
         if (hasOptionalBytes()) {
            rc ^= ( 1438109899^getOptionalBytes().hashCode() );
         }
         if (hasOptionalGroup()) {
            rc ^= ( 1442514655^getOptionalGroup().hashCode() );
         }
         if (hasOptionalNestedMessage()) {
            rc ^= ( 1060320112^getOptionalNestedMessage().hashCode() );
         }
         if (hasOptionalForeignMessage()) {
            rc ^= ( 215194675^getOptionalForeignMessage().hashCode() );
         }
         if (hasOptionalImportMessage()) {
            rc ^= ( 1436573954^getOptionalImportMessage().hashCode() );
         }
         if (hasOptionalNestedEnum()) {
            rc ^= ( 1820672568^getOptionalNestedEnum().hashCode() );
         }
         if (hasOptionalForeignEnum()) {
            rc ^= ( 944523349^getOptionalForeignEnum().hashCode() );
         }
         if (hasOptionalImportEnum()) {
            rc ^= ( 539446758^getOptionalImportEnum().hashCode() );
         }
         if (hasOptionalStringPiece()) {
            rc ^= ( 868607421^getOptionalStringPiece().hashCode() );
         }
         if (hasOptionalCord()) {
            rc ^= ( 1986073406^getOptionalCord().hashCode() );
         }
         if (hasRepeatedInt32()) {
            rc ^= ( -1044448492^getRepeatedInt32List().hashCode() );
         }
         if (hasRepeatedInt64()) {
            rc ^= ( -1044448397^getRepeatedInt64List().hashCode() );
         }
         if (hasRepeatedUint32()) {
            rc ^= ( -1974316173^getRepeatedUint32List().hashCode() );
         }
         if (hasRepeatedUint64()) {
            rc ^= ( -1974316078^getRepeatedUint64List().hashCode() );
         }
         if (hasRepeatedSint32()) {
            rc ^= ( -2031574475^getRepeatedSint32List().hashCode() );
         }
         if (hasRepeatedSint64()) {
            rc ^= ( -2031574380^getRepeatedSint64List().hashCode() );
         }
         if (hasRepeatedFixed32()) {
            rc ^= ( -1493077031^getRepeatedFixed32List().hashCode() );
         }
         if (hasRepeatedFixed64()) {
            rc ^= ( -1493076936^getRepeatedFixed64List().hashCode() );
         }
         if (hasRepeatedSfixed32()) {
            rc ^= ( -933374278^getRepeatedSfixed32List().hashCode() );
         }
         if (hasRepeatedSfixed64()) {
            rc ^= ( -933374183^getRepeatedSfixed64List().hashCode() );
         }
         if (hasRepeatedFloat()) {
            rc ^= ( -1047281950^getRepeatedFloatList().hashCode() );
         }
         if (hasRepeatedDouble()) {
            rc ^= ( 1839689739^getRepeatedDoubleList().hashCode() );
         }
         if (hasRepeatedBool()) {
            rc ^= ( -1696467548^getRepeatedBoolList().hashCode() );
         }
         if (hasRepeatedString()) {
            rc ^= ( -2021305269^getRepeatedStringList().hashCode() );
         }
         if (hasRepeatedBytes()) {
            rc ^= ( -1050583823^getRepeatedBytesList().hashCode() );
         }
         if (hasRepeatedGroup()) {
            rc ^= ( -1046179067^getRepeatedGroupList().hashCode() );
         }
         if (hasRepeatedNestedMessage()) {
            rc ^= ( 1622751638^getRepeatedNestedMessageList().hashCode() );
         }
         if (hasRepeatedForeignMessage()) {
            rc ^= ( 470702797^getRepeatedForeignMessageList().hashCode() );
         }
         if (hasRepeatedImportMessage()) {
            rc ^= ( 1999005480^getRepeatedImportMessageList().hashCode() );
         }
         if (hasRepeatedNestedEnum()) {
            rc ^= ( 164322770^getRepeatedNestedEnumList().hashCode() );
         }
         if (hasRepeatedForeignEnum()) {
            rc ^= ( 1137287163^getRepeatedForeignEnumList().hashCode() );
         }
         if (hasRepeatedImportEnum()) {
            rc ^= ( -1116903040^getRepeatedImportEnumList().hashCode() );
         }
         if (hasRepeatedStringPiece()) {
            rc ^= ( 1061371235^getRepeatedStringPieceList().hashCode() );
         }
         if (hasRepeatedCord()) {
            rc ^= ( -1696437672^getRepeatedCordList().hashCode() );
         }
         if (hasDefaultInt32()) {
            rc ^= ( -506417939^getDefaultInt32() );
         }
         if (hasDefaultInt64()) {
            rc ^= ( -506417844^(new Long(getDefaultInt64())).hashCode() );
         }
         if (hasDefaultUint32()) {
            rc ^= ( 1819729082^getDefaultUint32() );
         }
         if (hasDefaultUint64()) {
            rc ^= ( 1819729177^(new Long(getDefaultUint64())).hashCode() );
         }
         if (hasDefaultSint32()) {
            rc ^= ( 1762470780^getDefaultSint32() );
         }
         if (hasDefaultSint64()) {
            rc ^= ( 1762470875^(new Long(getDefaultSint64())).hashCode() );
         }
         if (hasDefaultFixed32()) {
            rc ^= ( 158208882^getDefaultFixed32() );
         }
         if (hasDefaultFixed64()) {
            rc ^= ( 158208977^(new Long(getDefaultFixed64())).hashCode() );
         }
         if (hasDefaultSfixed32()) {
            rc ^= ( -1283118527^getDefaultSfixed32() );
         }
         if (hasDefaultSfixed64()) {
            rc ^= ( -1283118432^(new Long(getDefaultSfixed64())).hashCode() );
         }
         if (hasDefaultFloat()) {
            rc ^= ( -509251397^(new Double(getDefaultFloat())).hashCode() );
         }
         if (hasDefaultDouble()) {
            rc ^= ( 1338767698^(new Double(getDefaultDouble())).hashCode() );
         }
         if (hasDefaultBool()) {
            rc ^= ( 1230382251^ (getDefaultBool()? 61:-61) );
         }
         if (hasDefaultString()) {
            rc ^= ( 1772739986^getDefaultString().hashCode() );
         }
         if (hasDefaultBytes()) {
            rc ^= ( -512553270^getDefaultBytes().hashCode() );
         }
         if (hasDefaultNestedEnum()) {
            rc ^= ( -932451431^getDefaultNestedEnum().hashCode() );
         }
         if (hasDefaultForeignEnum()) {
            rc ^= ( 1497025300^getDefaultForeignEnum().hashCode() );
         }
         if (hasDefaultImportEnum()) {
            rc ^= ( 2081290055^getDefaultImportEnum().hashCode() );
         }
         if (hasDefaultStringPiece()) {
            rc ^= ( 1421109372^getDefaultStringPiece().hashCode() );
         }
         if (hasDefaultCord()) {
            rc ^= ( 1230412127^getDefaultCord().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestAllTypesBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional int32 optional_int32 = 1;
      private int f_optionalInt32 = 0;
      private boolean b_optionalInt32;

      public boolean hasOptionalInt32() {
         return this.b_optionalInt32;
      }

      public int getOptionalInt32() {
         return this.f_optionalInt32;
      }

      public T setOptionalInt32(int optionalInt32) {
         loadAndClear();
         this.b_optionalInt32 = true;
         this.f_optionalInt32 = optionalInt32;
         return (T)this;
      }

      public void clearOptionalInt32() {
         loadAndClear();
         this.b_optionalInt32 = false;
         this.f_optionalInt32 = 0;
      }

      // optional int64 optional_int64 = 2;
      private long f_optionalInt64 = 0;
      private boolean b_optionalInt64;

      public boolean hasOptionalInt64() {
         return this.b_optionalInt64;
      }

      public long getOptionalInt64() {
         return this.f_optionalInt64;
      }

      public T setOptionalInt64(long optionalInt64) {
         loadAndClear();
         this.b_optionalInt64 = true;
         this.f_optionalInt64 = optionalInt64;
         return (T)this;
      }

      public void clearOptionalInt64() {
         loadAndClear();
         this.b_optionalInt64 = false;
         this.f_optionalInt64 = 0;
      }

      // optional uint32 optional_uint32 = 3;
      private int f_optionalUint32 = 0;
      private boolean b_optionalUint32;

      public boolean hasOptionalUint32() {
         return this.b_optionalUint32;
      }

      public int getOptionalUint32() {
         return this.f_optionalUint32;
      }

      public T setOptionalUint32(int optionalUint32) {
         loadAndClear();
         this.b_optionalUint32 = true;
         this.f_optionalUint32 = optionalUint32;
         return (T)this;
      }

      public void clearOptionalUint32() {
         loadAndClear();
         this.b_optionalUint32 = false;
         this.f_optionalUint32 = 0;
      }

      // optional uint64 optional_uint64 = 4;
      private long f_optionalUint64 = 0;
      private boolean b_optionalUint64;

      public boolean hasOptionalUint64() {
         return this.b_optionalUint64;
      }

      public long getOptionalUint64() {
         return this.f_optionalUint64;
      }

      public T setOptionalUint64(long optionalUint64) {
         loadAndClear();
         this.b_optionalUint64 = true;
         this.f_optionalUint64 = optionalUint64;
         return (T)this;
      }

      public void clearOptionalUint64() {
         loadAndClear();
         this.b_optionalUint64 = false;
         this.f_optionalUint64 = 0;
      }

      // optional sint32 optional_sint32 = 5;
      private int f_optionalSint32 = 0;
      private boolean b_optionalSint32;

      public boolean hasOptionalSint32() {
         return this.b_optionalSint32;
      }

      public int getOptionalSint32() {
         return this.f_optionalSint32;
      }

      public T setOptionalSint32(int optionalSint32) {
         loadAndClear();
         this.b_optionalSint32 = true;
         this.f_optionalSint32 = optionalSint32;
         return (T)this;
      }

      public void clearOptionalSint32() {
         loadAndClear();
         this.b_optionalSint32 = false;
         this.f_optionalSint32 = 0;
      }

      // optional sint64 optional_sint64 = 6;
      private long f_optionalSint64 = 0;
      private boolean b_optionalSint64;

      public boolean hasOptionalSint64() {
         return this.b_optionalSint64;
      }

      public long getOptionalSint64() {
         return this.f_optionalSint64;
      }

      public T setOptionalSint64(long optionalSint64) {
         loadAndClear();
         this.b_optionalSint64 = true;
         this.f_optionalSint64 = optionalSint64;
         return (T)this;
      }

      public void clearOptionalSint64() {
         loadAndClear();
         this.b_optionalSint64 = false;
         this.f_optionalSint64 = 0;
      }

      // optional fixed32 optional_fixed32 = 7;
      private int f_optionalFixed32 = 0;
      private boolean b_optionalFixed32;

      public boolean hasOptionalFixed32() {
         return this.b_optionalFixed32;
      }

      public int getOptionalFixed32() {
         return this.f_optionalFixed32;
      }

      public T setOptionalFixed32(int optionalFixed32) {
         loadAndClear();
         this.b_optionalFixed32 = true;
         this.f_optionalFixed32 = optionalFixed32;
         return (T)this;
      }

      public void clearOptionalFixed32() {
         loadAndClear();
         this.b_optionalFixed32 = false;
         this.f_optionalFixed32 = 0;
      }

      // optional fixed64 optional_fixed64 = 8;
      private long f_optionalFixed64 = 0;
      private boolean b_optionalFixed64;

      public boolean hasOptionalFixed64() {
         return this.b_optionalFixed64;
      }

      public long getOptionalFixed64() {
         return this.f_optionalFixed64;
      }

      public T setOptionalFixed64(long optionalFixed64) {
         loadAndClear();
         this.b_optionalFixed64 = true;
         this.f_optionalFixed64 = optionalFixed64;
         return (T)this;
      }

      public void clearOptionalFixed64() {
         loadAndClear();
         this.b_optionalFixed64 = false;
         this.f_optionalFixed64 = 0;
      }

      // optional sfixed32 optional_sfixed32 = 9;
      private int f_optionalSfixed32 = 0;
      private boolean b_optionalSfixed32;

      public boolean hasOptionalSfixed32() {
         return this.b_optionalSfixed32;
      }

      public int getOptionalSfixed32() {
         return this.f_optionalSfixed32;
      }

      public T setOptionalSfixed32(int optionalSfixed32) {
         loadAndClear();
         this.b_optionalSfixed32 = true;
         this.f_optionalSfixed32 = optionalSfixed32;
         return (T)this;
      }

      public void clearOptionalSfixed32() {
         loadAndClear();
         this.b_optionalSfixed32 = false;
         this.f_optionalSfixed32 = 0;
      }

      // optional sfixed64 optional_sfixed64 = 10;
      private long f_optionalSfixed64 = 0;
      private boolean b_optionalSfixed64;

      public boolean hasOptionalSfixed64() {
         return this.b_optionalSfixed64;
      }

      public long getOptionalSfixed64() {
         return this.f_optionalSfixed64;
      }

      public T setOptionalSfixed64(long optionalSfixed64) {
         loadAndClear();
         this.b_optionalSfixed64 = true;
         this.f_optionalSfixed64 = optionalSfixed64;
         return (T)this;
      }

      public void clearOptionalSfixed64() {
         loadAndClear();
         this.b_optionalSfixed64 = false;
         this.f_optionalSfixed64 = 0;
      }

      // optional float optional_float = 11;
      private float f_optionalFloat = 0;
      private boolean b_optionalFloat;

      public boolean hasOptionalFloat() {
         return this.b_optionalFloat;
      }

      public float getOptionalFloat() {
         return this.f_optionalFloat;
      }

      public T setOptionalFloat(float optionalFloat) {
         loadAndClear();
         this.b_optionalFloat = true;
         this.f_optionalFloat = optionalFloat;
         return (T)this;
      }

      public void clearOptionalFloat() {
         loadAndClear();
         this.b_optionalFloat = false;
         this.f_optionalFloat = 0;
      }

      // optional double optional_double = 12;
      private double f_optionalDouble = 0;
      private boolean b_optionalDouble;

      public boolean hasOptionalDouble() {
         return this.b_optionalDouble;
      }

      public double getOptionalDouble() {
         return this.f_optionalDouble;
      }

      public T setOptionalDouble(double optionalDouble) {
         loadAndClear();
         this.b_optionalDouble = true;
         this.f_optionalDouble = optionalDouble;
         return (T)this;
      }

      public void clearOptionalDouble() {
         loadAndClear();
         this.b_optionalDouble = false;
         this.f_optionalDouble = 0;
      }

      // optional bool optional_bool = 13;
      private boolean f_optionalBool = false;
      private boolean b_optionalBool;

      public boolean hasOptionalBool() {
         return this.b_optionalBool;
      }

      public boolean getOptionalBool() {
         return this.f_optionalBool;
      }

      public T setOptionalBool(boolean optionalBool) {
         loadAndClear();
         this.b_optionalBool = true;
         this.f_optionalBool = optionalBool;
         return (T)this;
      }

      public void clearOptionalBool() {
         loadAndClear();
         this.b_optionalBool = false;
         this.f_optionalBool = false;
      }

      // optional string optional_string = 14;
      private java.lang.String f_optionalString = null;
      private boolean b_optionalString;

      public boolean hasOptionalString() {
         return this.b_optionalString;
      }

      public java.lang.String getOptionalString() {
         return this.f_optionalString;
      }

      public T setOptionalString(java.lang.String optionalString) {
         loadAndClear();
         this.b_optionalString = true;
         this.f_optionalString = optionalString;
         return (T)this;
      }

      public void clearOptionalString() {
         loadAndClear();
         this.b_optionalString = false;
         this.f_optionalString = null;
      }

      // optional bytes optional_bytes = 15;
      private org.fusesource.hawtbuf.Buffer f_optionalBytes = null;
      private boolean b_optionalBytes;

      public boolean hasOptionalBytes() {
         return this.b_optionalBytes;
      }

      public org.fusesource.hawtbuf.Buffer getOptionalBytes() {
         return this.f_optionalBytes;
      }

      public T setOptionalBytes(org.fusesource.hawtbuf.Buffer optionalBytes) {
         loadAndClear();
         this.b_optionalBytes = true;
         this.f_optionalBytes = optionalBytes;
         return (T)this;
      }

      public void clearOptionalBytes() {
         loadAndClear();
         this.b_optionalBytes = false;
         this.f_optionalBytes = null;
      }

      // optional OptionalGroup OptionalGroup = 16;
      private TestAllTypes.OptionalGroup f_optionalGroup = null;

      public boolean hasOptionalGroup() {
         return this.f_optionalGroup!=null;
      }

      public TestAllTypes.OptionalGroup getOptionalGroup() {
         if( this.f_optionalGroup == null ) {
            this.f_optionalGroup = new TestAllTypes.OptionalGroup();
         }
         return this.f_optionalGroup;
      }

      public T setOptionalGroup(TestAllTypes.OptionalGroup optionalGroup) {
         loadAndClear();
         this.f_optionalGroup = optionalGroup;
         return (T)this;
      }

      public void clearOptionalGroup() {
         loadAndClear();
         this.f_optionalGroup = null;
      }

      // optional NestedMessage optional_nested_message = 18;
      private TestAllTypes.NestedMessage f_optionalNestedMessage = null;

      public boolean hasOptionalNestedMessage() {
         return this.f_optionalNestedMessage!=null;
      }

      public TestAllTypes.NestedMessage getOptionalNestedMessage() {
         if( this.f_optionalNestedMessage == null ) {
            this.f_optionalNestedMessage = new TestAllTypes.NestedMessage();
         }
         return this.f_optionalNestedMessage;
      }

      public T setOptionalNestedMessage(TestAllTypes.NestedMessage optionalNestedMessage) {
         loadAndClear();
         this.f_optionalNestedMessage = optionalNestedMessage;
         return (T)this;
      }

      public void clearOptionalNestedMessage() {
         loadAndClear();
         this.f_optionalNestedMessage = null;
      }

      // optional ForeignMessage optional_foreign_message = 19;
      private ForeignMessage f_optionalForeignMessage = null;

      public boolean hasOptionalForeignMessage() {
         return this.f_optionalForeignMessage!=null;
      }

      public ForeignMessage getOptionalForeignMessage() {
         if( this.f_optionalForeignMessage == null ) {
            this.f_optionalForeignMessage = new ForeignMessage();
         }
         return this.f_optionalForeignMessage;
      }

      public T setOptionalForeignMessage(ForeignMessage optionalForeignMessage) {
         loadAndClear();
         this.f_optionalForeignMessage = optionalForeignMessage;
         return (T)this;
      }

      public void clearOptionalForeignMessage() {
         loadAndClear();
         this.f_optionalForeignMessage = null;
      }

      // optional protobuf_unittest_import.ImportMessage optional_import_message = 20;
      private UnittestImport.ImportMessage f_optionalImportMessage = null;

      public boolean hasOptionalImportMessage() {
         return this.f_optionalImportMessage!=null;
      }

      public UnittestImport.ImportMessage getOptionalImportMessage() {
         if( this.f_optionalImportMessage == null ) {
            this.f_optionalImportMessage = new UnittestImport.ImportMessage();
         }
         return this.f_optionalImportMessage;
      }

      public T setOptionalImportMessage(UnittestImport.ImportMessage optionalImportMessage) {
         loadAndClear();
         this.f_optionalImportMessage = optionalImportMessage;
         return (T)this;
      }

      public void clearOptionalImportMessage() {
         loadAndClear();
         this.f_optionalImportMessage = null;
      }

      // optional NestedEnum optional_nested_enum = 21;
      private TestAllTypes.NestedEnum f_optionalNestedEnum = null;
      private boolean b_optionalNestedEnum;

      public boolean hasOptionalNestedEnum() {
         return this.b_optionalNestedEnum;
      }

      public TestAllTypes.NestedEnum getOptionalNestedEnum() {
         return this.f_optionalNestedEnum;
      }

      public T setOptionalNestedEnum(TestAllTypes.NestedEnum optionalNestedEnum) {
         loadAndClear();
         this.b_optionalNestedEnum = true;
         this.f_optionalNestedEnum = optionalNestedEnum;
         return (T)this;
      }

      public void clearOptionalNestedEnum() {
         loadAndClear();
         this.b_optionalNestedEnum = false;
         this.f_optionalNestedEnum = null;
      }

      // optional ForeignEnum optional_foreign_enum = 22;
      private ForeignEnum f_optionalForeignEnum = null;
      private boolean b_optionalForeignEnum;

      public boolean hasOptionalForeignEnum() {
         return this.b_optionalForeignEnum;
      }

      public ForeignEnum getOptionalForeignEnum() {
         return this.f_optionalForeignEnum;
      }

      public T setOptionalForeignEnum(ForeignEnum optionalForeignEnum) {
         loadAndClear();
         this.b_optionalForeignEnum = true;
         this.f_optionalForeignEnum = optionalForeignEnum;
         return (T)this;
      }

      public void clearOptionalForeignEnum() {
         loadAndClear();
         this.b_optionalForeignEnum = false;
         this.f_optionalForeignEnum = null;
      }

      // optional protobuf_unittest_import.ImportEnum optional_import_enum = 23;
      private UnittestImport.ImportEnum f_optionalImportEnum = null;
      private boolean b_optionalImportEnum;

      public boolean hasOptionalImportEnum() {
         return this.b_optionalImportEnum;
      }

      public UnittestImport.ImportEnum getOptionalImportEnum() {
         return this.f_optionalImportEnum;
      }

      public T setOptionalImportEnum(UnittestImport.ImportEnum optionalImportEnum) {
         loadAndClear();
         this.b_optionalImportEnum = true;
         this.f_optionalImportEnum = optionalImportEnum;
         return (T)this;
      }

      public void clearOptionalImportEnum() {
         loadAndClear();
         this.b_optionalImportEnum = false;
         this.f_optionalImportEnum = null;
      }

      // optional string optional_string_piece = 24;
      private java.lang.String f_optionalStringPiece = null;
      private boolean b_optionalStringPiece;

      public boolean hasOptionalStringPiece() {
         return this.b_optionalStringPiece;
      }

      public java.lang.String getOptionalStringPiece() {
         return this.f_optionalStringPiece;
      }

      public T setOptionalStringPiece(java.lang.String optionalStringPiece) {
         loadAndClear();
         this.b_optionalStringPiece = true;
         this.f_optionalStringPiece = optionalStringPiece;
         return (T)this;
      }

      public void clearOptionalStringPiece() {
         loadAndClear();
         this.b_optionalStringPiece = false;
         this.f_optionalStringPiece = null;
      }

      // optional string optional_cord = 25;
      private java.lang.String f_optionalCord = null;
      private boolean b_optionalCord;

      public boolean hasOptionalCord() {
         return this.b_optionalCord;
      }

      public java.lang.String getOptionalCord() {
         return this.f_optionalCord;
      }

      public T setOptionalCord(java.lang.String optionalCord) {
         loadAndClear();
         this.b_optionalCord = true;
         this.f_optionalCord = optionalCord;
         return (T)this;
      }

      public void clearOptionalCord() {
         loadAndClear();
         this.b_optionalCord = false;
         this.f_optionalCord = null;
      }

      // repeated int32 repeated_int32 = 31;
      private java.util.List<java.lang.Integer> f_repeatedInt32;

      public boolean hasRepeatedInt32() {
         return this.f_repeatedInt32!=null && !this.f_repeatedInt32.isEmpty();
      }

      public java.util.List<java.lang.Integer> getRepeatedInt32List() {
         if( this.f_repeatedInt32 == null ) {
            this.f_repeatedInt32 = new java.util.ArrayList<java.lang.Integer>();
         }
         return this.f_repeatedInt32;
      }

      public T setRepeatedInt32List(java.util.List<java.lang.Integer> repeatedInt32) {
         loadAndClear();
         this.f_repeatedInt32 = repeatedInt32;
         return (T)this;
      }

      public int getRepeatedInt32Count() {
         if( this.f_repeatedInt32 == null ) {
            return 0;
         }
         return this.f_repeatedInt32.size();
      }

      public java.lang.Integer getRepeatedInt32(int index) {
         if( this.f_repeatedInt32 == null ) {
            return null;
         }
         return this.f_repeatedInt32.get(index);
      }

      public T setRepeatedInt32(int index, java.lang.Integer value) {
         loadAndClear();
         getRepeatedInt32List().set(index, value);
         return (T)this;
      }

      public T addRepeatedInt32(java.lang.Integer value) {
         loadAndClear();
         getRepeatedInt32List().add(value);
         return (T)this;
      }

      public T addAllRepeatedInt32(java.lang.Iterable<? extends java.lang.Integer> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedInt32List());
         return (T)this;
      }

      public void clearRepeatedInt32() {
         loadAndClear();
         this.f_repeatedInt32 = null;
      }

      // repeated int64 repeated_int64 = 32;
      private java.util.List<java.lang.Long> f_repeatedInt64;

      public boolean hasRepeatedInt64() {
         return this.f_repeatedInt64!=null && !this.f_repeatedInt64.isEmpty();
      }

      public java.util.List<java.lang.Long> getRepeatedInt64List() {
         if( this.f_repeatedInt64 == null ) {
            this.f_repeatedInt64 = new java.util.ArrayList<java.lang.Long>();
         }
         return this.f_repeatedInt64;
      }

      public T setRepeatedInt64List(java.util.List<java.lang.Long> repeatedInt64) {
         loadAndClear();
         this.f_repeatedInt64 = repeatedInt64;
         return (T)this;
      }

      public int getRepeatedInt64Count() {
         if( this.f_repeatedInt64 == null ) {
            return 0;
         }
         return this.f_repeatedInt64.size();
      }

      public java.lang.Long getRepeatedInt64(int index) {
         if( this.f_repeatedInt64 == null ) {
            return null;
         }
         return this.f_repeatedInt64.get(index);
      }

      public T setRepeatedInt64(int index, java.lang.Long value) {
         loadAndClear();
         getRepeatedInt64List().set(index, value);
         return (T)this;
      }

      public T addRepeatedInt64(java.lang.Long value) {
         loadAndClear();
         getRepeatedInt64List().add(value);
         return (T)this;
      }

      public T addAllRepeatedInt64(java.lang.Iterable<? extends java.lang.Long> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedInt64List());
         return (T)this;
      }

      public void clearRepeatedInt64() {
         loadAndClear();
         this.f_repeatedInt64 = null;
      }

      // repeated uint32 repeated_uint32 = 33;
      private java.util.List<java.lang.Integer> f_repeatedUint32;

      public boolean hasRepeatedUint32() {
         return this.f_repeatedUint32!=null && !this.f_repeatedUint32.isEmpty();
      }

      public java.util.List<java.lang.Integer> getRepeatedUint32List() {
         if( this.f_repeatedUint32 == null ) {
            this.f_repeatedUint32 = new java.util.ArrayList<java.lang.Integer>();
         }
         return this.f_repeatedUint32;
      }

      public T setRepeatedUint32List(java.util.List<java.lang.Integer> repeatedUint32) {
         loadAndClear();
         this.f_repeatedUint32 = repeatedUint32;
         return (T)this;
      }

      public int getRepeatedUint32Count() {
         if( this.f_repeatedUint32 == null ) {
            return 0;
         }
         return this.f_repeatedUint32.size();
      }

      public java.lang.Integer getRepeatedUint32(int index) {
         if( this.f_repeatedUint32 == null ) {
            return null;
         }
         return this.f_repeatedUint32.get(index);
      }

      public T setRepeatedUint32(int index, java.lang.Integer value) {
         loadAndClear();
         getRepeatedUint32List().set(index, value);
         return (T)this;
      }

      public T addRepeatedUint32(java.lang.Integer value) {
         loadAndClear();
         getRepeatedUint32List().add(value);
         return (T)this;
      }

      public T addAllRepeatedUint32(java.lang.Iterable<? extends java.lang.Integer> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedUint32List());
         return (T)this;
      }

      public void clearRepeatedUint32() {
         loadAndClear();
         this.f_repeatedUint32 = null;
      }

      // repeated uint64 repeated_uint64 = 34;
      private java.util.List<java.lang.Long> f_repeatedUint64;

      public boolean hasRepeatedUint64() {
         return this.f_repeatedUint64!=null && !this.f_repeatedUint64.isEmpty();
      }

      public java.util.List<java.lang.Long> getRepeatedUint64List() {
         if( this.f_repeatedUint64 == null ) {
            this.f_repeatedUint64 = new java.util.ArrayList<java.lang.Long>();
         }
         return this.f_repeatedUint64;
      }

      public T setRepeatedUint64List(java.util.List<java.lang.Long> repeatedUint64) {
         loadAndClear();
         this.f_repeatedUint64 = repeatedUint64;
         return (T)this;
      }

      public int getRepeatedUint64Count() {
         if( this.f_repeatedUint64 == null ) {
            return 0;
         }
         return this.f_repeatedUint64.size();
      }

      public java.lang.Long getRepeatedUint64(int index) {
         if( this.f_repeatedUint64 == null ) {
            return null;
         }
         return this.f_repeatedUint64.get(index);
      }

      public T setRepeatedUint64(int index, java.lang.Long value) {
         loadAndClear();
         getRepeatedUint64List().set(index, value);
         return (T)this;
      }

      public T addRepeatedUint64(java.lang.Long value) {
         loadAndClear();
         getRepeatedUint64List().add(value);
         return (T)this;
      }

      public T addAllRepeatedUint64(java.lang.Iterable<? extends java.lang.Long> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedUint64List());
         return (T)this;
      }

      public void clearRepeatedUint64() {
         loadAndClear();
         this.f_repeatedUint64 = null;
      }

      // repeated sint32 repeated_sint32 = 35;
      private java.util.List<java.lang.Integer> f_repeatedSint32;

      public boolean hasRepeatedSint32() {
         return this.f_repeatedSint32!=null && !this.f_repeatedSint32.isEmpty();
      }

      public java.util.List<java.lang.Integer> getRepeatedSint32List() {
         if( this.f_repeatedSint32 == null ) {
            this.f_repeatedSint32 = new java.util.ArrayList<java.lang.Integer>();
         }
         return this.f_repeatedSint32;
      }

      public T setRepeatedSint32List(java.util.List<java.lang.Integer> repeatedSint32) {
         loadAndClear();
         this.f_repeatedSint32 = repeatedSint32;
         return (T)this;
      }

      public int getRepeatedSint32Count() {
         if( this.f_repeatedSint32 == null ) {
            return 0;
         }
         return this.f_repeatedSint32.size();
      }

      public java.lang.Integer getRepeatedSint32(int index) {
         if( this.f_repeatedSint32 == null ) {
            return null;
         }
         return this.f_repeatedSint32.get(index);
      }

      public T setRepeatedSint32(int index, java.lang.Integer value) {
         loadAndClear();
         getRepeatedSint32List().set(index, value);
         return (T)this;
      }

      public T addRepeatedSint32(java.lang.Integer value) {
         loadAndClear();
         getRepeatedSint32List().add(value);
         return (T)this;
      }

      public T addAllRepeatedSint32(java.lang.Iterable<? extends java.lang.Integer> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedSint32List());
         return (T)this;
      }

      public void clearRepeatedSint32() {
         loadAndClear();
         this.f_repeatedSint32 = null;
      }

      // repeated sint64 repeated_sint64 = 36;
      private java.util.List<java.lang.Long> f_repeatedSint64;

      public boolean hasRepeatedSint64() {
         return this.f_repeatedSint64!=null && !this.f_repeatedSint64.isEmpty();
      }

      public java.util.List<java.lang.Long> getRepeatedSint64List() {
         if( this.f_repeatedSint64 == null ) {
            this.f_repeatedSint64 = new java.util.ArrayList<java.lang.Long>();
         }
         return this.f_repeatedSint64;
      }

      public T setRepeatedSint64List(java.util.List<java.lang.Long> repeatedSint64) {
         loadAndClear();
         this.f_repeatedSint64 = repeatedSint64;
         return (T)this;
      }

      public int getRepeatedSint64Count() {
         if( this.f_repeatedSint64 == null ) {
            return 0;
         }
         return this.f_repeatedSint64.size();
      }

      public java.lang.Long getRepeatedSint64(int index) {
         if( this.f_repeatedSint64 == null ) {
            return null;
         }
         return this.f_repeatedSint64.get(index);
      }

      public T setRepeatedSint64(int index, java.lang.Long value) {
         loadAndClear();
         getRepeatedSint64List().set(index, value);
         return (T)this;
      }

      public T addRepeatedSint64(java.lang.Long value) {
         loadAndClear();
         getRepeatedSint64List().add(value);
         return (T)this;
      }

      public T addAllRepeatedSint64(java.lang.Iterable<? extends java.lang.Long> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedSint64List());
         return (T)this;
      }

      public void clearRepeatedSint64() {
         loadAndClear();
         this.f_repeatedSint64 = null;
      }

      // repeated fixed32 repeated_fixed32 = 37;
      private java.util.List<java.lang.Integer> f_repeatedFixed32;

      public boolean hasRepeatedFixed32() {
         return this.f_repeatedFixed32!=null && !this.f_repeatedFixed32.isEmpty();
      }

      public java.util.List<java.lang.Integer> getRepeatedFixed32List() {
         if( this.f_repeatedFixed32 == null ) {
            this.f_repeatedFixed32 = new java.util.ArrayList<java.lang.Integer>();
         }
         return this.f_repeatedFixed32;
      }

      public T setRepeatedFixed32List(java.util.List<java.lang.Integer> repeatedFixed32) {
         loadAndClear();
         this.f_repeatedFixed32 = repeatedFixed32;
         return (T)this;
      }

      public int getRepeatedFixed32Count() {
         if( this.f_repeatedFixed32 == null ) {
            return 0;
         }
         return this.f_repeatedFixed32.size();
      }

      public java.lang.Integer getRepeatedFixed32(int index) {
         if( this.f_repeatedFixed32 == null ) {
            return null;
         }
         return this.f_repeatedFixed32.get(index);
      }

      public T setRepeatedFixed32(int index, java.lang.Integer value) {
         loadAndClear();
         getRepeatedFixed32List().set(index, value);
         return (T)this;
      }

      public T addRepeatedFixed32(java.lang.Integer value) {
         loadAndClear();
         getRepeatedFixed32List().add(value);
         return (T)this;
      }

      public T addAllRepeatedFixed32(java.lang.Iterable<? extends java.lang.Integer> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedFixed32List());
         return (T)this;
      }

      public void clearRepeatedFixed32() {
         loadAndClear();
         this.f_repeatedFixed32 = null;
      }

      // repeated fixed64 repeated_fixed64 = 38;
      private java.util.List<java.lang.Long> f_repeatedFixed64;

      public boolean hasRepeatedFixed64() {
         return this.f_repeatedFixed64!=null && !this.f_repeatedFixed64.isEmpty();
      }

      public java.util.List<java.lang.Long> getRepeatedFixed64List() {
         if( this.f_repeatedFixed64 == null ) {
            this.f_repeatedFixed64 = new java.util.ArrayList<java.lang.Long>();
         }
         return this.f_repeatedFixed64;
      }

      public T setRepeatedFixed64List(java.util.List<java.lang.Long> repeatedFixed64) {
         loadAndClear();
         this.f_repeatedFixed64 = repeatedFixed64;
         return (T)this;
      }

      public int getRepeatedFixed64Count() {
         if( this.f_repeatedFixed64 == null ) {
            return 0;
         }
         return this.f_repeatedFixed64.size();
      }

      public java.lang.Long getRepeatedFixed64(int index) {
         if( this.f_repeatedFixed64 == null ) {
            return null;
         }
         return this.f_repeatedFixed64.get(index);
      }

      public T setRepeatedFixed64(int index, java.lang.Long value) {
         loadAndClear();
         getRepeatedFixed64List().set(index, value);
         return (T)this;
      }

      public T addRepeatedFixed64(java.lang.Long value) {
         loadAndClear();
         getRepeatedFixed64List().add(value);
         return (T)this;
      }

      public T addAllRepeatedFixed64(java.lang.Iterable<? extends java.lang.Long> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedFixed64List());
         return (T)this;
      }

      public void clearRepeatedFixed64() {
         loadAndClear();
         this.f_repeatedFixed64 = null;
      }

      // repeated sfixed32 repeated_sfixed32 = 39;
      private java.util.List<java.lang.Integer> f_repeatedSfixed32;

      public boolean hasRepeatedSfixed32() {
         return this.f_repeatedSfixed32!=null && !this.f_repeatedSfixed32.isEmpty();
      }

      public java.util.List<java.lang.Integer> getRepeatedSfixed32List() {
         if( this.f_repeatedSfixed32 == null ) {
            this.f_repeatedSfixed32 = new java.util.ArrayList<java.lang.Integer>();
         }
         return this.f_repeatedSfixed32;
      }

      public T setRepeatedSfixed32List(java.util.List<java.lang.Integer> repeatedSfixed32) {
         loadAndClear();
         this.f_repeatedSfixed32 = repeatedSfixed32;
         return (T)this;
      }

      public int getRepeatedSfixed32Count() {
         if( this.f_repeatedSfixed32 == null ) {
            return 0;
         }
         return this.f_repeatedSfixed32.size();
      }

      public java.lang.Integer getRepeatedSfixed32(int index) {
         if( this.f_repeatedSfixed32 == null ) {
            return null;
         }
         return this.f_repeatedSfixed32.get(index);
      }

      public T setRepeatedSfixed32(int index, java.lang.Integer value) {
         loadAndClear();
         getRepeatedSfixed32List().set(index, value);
         return (T)this;
      }

      public T addRepeatedSfixed32(java.lang.Integer value) {
         loadAndClear();
         getRepeatedSfixed32List().add(value);
         return (T)this;
      }

      public T addAllRepeatedSfixed32(java.lang.Iterable<? extends java.lang.Integer> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedSfixed32List());
         return (T)this;
      }

      public void clearRepeatedSfixed32() {
         loadAndClear();
         this.f_repeatedSfixed32 = null;
      }

      // repeated sfixed64 repeated_sfixed64 = 40;
      private java.util.List<java.lang.Long> f_repeatedSfixed64;

      public boolean hasRepeatedSfixed64() {
         return this.f_repeatedSfixed64!=null && !this.f_repeatedSfixed64.isEmpty();
      }

      public java.util.List<java.lang.Long> getRepeatedSfixed64List() {
         if( this.f_repeatedSfixed64 == null ) {
            this.f_repeatedSfixed64 = new java.util.ArrayList<java.lang.Long>();
         }
         return this.f_repeatedSfixed64;
      }

      public T setRepeatedSfixed64List(java.util.List<java.lang.Long> repeatedSfixed64) {
         loadAndClear();
         this.f_repeatedSfixed64 = repeatedSfixed64;
         return (T)this;
      }

      public int getRepeatedSfixed64Count() {
         if( this.f_repeatedSfixed64 == null ) {
            return 0;
         }
         return this.f_repeatedSfixed64.size();
      }

      public java.lang.Long getRepeatedSfixed64(int index) {
         if( this.f_repeatedSfixed64 == null ) {
            return null;
         }
         return this.f_repeatedSfixed64.get(index);
      }

      public T setRepeatedSfixed64(int index, java.lang.Long value) {
         loadAndClear();
         getRepeatedSfixed64List().set(index, value);
         return (T)this;
      }

      public T addRepeatedSfixed64(java.lang.Long value) {
         loadAndClear();
         getRepeatedSfixed64List().add(value);
         return (T)this;
      }

      public T addAllRepeatedSfixed64(java.lang.Iterable<? extends java.lang.Long> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedSfixed64List());
         return (T)this;
      }

      public void clearRepeatedSfixed64() {
         loadAndClear();
         this.f_repeatedSfixed64 = null;
      }

      // repeated float repeated_float = 41;
      private java.util.List<java.lang.Float> f_repeatedFloat;

      public boolean hasRepeatedFloat() {
         return this.f_repeatedFloat!=null && !this.f_repeatedFloat.isEmpty();
      }

      public java.util.List<java.lang.Float> getRepeatedFloatList() {
         if( this.f_repeatedFloat == null ) {
            this.f_repeatedFloat = new java.util.ArrayList<java.lang.Float>();
         }
         return this.f_repeatedFloat;
      }

      public T setRepeatedFloatList(java.util.List<java.lang.Float> repeatedFloat) {
         loadAndClear();
         this.f_repeatedFloat = repeatedFloat;
         return (T)this;
      }

      public int getRepeatedFloatCount() {
         if( this.f_repeatedFloat == null ) {
            return 0;
         }
         return this.f_repeatedFloat.size();
      }

      public java.lang.Float getRepeatedFloat(int index) {
         if( this.f_repeatedFloat == null ) {
            return null;
         }
         return this.f_repeatedFloat.get(index);
      }

      public T setRepeatedFloat(int index, java.lang.Float value) {
         loadAndClear();
         getRepeatedFloatList().set(index, value);
         return (T)this;
      }

      public T addRepeatedFloat(java.lang.Float value) {
         loadAndClear();
         getRepeatedFloatList().add(value);
         return (T)this;
      }

      public T addAllRepeatedFloat(java.lang.Iterable<? extends java.lang.Float> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedFloatList());
         return (T)this;
      }

      public void clearRepeatedFloat() {
         loadAndClear();
         this.f_repeatedFloat = null;
      }

      // repeated double repeated_double = 42;
      private java.util.List<java.lang.Double> f_repeatedDouble;

      public boolean hasRepeatedDouble() {
         return this.f_repeatedDouble!=null && !this.f_repeatedDouble.isEmpty();
      }

      public java.util.List<java.lang.Double> getRepeatedDoubleList() {
         if( this.f_repeatedDouble == null ) {
            this.f_repeatedDouble = new java.util.ArrayList<java.lang.Double>();
         }
         return this.f_repeatedDouble;
      }

      public T setRepeatedDoubleList(java.util.List<java.lang.Double> repeatedDouble) {
         loadAndClear();
         this.f_repeatedDouble = repeatedDouble;
         return (T)this;
      }

      public int getRepeatedDoubleCount() {
         if( this.f_repeatedDouble == null ) {
            return 0;
         }
         return this.f_repeatedDouble.size();
      }

      public java.lang.Double getRepeatedDouble(int index) {
         if( this.f_repeatedDouble == null ) {
            return null;
         }
         return this.f_repeatedDouble.get(index);
      }

      public T setRepeatedDouble(int index, java.lang.Double value) {
         loadAndClear();
         getRepeatedDoubleList().set(index, value);
         return (T)this;
      }

      public T addRepeatedDouble(java.lang.Double value) {
         loadAndClear();
         getRepeatedDoubleList().add(value);
         return (T)this;
      }

      public T addAllRepeatedDouble(java.lang.Iterable<? extends java.lang.Double> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedDoubleList());
         return (T)this;
      }

      public void clearRepeatedDouble() {
         loadAndClear();
         this.f_repeatedDouble = null;
      }

      // repeated bool repeated_bool = 43;
      private java.util.List<java.lang.Boolean> f_repeatedBool;

      public boolean hasRepeatedBool() {
         return this.f_repeatedBool!=null && !this.f_repeatedBool.isEmpty();
      }

      public java.util.List<java.lang.Boolean> getRepeatedBoolList() {
         if( this.f_repeatedBool == null ) {
            this.f_repeatedBool = new java.util.ArrayList<java.lang.Boolean>();
         }
         return this.f_repeatedBool;
      }

      public T setRepeatedBoolList(java.util.List<java.lang.Boolean> repeatedBool) {
         loadAndClear();
         this.f_repeatedBool = repeatedBool;
         return (T)this;
      }

      public int getRepeatedBoolCount() {
         if( this.f_repeatedBool == null ) {
            return 0;
         }
         return this.f_repeatedBool.size();
      }

      public java.lang.Boolean getRepeatedBool(int index) {
         if( this.f_repeatedBool == null ) {
            return null;
         }
         return this.f_repeatedBool.get(index);
      }

      public T setRepeatedBool(int index, java.lang.Boolean value) {
         loadAndClear();
         getRepeatedBoolList().set(index, value);
         return (T)this;
      }

      public T addRepeatedBool(java.lang.Boolean value) {
         loadAndClear();
         getRepeatedBoolList().add(value);
         return (T)this;
      }

      public T addAllRepeatedBool(java.lang.Iterable<? extends java.lang.Boolean> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedBoolList());
         return (T)this;
      }

      public void clearRepeatedBool() {
         loadAndClear();
         this.f_repeatedBool = null;
      }

      // repeated string repeated_string = 44;
      private java.util.List<java.lang.String> f_repeatedString;

      public boolean hasRepeatedString() {
         return this.f_repeatedString!=null && !this.f_repeatedString.isEmpty();
      }

      public java.util.List<java.lang.String> getRepeatedStringList() {
         if( this.f_repeatedString == null ) {
            this.f_repeatedString = new java.util.ArrayList<java.lang.String>();
         }
         return this.f_repeatedString;
      }

      public T setRepeatedStringList(java.util.List<java.lang.String> repeatedString) {
         loadAndClear();
         this.f_repeatedString = repeatedString;
         return (T)this;
      }

      public int getRepeatedStringCount() {
         if( this.f_repeatedString == null ) {
            return 0;
         }
         return this.f_repeatedString.size();
      }

      public java.lang.String getRepeatedString(int index) {
         if( this.f_repeatedString == null ) {
            return null;
         }
         return this.f_repeatedString.get(index);
      }

      public T setRepeatedString(int index, java.lang.String value) {
         loadAndClear();
         getRepeatedStringList().set(index, value);
         return (T)this;
      }

      public T addRepeatedString(java.lang.String value) {
         loadAndClear();
         getRepeatedStringList().add(value);
         return (T)this;
      }

      public T addAllRepeatedString(java.lang.Iterable<? extends java.lang.String> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedStringList());
         return (T)this;
      }

      public void clearRepeatedString() {
         loadAndClear();
         this.f_repeatedString = null;
      }

      // repeated bytes repeated_bytes = 45;
      private java.util.List<org.fusesource.hawtbuf.Buffer> f_repeatedBytes;

      public boolean hasRepeatedBytes() {
         return this.f_repeatedBytes!=null && !this.f_repeatedBytes.isEmpty();
      }

      public java.util.List<org.fusesource.hawtbuf.Buffer> getRepeatedBytesList() {
         if( this.f_repeatedBytes == null ) {
            this.f_repeatedBytes = new java.util.ArrayList<org.fusesource.hawtbuf.Buffer>();
         }
         return this.f_repeatedBytes;
      }

      public T setRepeatedBytesList(java.util.List<org.fusesource.hawtbuf.Buffer> repeatedBytes) {
         loadAndClear();
         this.f_repeatedBytes = repeatedBytes;
         return (T)this;
      }

      public int getRepeatedBytesCount() {
         if( this.f_repeatedBytes == null ) {
            return 0;
         }
         return this.f_repeatedBytes.size();
      }

      public org.fusesource.hawtbuf.Buffer getRepeatedBytes(int index) {
         if( this.f_repeatedBytes == null ) {
            return null;
         }
         return this.f_repeatedBytes.get(index);
      }

      public T setRepeatedBytes(int index, org.fusesource.hawtbuf.Buffer value) {
         loadAndClear();
         getRepeatedBytesList().set(index, value);
         return (T)this;
      }

      public T addRepeatedBytes(org.fusesource.hawtbuf.Buffer value) {
         loadAndClear();
         getRepeatedBytesList().add(value);
         return (T)this;
      }

      public T addAllRepeatedBytes(java.lang.Iterable<? extends org.fusesource.hawtbuf.Buffer> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedBytesList());
         return (T)this;
      }

      public void clearRepeatedBytes() {
         loadAndClear();
         this.f_repeatedBytes = null;
      }

      // repeated RepeatedGroup RepeatedGroup = 46;
      private java.util.List<TestAllTypes.RepeatedGroup> f_repeatedGroup;

      public boolean hasRepeatedGroup() {
         return this.f_repeatedGroup!=null && !this.f_repeatedGroup.isEmpty();
      }

      public java.util.List<TestAllTypes.RepeatedGroup> getRepeatedGroupList() {
         if( this.f_repeatedGroup == null ) {
            this.f_repeatedGroup = new java.util.ArrayList<TestAllTypes.RepeatedGroup>();
         }
         return this.f_repeatedGroup;
      }

      public T setRepeatedGroupList(java.util.List<TestAllTypes.RepeatedGroup> repeatedGroup) {
         loadAndClear();
         this.f_repeatedGroup = repeatedGroup;
         return (T)this;
      }

      public int getRepeatedGroupCount() {
         if( this.f_repeatedGroup == null ) {
            return 0;
         }
         return this.f_repeatedGroup.size();
      }

      public TestAllTypes.RepeatedGroup getRepeatedGroup(int index) {
         if( this.f_repeatedGroup == null ) {
            return null;
         }
         return this.f_repeatedGroup.get(index);
      }

      public T setRepeatedGroup(int index, TestAllTypes.RepeatedGroup value) {
         loadAndClear();
         getRepeatedGroupList().set(index, value);
         return (T)this;
      }

      public T addRepeatedGroup(TestAllTypes.RepeatedGroup value) {
         loadAndClear();
         getRepeatedGroupList().add(value);
         return (T)this;
      }

      public T addAllRepeatedGroup(java.lang.Iterable<? extends TestAllTypes.RepeatedGroup> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedGroupList());
         return (T)this;
      }

      public void clearRepeatedGroup() {
         loadAndClear();
         this.f_repeatedGroup = null;
      }

      // repeated NestedMessage repeated_nested_message = 48;
      private java.util.List<TestAllTypes.NestedMessage> f_repeatedNestedMessage;

      public boolean hasRepeatedNestedMessage() {
         return this.f_repeatedNestedMessage!=null && !this.f_repeatedNestedMessage.isEmpty();
      }

      public java.util.List<TestAllTypes.NestedMessage> getRepeatedNestedMessageList() {
         if( this.f_repeatedNestedMessage == null ) {
            this.f_repeatedNestedMessage = new java.util.ArrayList<TestAllTypes.NestedMessage>();
         }
         return this.f_repeatedNestedMessage;
      }

      public T setRepeatedNestedMessageList(java.util.List<TestAllTypes.NestedMessage> repeatedNestedMessage) {
         loadAndClear();
         this.f_repeatedNestedMessage = repeatedNestedMessage;
         return (T)this;
      }

      public int getRepeatedNestedMessageCount() {
         if( this.f_repeatedNestedMessage == null ) {
            return 0;
         }
         return this.f_repeatedNestedMessage.size();
      }

      public TestAllTypes.NestedMessage getRepeatedNestedMessage(int index) {
         if( this.f_repeatedNestedMessage == null ) {
            return null;
         }
         return this.f_repeatedNestedMessage.get(index);
      }

      public T setRepeatedNestedMessage(int index, TestAllTypes.NestedMessage value) {
         loadAndClear();
         getRepeatedNestedMessageList().set(index, value);
         return (T)this;
      }

      public T addRepeatedNestedMessage(TestAllTypes.NestedMessage value) {
         loadAndClear();
         getRepeatedNestedMessageList().add(value);
         return (T)this;
      }

      public T addAllRepeatedNestedMessage(java.lang.Iterable<? extends TestAllTypes.NestedMessage> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedNestedMessageList());
         return (T)this;
      }

      public void clearRepeatedNestedMessage() {
         loadAndClear();
         this.f_repeatedNestedMessage = null;
      }

      // repeated ForeignMessage repeated_foreign_message = 49;
      private java.util.List<ForeignMessage> f_repeatedForeignMessage;

      public boolean hasRepeatedForeignMessage() {
         return this.f_repeatedForeignMessage!=null && !this.f_repeatedForeignMessage.isEmpty();
      }

      public java.util.List<ForeignMessage> getRepeatedForeignMessageList() {
         if( this.f_repeatedForeignMessage == null ) {
            this.f_repeatedForeignMessage = new java.util.ArrayList<ForeignMessage>();
         }
         return this.f_repeatedForeignMessage;
      }

      public T setRepeatedForeignMessageList(java.util.List<ForeignMessage> repeatedForeignMessage) {
         loadAndClear();
         this.f_repeatedForeignMessage = repeatedForeignMessage;
         return (T)this;
      }

      public int getRepeatedForeignMessageCount() {
         if( this.f_repeatedForeignMessage == null ) {
            return 0;
         }
         return this.f_repeatedForeignMessage.size();
      }

      public ForeignMessage getRepeatedForeignMessage(int index) {
         if( this.f_repeatedForeignMessage == null ) {
            return null;
         }
         return this.f_repeatedForeignMessage.get(index);
      }

      public T setRepeatedForeignMessage(int index, ForeignMessage value) {
         loadAndClear();
         getRepeatedForeignMessageList().set(index, value);
         return (T)this;
      }

      public T addRepeatedForeignMessage(ForeignMessage value) {
         loadAndClear();
         getRepeatedForeignMessageList().add(value);
         return (T)this;
      }

      public T addAllRepeatedForeignMessage(java.lang.Iterable<? extends ForeignMessage> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedForeignMessageList());
         return (T)this;
      }

      public void clearRepeatedForeignMessage() {
         loadAndClear();
         this.f_repeatedForeignMessage = null;
      }

      // repeated protobuf_unittest_import.ImportMessage repeated_import_message = 50;
      private java.util.List<UnittestImport.ImportMessage> f_repeatedImportMessage;

      public boolean hasRepeatedImportMessage() {
         return this.f_repeatedImportMessage!=null && !this.f_repeatedImportMessage.isEmpty();
      }

      public java.util.List<UnittestImport.ImportMessage> getRepeatedImportMessageList() {
         if( this.f_repeatedImportMessage == null ) {
            this.f_repeatedImportMessage = new java.util.ArrayList<UnittestImport.ImportMessage>();
         }
         return this.f_repeatedImportMessage;
      }

      public T setRepeatedImportMessageList(java.util.List<UnittestImport.ImportMessage> repeatedImportMessage) {
         loadAndClear();
         this.f_repeatedImportMessage = repeatedImportMessage;
         return (T)this;
      }

      public int getRepeatedImportMessageCount() {
         if( this.f_repeatedImportMessage == null ) {
            return 0;
         }
         return this.f_repeatedImportMessage.size();
      }

      public UnittestImport.ImportMessage getRepeatedImportMessage(int index) {
         if( this.f_repeatedImportMessage == null ) {
            return null;
         }
         return this.f_repeatedImportMessage.get(index);
      }

      public T setRepeatedImportMessage(int index, UnittestImport.ImportMessage value) {
         loadAndClear();
         getRepeatedImportMessageList().set(index, value);
         return (T)this;
      }

      public T addRepeatedImportMessage(UnittestImport.ImportMessage value) {
         loadAndClear();
         getRepeatedImportMessageList().add(value);
         return (T)this;
      }

      public T addAllRepeatedImportMessage(java.lang.Iterable<? extends UnittestImport.ImportMessage> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedImportMessageList());
         return (T)this;
      }

      public void clearRepeatedImportMessage() {
         loadAndClear();
         this.f_repeatedImportMessage = null;
      }

      // repeated NestedEnum repeated_nested_enum = 51;
      private java.util.List<TestAllTypes.NestedEnum> f_repeatedNestedEnum;

      public boolean hasRepeatedNestedEnum() {
         return this.f_repeatedNestedEnum!=null && !this.f_repeatedNestedEnum.isEmpty();
      }

      public java.util.List<TestAllTypes.NestedEnum> getRepeatedNestedEnumList() {
         if( this.f_repeatedNestedEnum == null ) {
            this.f_repeatedNestedEnum = new java.util.ArrayList<TestAllTypes.NestedEnum>();
         }
         return this.f_repeatedNestedEnum;
      }

      public T setRepeatedNestedEnumList(java.util.List<TestAllTypes.NestedEnum> repeatedNestedEnum) {
         loadAndClear();
         this.f_repeatedNestedEnum = repeatedNestedEnum;
         return (T)this;
      }

      public int getRepeatedNestedEnumCount() {
         if( this.f_repeatedNestedEnum == null ) {
            return 0;
         }
         return this.f_repeatedNestedEnum.size();
      }

      public TestAllTypes.NestedEnum getRepeatedNestedEnum(int index) {
         if( this.f_repeatedNestedEnum == null ) {
            return null;
         }
         return this.f_repeatedNestedEnum.get(index);
      }

      public T setRepeatedNestedEnum(int index, TestAllTypes.NestedEnum value) {
         loadAndClear();
         getRepeatedNestedEnumList().set(index, value);
         return (T)this;
      }

      public T addRepeatedNestedEnum(TestAllTypes.NestedEnum value) {
         loadAndClear();
         getRepeatedNestedEnumList().add(value);
         return (T)this;
      }

      public T addAllRepeatedNestedEnum(java.lang.Iterable<? extends TestAllTypes.NestedEnum> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedNestedEnumList());
         return (T)this;
      }

      public void clearRepeatedNestedEnum() {
         loadAndClear();
         this.f_repeatedNestedEnum = null;
      }

      // repeated ForeignEnum repeated_foreign_enum = 52;
      private java.util.List<ForeignEnum> f_repeatedForeignEnum;

      public boolean hasRepeatedForeignEnum() {
         return this.f_repeatedForeignEnum!=null && !this.f_repeatedForeignEnum.isEmpty();
      }

      public java.util.List<ForeignEnum> getRepeatedForeignEnumList() {
         if( this.f_repeatedForeignEnum == null ) {
            this.f_repeatedForeignEnum = new java.util.ArrayList<ForeignEnum>();
         }
         return this.f_repeatedForeignEnum;
      }

      public T setRepeatedForeignEnumList(java.util.List<ForeignEnum> repeatedForeignEnum) {
         loadAndClear();
         this.f_repeatedForeignEnum = repeatedForeignEnum;
         return (T)this;
      }

      public int getRepeatedForeignEnumCount() {
         if( this.f_repeatedForeignEnum == null ) {
            return 0;
         }
         return this.f_repeatedForeignEnum.size();
      }

      public ForeignEnum getRepeatedForeignEnum(int index) {
         if( this.f_repeatedForeignEnum == null ) {
            return null;
         }
         return this.f_repeatedForeignEnum.get(index);
      }

      public T setRepeatedForeignEnum(int index, ForeignEnum value) {
         loadAndClear();
         getRepeatedForeignEnumList().set(index, value);
         return (T)this;
      }

      public T addRepeatedForeignEnum(ForeignEnum value) {
         loadAndClear();
         getRepeatedForeignEnumList().add(value);
         return (T)this;
      }

      public T addAllRepeatedForeignEnum(java.lang.Iterable<? extends ForeignEnum> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedForeignEnumList());
         return (T)this;
      }

      public void clearRepeatedForeignEnum() {
         loadAndClear();
         this.f_repeatedForeignEnum = null;
      }

      // repeated protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
      private java.util.List<UnittestImport.ImportEnum> f_repeatedImportEnum;

      public boolean hasRepeatedImportEnum() {
         return this.f_repeatedImportEnum!=null && !this.f_repeatedImportEnum.isEmpty();
      }

      public java.util.List<UnittestImport.ImportEnum> getRepeatedImportEnumList() {
         if( this.f_repeatedImportEnum == null ) {
            this.f_repeatedImportEnum = new java.util.ArrayList<UnittestImport.ImportEnum>();
         }
         return this.f_repeatedImportEnum;
      }

      public T setRepeatedImportEnumList(java.util.List<UnittestImport.ImportEnum> repeatedImportEnum) {
         loadAndClear();
         this.f_repeatedImportEnum = repeatedImportEnum;
         return (T)this;
      }

      public int getRepeatedImportEnumCount() {
         if( this.f_repeatedImportEnum == null ) {
            return 0;
         }
         return this.f_repeatedImportEnum.size();
      }

      public UnittestImport.ImportEnum getRepeatedImportEnum(int index) {
         if( this.f_repeatedImportEnum == null ) {
            return null;
         }
         return this.f_repeatedImportEnum.get(index);
      }

      public T setRepeatedImportEnum(int index, UnittestImport.ImportEnum value) {
         loadAndClear();
         getRepeatedImportEnumList().set(index, value);
         return (T)this;
      }

      public T addRepeatedImportEnum(UnittestImport.ImportEnum value) {
         loadAndClear();
         getRepeatedImportEnumList().add(value);
         return (T)this;
      }

      public T addAllRepeatedImportEnum(java.lang.Iterable<? extends UnittestImport.ImportEnum> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedImportEnumList());
         return (T)this;
      }

      public void clearRepeatedImportEnum() {
         loadAndClear();
         this.f_repeatedImportEnum = null;
      }

      // repeated string repeated_string_piece = 54;
      private java.util.List<java.lang.String> f_repeatedStringPiece;

      public boolean hasRepeatedStringPiece() {
         return this.f_repeatedStringPiece!=null && !this.f_repeatedStringPiece.isEmpty();
      }

      public java.util.List<java.lang.String> getRepeatedStringPieceList() {
         if( this.f_repeatedStringPiece == null ) {
            this.f_repeatedStringPiece = new java.util.ArrayList<java.lang.String>();
         }
         return this.f_repeatedStringPiece;
      }

      public T setRepeatedStringPieceList(java.util.List<java.lang.String> repeatedStringPiece) {
         loadAndClear();
         this.f_repeatedStringPiece = repeatedStringPiece;
         return (T)this;
      }

      public int getRepeatedStringPieceCount() {
         if( this.f_repeatedStringPiece == null ) {
            return 0;
         }
         return this.f_repeatedStringPiece.size();
      }

      public java.lang.String getRepeatedStringPiece(int index) {
         if( this.f_repeatedStringPiece == null ) {
            return null;
         }
         return this.f_repeatedStringPiece.get(index);
      }

      public T setRepeatedStringPiece(int index, java.lang.String value) {
         loadAndClear();
         getRepeatedStringPieceList().set(index, value);
         return (T)this;
      }

      public T addRepeatedStringPiece(java.lang.String value) {
         loadAndClear();
         getRepeatedStringPieceList().add(value);
         return (T)this;
      }

      public T addAllRepeatedStringPiece(java.lang.Iterable<? extends java.lang.String> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedStringPieceList());
         return (T)this;
      }

      public void clearRepeatedStringPiece() {
         loadAndClear();
         this.f_repeatedStringPiece = null;
      }

      // repeated string repeated_cord = 55;
      private java.util.List<java.lang.String> f_repeatedCord;

      public boolean hasRepeatedCord() {
         return this.f_repeatedCord!=null && !this.f_repeatedCord.isEmpty();
      }

      public java.util.List<java.lang.String> getRepeatedCordList() {
         if( this.f_repeatedCord == null ) {
            this.f_repeatedCord = new java.util.ArrayList<java.lang.String>();
         }
         return this.f_repeatedCord;
      }

      public T setRepeatedCordList(java.util.List<java.lang.String> repeatedCord) {
         loadAndClear();
         this.f_repeatedCord = repeatedCord;
         return (T)this;
      }

      public int getRepeatedCordCount() {
         if( this.f_repeatedCord == null ) {
            return 0;
         }
         return this.f_repeatedCord.size();
      }

      public java.lang.String getRepeatedCord(int index) {
         if( this.f_repeatedCord == null ) {
            return null;
         }
         return this.f_repeatedCord.get(index);
      }

      public T setRepeatedCord(int index, java.lang.String value) {
         loadAndClear();
         getRepeatedCordList().set(index, value);
         return (T)this;
      }

      public T addRepeatedCord(java.lang.String value) {
         loadAndClear();
         getRepeatedCordList().add(value);
         return (T)this;
      }

      public T addAllRepeatedCord(java.lang.Iterable<? extends java.lang.String> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedCordList());
         return (T)this;
      }

      public void clearRepeatedCord() {
         loadAndClear();
         this.f_repeatedCord = null;
      }

      // optional int32 default_int32 = 61;
      private int f_defaultInt32 = 41;
      private boolean b_defaultInt32;

      public boolean hasDefaultInt32() {
         return this.b_defaultInt32;
      }

      public int getDefaultInt32() {
         return this.f_defaultInt32;
      }

      public T setDefaultInt32(int defaultInt32) {
         loadAndClear();
         this.b_defaultInt32 = true;
         this.f_defaultInt32 = defaultInt32;
         return (T)this;
      }

      public void clearDefaultInt32() {
         loadAndClear();
         this.b_defaultInt32 = false;
         this.f_defaultInt32 = 41;
      }

      // optional int64 default_int64 = 62;
      private long f_defaultInt64 = 42l;
      private boolean b_defaultInt64;

      public boolean hasDefaultInt64() {
         return this.b_defaultInt64;
      }

      public long getDefaultInt64() {
         return this.f_defaultInt64;
      }

      public T setDefaultInt64(long defaultInt64) {
         loadAndClear();
         this.b_defaultInt64 = true;
         this.f_defaultInt64 = defaultInt64;
         return (T)this;
      }

      public void clearDefaultInt64() {
         loadAndClear();
         this.b_defaultInt64 = false;
         this.f_defaultInt64 = 42l;
      }

      // optional uint32 default_uint32 = 63;
      private int f_defaultUint32 = 43;
      private boolean b_defaultUint32;

      public boolean hasDefaultUint32() {
         return this.b_defaultUint32;
      }

      public int getDefaultUint32() {
         return this.f_defaultUint32;
      }

      public T setDefaultUint32(int defaultUint32) {
         loadAndClear();
         this.b_defaultUint32 = true;
         this.f_defaultUint32 = defaultUint32;
         return (T)this;
      }

      public void clearDefaultUint32() {
         loadAndClear();
         this.b_defaultUint32 = false;
         this.f_defaultUint32 = 43;
      }

      // optional uint64 default_uint64 = 64;
      private long f_defaultUint64 = 44l;
      private boolean b_defaultUint64;

      public boolean hasDefaultUint64() {
         return this.b_defaultUint64;
      }

      public long getDefaultUint64() {
         return this.f_defaultUint64;
      }

      public T setDefaultUint64(long defaultUint64) {
         loadAndClear();
         this.b_defaultUint64 = true;
         this.f_defaultUint64 = defaultUint64;
         return (T)this;
      }

      public void clearDefaultUint64() {
         loadAndClear();
         this.b_defaultUint64 = false;
         this.f_defaultUint64 = 44l;
      }

      // optional sint32 default_sint32 = 65;
      private int f_defaultSint32 = -45;
      private boolean b_defaultSint32;

      public boolean hasDefaultSint32() {
         return this.b_defaultSint32;
      }

      public int getDefaultSint32() {
         return this.f_defaultSint32;
      }

      public T setDefaultSint32(int defaultSint32) {
         loadAndClear();
         this.b_defaultSint32 = true;
         this.f_defaultSint32 = defaultSint32;
         return (T)this;
      }

      public void clearDefaultSint32() {
         loadAndClear();
         this.b_defaultSint32 = false;
         this.f_defaultSint32 = -45;
      }

      // optional sint64 default_sint64 = 66;
      private long f_defaultSint64 = 46l;
      private boolean b_defaultSint64;

      public boolean hasDefaultSint64() {
         return this.b_defaultSint64;
      }

      public long getDefaultSint64() {
         return this.f_defaultSint64;
      }

      public T setDefaultSint64(long defaultSint64) {
         loadAndClear();
         this.b_defaultSint64 = true;
         this.f_defaultSint64 = defaultSint64;
         return (T)this;
      }

      public void clearDefaultSint64() {
         loadAndClear();
         this.b_defaultSint64 = false;
         this.f_defaultSint64 = 46l;
      }

      // optional fixed32 default_fixed32 = 67;
      private int f_defaultFixed32 = 47;
      private boolean b_defaultFixed32;

      public boolean hasDefaultFixed32() {
         return this.b_defaultFixed32;
      }

      public int getDefaultFixed32() {
         return this.f_defaultFixed32;
      }

      public T setDefaultFixed32(int defaultFixed32) {
         loadAndClear();
         this.b_defaultFixed32 = true;
         this.f_defaultFixed32 = defaultFixed32;
         return (T)this;
      }

      public void clearDefaultFixed32() {
         loadAndClear();
         this.b_defaultFixed32 = false;
         this.f_defaultFixed32 = 47;
      }

      // optional fixed64 default_fixed64 = 68;
      private long f_defaultFixed64 = 48l;
      private boolean b_defaultFixed64;

      public boolean hasDefaultFixed64() {
         return this.b_defaultFixed64;
      }

      public long getDefaultFixed64() {
         return this.f_defaultFixed64;
      }

      public T setDefaultFixed64(long defaultFixed64) {
         loadAndClear();
         this.b_defaultFixed64 = true;
         this.f_defaultFixed64 = defaultFixed64;
         return (T)this;
      }

      public void clearDefaultFixed64() {
         loadAndClear();
         this.b_defaultFixed64 = false;
         this.f_defaultFixed64 = 48l;
      }

      // optional sfixed32 default_sfixed32 = 69;
      private int f_defaultSfixed32 = 49;
      private boolean b_defaultSfixed32;

      public boolean hasDefaultSfixed32() {
         return this.b_defaultSfixed32;
      }

      public int getDefaultSfixed32() {
         return this.f_defaultSfixed32;
      }

      public T setDefaultSfixed32(int defaultSfixed32) {
         loadAndClear();
         this.b_defaultSfixed32 = true;
         this.f_defaultSfixed32 = defaultSfixed32;
         return (T)this;
      }

      public void clearDefaultSfixed32() {
         loadAndClear();
         this.b_defaultSfixed32 = false;
         this.f_defaultSfixed32 = 49;
      }

      // optional sfixed64 default_sfixed64 = 70;
      private long f_defaultSfixed64 = -50l;
      private boolean b_defaultSfixed64;

      public boolean hasDefaultSfixed64() {
         return this.b_defaultSfixed64;
      }

      public long getDefaultSfixed64() {
         return this.f_defaultSfixed64;
      }

      public T setDefaultSfixed64(long defaultSfixed64) {
         loadAndClear();
         this.b_defaultSfixed64 = true;
         this.f_defaultSfixed64 = defaultSfixed64;
         return (T)this;
      }

      public void clearDefaultSfixed64() {
         loadAndClear();
         this.b_defaultSfixed64 = false;
         this.f_defaultSfixed64 = -50l;
      }

      // optional float default_float = 71;
      private float f_defaultFloat = 51.5f;
      private boolean b_defaultFloat;

      public boolean hasDefaultFloat() {
         return this.b_defaultFloat;
      }

      public float getDefaultFloat() {
         return this.f_defaultFloat;
      }

      public T setDefaultFloat(float defaultFloat) {
         loadAndClear();
         this.b_defaultFloat = true;
         this.f_defaultFloat = defaultFloat;
         return (T)this;
      }

      public void clearDefaultFloat() {
         loadAndClear();
         this.b_defaultFloat = false;
         this.f_defaultFloat = 51.5f;
      }

      // optional double default_double = 72;
      private double f_defaultDouble = 52000.0d;
      private boolean b_defaultDouble;

      public boolean hasDefaultDouble() {
         return this.b_defaultDouble;
      }

      public double getDefaultDouble() {
         return this.f_defaultDouble;
      }

      public T setDefaultDouble(double defaultDouble) {
         loadAndClear();
         this.b_defaultDouble = true;
         this.f_defaultDouble = defaultDouble;
         return (T)this;
      }

      public void clearDefaultDouble() {
         loadAndClear();
         this.b_defaultDouble = false;
         this.f_defaultDouble = 52000.0d;
      }

      // optional bool default_bool = 73;
      private boolean f_defaultBool = true;
      private boolean b_defaultBool;

      public boolean hasDefaultBool() {
         return this.b_defaultBool;
      }

      public boolean getDefaultBool() {
         return this.f_defaultBool;
      }

      public T setDefaultBool(boolean defaultBool) {
         loadAndClear();
         this.b_defaultBool = true;
         this.f_defaultBool = defaultBool;
         return (T)this;
      }

      public void clearDefaultBool() {
         loadAndClear();
         this.b_defaultBool = false;
         this.f_defaultBool = true;
      }

      // optional string default_string = 74;
      private java.lang.String f_defaultString = "\u0068\u0065\u006c\u006c\u006f";
      private boolean b_defaultString;

      public boolean hasDefaultString() {
         return this.b_defaultString;
      }

      public java.lang.String getDefaultString() {
         return this.f_defaultString;
      }

      public T setDefaultString(java.lang.String defaultString) {
         loadAndClear();
         this.b_defaultString = true;
         this.f_defaultString = defaultString;
         return (T)this;
      }

      public void clearDefaultString() {
         loadAndClear();
         this.b_defaultString = false;
         this.f_defaultString = "\u0068\u0065\u006c\u006c\u006f";
      }

      // optional bytes default_bytes = 75;
      private org.fusesource.hawtbuf.Buffer f_defaultBytes = new org.fusesource.hawtbuf.Buffer(org.fusesource.hawtbuf.UTF8Buffer.encode("\u0077\u006f\u0072\u006c\u0064"));
      private boolean b_defaultBytes;

      public boolean hasDefaultBytes() {
         return this.b_defaultBytes;
      }

      public org.fusesource.hawtbuf.Buffer getDefaultBytes() {
         return this.f_defaultBytes;
      }

      public T setDefaultBytes(org.fusesource.hawtbuf.Buffer defaultBytes) {
         loadAndClear();
         this.b_defaultBytes = true;
         this.f_defaultBytes = defaultBytes;
         return (T)this;
      }

      public void clearDefaultBytes() {
         loadAndClear();
         this.b_defaultBytes = false;
         this.f_defaultBytes = new org.fusesource.hawtbuf.Buffer(org.fusesource.hawtbuf.UTF8Buffer.encode("\u0077\u006f\u0072\u006c\u0064"));
      }

      // optional NestedEnum default_nested_enum = 81;
      private TestAllTypes.NestedEnum f_defaultNestedEnum = TestAllTypes.NestedEnum.BAR;
      private boolean b_defaultNestedEnum;

      public boolean hasDefaultNestedEnum() {
         return this.b_defaultNestedEnum;
      }

      public TestAllTypes.NestedEnum getDefaultNestedEnum() {
         return this.f_defaultNestedEnum;
      }

      public T setDefaultNestedEnum(TestAllTypes.NestedEnum defaultNestedEnum) {
         loadAndClear();
         this.b_defaultNestedEnum = true;
         this.f_defaultNestedEnum = defaultNestedEnum;
         return (T)this;
      }

      public void clearDefaultNestedEnum() {
         loadAndClear();
         this.b_defaultNestedEnum = false;
         this.f_defaultNestedEnum = TestAllTypes.NestedEnum.BAR;
      }

      // optional ForeignEnum default_foreign_enum = 82;
      private ForeignEnum f_defaultForeignEnum = ForeignEnum.FOREIGN_BAR;
      private boolean b_defaultForeignEnum;

      public boolean hasDefaultForeignEnum() {
         return this.b_defaultForeignEnum;
      }

      public ForeignEnum getDefaultForeignEnum() {
         return this.f_defaultForeignEnum;
      }

      public T setDefaultForeignEnum(ForeignEnum defaultForeignEnum) {
         loadAndClear();
         this.b_defaultForeignEnum = true;
         this.f_defaultForeignEnum = defaultForeignEnum;
         return (T)this;
      }

      public void clearDefaultForeignEnum() {
         loadAndClear();
         this.b_defaultForeignEnum = false;
         this.f_defaultForeignEnum = ForeignEnum.FOREIGN_BAR;
      }

      // optional protobuf_unittest_import.ImportEnum default_import_enum = 83;
      private UnittestImport.ImportEnum f_defaultImportEnum = UnittestImport.ImportEnum.IMPORT_BAR;
      private boolean b_defaultImportEnum;

      public boolean hasDefaultImportEnum() {
         return this.b_defaultImportEnum;
      }

      public UnittestImport.ImportEnum getDefaultImportEnum() {
         return this.f_defaultImportEnum;
      }

      public T setDefaultImportEnum(UnittestImport.ImportEnum defaultImportEnum) {
         loadAndClear();
         this.b_defaultImportEnum = true;
         this.f_defaultImportEnum = defaultImportEnum;
         return (T)this;
      }

      public void clearDefaultImportEnum() {
         loadAndClear();
         this.b_defaultImportEnum = false;
         this.f_defaultImportEnum = UnittestImport.ImportEnum.IMPORT_BAR;
      }

      // optional string default_string_piece = 84;
      private java.lang.String f_defaultStringPiece = "\u0061\u0062\u0063";
      private boolean b_defaultStringPiece;

      public boolean hasDefaultStringPiece() {
         return this.b_defaultStringPiece;
      }

      public java.lang.String getDefaultStringPiece() {
         return this.f_defaultStringPiece;
      }

      public T setDefaultStringPiece(java.lang.String defaultStringPiece) {
         loadAndClear();
         this.b_defaultStringPiece = true;
         this.f_defaultStringPiece = defaultStringPiece;
         return (T)this;
      }

      public void clearDefaultStringPiece() {
         loadAndClear();
         this.b_defaultStringPiece = false;
         this.f_defaultStringPiece = "\u0061\u0062\u0063";
      }

      // optional string default_cord = 85;
      private java.lang.String f_defaultCord = "123";
      private boolean b_defaultCord;

      public boolean hasDefaultCord() {
         return this.b_defaultCord;
      }

      public java.lang.String getDefaultCord() {
         return this.f_defaultCord;
      }

      public T setDefaultCord(java.lang.String defaultCord) {
         loadAndClear();
         this.b_defaultCord = true;
         this.f_defaultCord = defaultCord;
         return (T)this;
      }

      public void clearDefaultCord() {
         loadAndClear();
         this.b_defaultCord = false;
         this.f_defaultCord = "123";
      }

   }


   static public final class ForeignMessage extends ForeignMessageBase<ForeignMessage> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearC();
      }

      public ForeignMessage clone() {
         return new ForeignMessage().mergeFrom(this);
      }

      public ForeignMessage mergeFrom(ForeignMessage other) {
         if (other.hasC()) {
            setC(other.getC());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasC()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getC());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public ForeignMessage mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setC(input.readInt32());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasC()) {
            output.writeInt32(1, getC());
         }
      }

      public static ForeignMessage parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new ForeignMessage().mergeUnframed(data).checktInitialized();
      }

      public static ForeignMessage parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new ForeignMessage().mergeUnframed(data).checktInitialized();
      }

      public static ForeignMessage parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new ForeignMessage().mergeUnframed(data).checktInitialized();
      }

      public static ForeignMessage parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new ForeignMessage().mergeUnframed(data).checktInitialized();
      }

      public static ForeignMessage parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new ForeignMessage().mergeFramed(data).checktInitialized();
      }

      public static ForeignMessage parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new ForeignMessage().mergeFramed(data).checktInitialized();
      }

      public static ForeignMessage parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new ForeignMessage().mergeFramed(data).checktInitialized();
      }

      public static ForeignMessage parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new ForeignMessage().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasC() ) {
            sb.append(prefix+"c: ");
            sb.append(getC());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=ForeignMessage.class )
            return false;
         
         return equals((ForeignMessage)obj);
      }
      
      public boolean equals(ForeignMessage obj) {
         if (hasC() ^ obj.hasC() ) 
            return false;
         if (hasC() && ( getC()!=obj.getC() ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=1901595827;
         if (hasC()) {
            rc ^= ( 67^getC() );
         }
         return rc;
      }
      
   }

   static abstract class ForeignMessageBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional int32 c = 1;
      private int f_c = 0;
      private boolean b_c;

      public boolean hasC() {
         return this.b_c;
      }

      public int getC() {
         return this.f_c;
      }

      public T setC(int c) {
         loadAndClear();
         this.b_c = true;
         this.f_c = c;
         return (T)this;
      }

      public void clearC() {
         loadAndClear();
         this.b_c = false;
         this.f_c = 0;
      }

   }


   static public final class TestAllExtensions extends TestAllExtensionsBase<TestAllExtensions> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
      }

      public TestAllExtensions clone() {
         return new TestAllExtensions().mergeFrom(this);
      }

      public TestAllExtensions mergeFrom(TestAllExtensions other) {
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         memoizedSerializedSize = size;
         return size;
      }

      public TestAllExtensions mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
      }

      public static TestAllExtensions parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestAllExtensions parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestAllExtensions parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestAllExtensions parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestAllExtensions parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllExtensions().mergeFramed(data).checktInitialized();
      }

      public static TestAllExtensions parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllExtensions().mergeFramed(data).checktInitialized();
      }

      public static TestAllExtensions parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestAllExtensions().mergeFramed(data).checktInitialized();
      }

      public static TestAllExtensions parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestAllExtensions().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestAllExtensions.class )
            return false;
         
         return equals((TestAllExtensions)obj);
      }
      
      public boolean equals(TestAllExtensions obj) {
         return true;
      }
      
      public int hashCode() {
         int rc=-704408317;
         return rc;
      }
      
   }

   static abstract class TestAllExtensionsBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

   }


   static public final class TestRequired extends TestRequiredBase<TestRequired> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if(  !hasA() ) {
            missingFields.add("a");
         }
         if(  !hasB() ) {
            missingFields.add("b");
         }
         if(  !hasC() ) {
            missingFields.add("c");
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearA();
         clearDummy2();
         clearB();
         clearDummy4();
         clearDummy5();
         clearDummy6();
         clearDummy7();
         clearDummy8();
         clearDummy9();
         clearDummy10();
         clearDummy11();
         clearDummy12();
         clearDummy13();
         clearDummy14();
         clearDummy15();
         clearDummy16();
         clearDummy17();
         clearDummy18();
         clearDummy19();
         clearDummy20();
         clearDummy21();
         clearDummy22();
         clearDummy23();
         clearDummy24();
         clearDummy25();
         clearDummy26();
         clearDummy27();
         clearDummy28();
         clearDummy29();
         clearDummy30();
         clearDummy31();
         clearDummy32();
         clearC();
      }

      public TestRequired clone() {
         return new TestRequired().mergeFrom(this);
      }

      public TestRequired mergeFrom(TestRequired other) {
         if (other.hasA()) {
            setA(other.getA());
         }
         if (other.hasDummy2()) {
            setDummy2(other.getDummy2());
         }
         if (other.hasB()) {
            setB(other.getB());
         }
         if (other.hasDummy4()) {
            setDummy4(other.getDummy4());
         }
         if (other.hasDummy5()) {
            setDummy5(other.getDummy5());
         }
         if (other.hasDummy6()) {
            setDummy6(other.getDummy6());
         }
         if (other.hasDummy7()) {
            setDummy7(other.getDummy7());
         }
         if (other.hasDummy8()) {
            setDummy8(other.getDummy8());
         }
         if (other.hasDummy9()) {
            setDummy9(other.getDummy9());
         }
         if (other.hasDummy10()) {
            setDummy10(other.getDummy10());
         }
         if (other.hasDummy11()) {
            setDummy11(other.getDummy11());
         }
         if (other.hasDummy12()) {
            setDummy12(other.getDummy12());
         }
         if (other.hasDummy13()) {
            setDummy13(other.getDummy13());
         }
         if (other.hasDummy14()) {
            setDummy14(other.getDummy14());
         }
         if (other.hasDummy15()) {
            setDummy15(other.getDummy15());
         }
         if (other.hasDummy16()) {
            setDummy16(other.getDummy16());
         }
         if (other.hasDummy17()) {
            setDummy17(other.getDummy17());
         }
         if (other.hasDummy18()) {
            setDummy18(other.getDummy18());
         }
         if (other.hasDummy19()) {
            setDummy19(other.getDummy19());
         }
         if (other.hasDummy20()) {
            setDummy20(other.getDummy20());
         }
         if (other.hasDummy21()) {
            setDummy21(other.getDummy21());
         }
         if (other.hasDummy22()) {
            setDummy22(other.getDummy22());
         }
         if (other.hasDummy23()) {
            setDummy23(other.getDummy23());
         }
         if (other.hasDummy24()) {
            setDummy24(other.getDummy24());
         }
         if (other.hasDummy25()) {
            setDummy25(other.getDummy25());
         }
         if (other.hasDummy26()) {
            setDummy26(other.getDummy26());
         }
         if (other.hasDummy27()) {
            setDummy27(other.getDummy27());
         }
         if (other.hasDummy28()) {
            setDummy28(other.getDummy28());
         }
         if (other.hasDummy29()) {
            setDummy29(other.getDummy29());
         }
         if (other.hasDummy30()) {
            setDummy30(other.getDummy30());
         }
         if (other.hasDummy31()) {
            setDummy31(other.getDummy31());
         }
         if (other.hasDummy32()) {
            setDummy32(other.getDummy32());
         }
         if (other.hasC()) {
            setC(other.getC());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasA()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getA());
         }
         if (hasDummy2()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(2, getDummy2());
         }
         if (hasB()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(3, getB());
         }
         if (hasDummy4()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(4, getDummy4());
         }
         if (hasDummy5()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(5, getDummy5());
         }
         if (hasDummy6()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(6, getDummy6());
         }
         if (hasDummy7()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(7, getDummy7());
         }
         if (hasDummy8()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(8, getDummy8());
         }
         if (hasDummy9()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(9, getDummy9());
         }
         if (hasDummy10()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(10, getDummy10());
         }
         if (hasDummy11()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(11, getDummy11());
         }
         if (hasDummy12()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(12, getDummy12());
         }
         if (hasDummy13()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(13, getDummy13());
         }
         if (hasDummy14()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(14, getDummy14());
         }
         if (hasDummy15()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(15, getDummy15());
         }
         if (hasDummy16()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(16, getDummy16());
         }
         if (hasDummy17()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(17, getDummy17());
         }
         if (hasDummy18()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(18, getDummy18());
         }
         if (hasDummy19()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(19, getDummy19());
         }
         if (hasDummy20()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(20, getDummy20());
         }
         if (hasDummy21()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(21, getDummy21());
         }
         if (hasDummy22()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(22, getDummy22());
         }
         if (hasDummy23()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(23, getDummy23());
         }
         if (hasDummy24()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(24, getDummy24());
         }
         if (hasDummy25()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(25, getDummy25());
         }
         if (hasDummy26()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(26, getDummy26());
         }
         if (hasDummy27()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(27, getDummy27());
         }
         if (hasDummy28()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(28, getDummy28());
         }
         if (hasDummy29()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(29, getDummy29());
         }
         if (hasDummy30()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(30, getDummy30());
         }
         if (hasDummy31()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(31, getDummy31());
         }
         if (hasDummy32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(32, getDummy32());
         }
         if (hasC()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(33, getC());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestRequired mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setA(input.readInt32());
               break;
            case 16:
               setDummy2(input.readInt32());
               break;
            case 24:
               setB(input.readInt32());
               break;
            case 32:
               setDummy4(input.readInt32());
               break;
            case 40:
               setDummy5(input.readInt32());
               break;
            case 48:
               setDummy6(input.readInt32());
               break;
            case 56:
               setDummy7(input.readInt32());
               break;
            case 64:
               setDummy8(input.readInt32());
               break;
            case 72:
               setDummy9(input.readInt32());
               break;
            case 80:
               setDummy10(input.readInt32());
               break;
            case 88:
               setDummy11(input.readInt32());
               break;
            case 96:
               setDummy12(input.readInt32());
               break;
            case 104:
               setDummy13(input.readInt32());
               break;
            case 112:
               setDummy14(input.readInt32());
               break;
            case 120:
               setDummy15(input.readInt32());
               break;
            case 128:
               setDummy16(input.readInt32());
               break;
            case 136:
               setDummy17(input.readInt32());
               break;
            case 144:
               setDummy18(input.readInt32());
               break;
            case 152:
               setDummy19(input.readInt32());
               break;
            case 160:
               setDummy20(input.readInt32());
               break;
            case 168:
               setDummy21(input.readInt32());
               break;
            case 176:
               setDummy22(input.readInt32());
               break;
            case 184:
               setDummy23(input.readInt32());
               break;
            case 192:
               setDummy24(input.readInt32());
               break;
            case 200:
               setDummy25(input.readInt32());
               break;
            case 208:
               setDummy26(input.readInt32());
               break;
            case 216:
               setDummy27(input.readInt32());
               break;
            case 224:
               setDummy28(input.readInt32());
               break;
            case 232:
               setDummy29(input.readInt32());
               break;
            case 240:
               setDummy30(input.readInt32());
               break;
            case 248:
               setDummy31(input.readInt32());
               break;
            case 256:
               setDummy32(input.readInt32());
               break;
            case 264:
               setC(input.readInt32());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasA()) {
            output.writeInt32(1, getA());
         }
         if (hasDummy2()) {
            output.writeInt32(2, getDummy2());
         }
         if (hasB()) {
            output.writeInt32(3, getB());
         }
         if (hasDummy4()) {
            output.writeInt32(4, getDummy4());
         }
         if (hasDummy5()) {
            output.writeInt32(5, getDummy5());
         }
         if (hasDummy6()) {
            output.writeInt32(6, getDummy6());
         }
         if (hasDummy7()) {
            output.writeInt32(7, getDummy7());
         }
         if (hasDummy8()) {
            output.writeInt32(8, getDummy8());
         }
         if (hasDummy9()) {
            output.writeInt32(9, getDummy9());
         }
         if (hasDummy10()) {
            output.writeInt32(10, getDummy10());
         }
         if (hasDummy11()) {
            output.writeInt32(11, getDummy11());
         }
         if (hasDummy12()) {
            output.writeInt32(12, getDummy12());
         }
         if (hasDummy13()) {
            output.writeInt32(13, getDummy13());
         }
         if (hasDummy14()) {
            output.writeInt32(14, getDummy14());
         }
         if (hasDummy15()) {
            output.writeInt32(15, getDummy15());
         }
         if (hasDummy16()) {
            output.writeInt32(16, getDummy16());
         }
         if (hasDummy17()) {
            output.writeInt32(17, getDummy17());
         }
         if (hasDummy18()) {
            output.writeInt32(18, getDummy18());
         }
         if (hasDummy19()) {
            output.writeInt32(19, getDummy19());
         }
         if (hasDummy20()) {
            output.writeInt32(20, getDummy20());
         }
         if (hasDummy21()) {
            output.writeInt32(21, getDummy21());
         }
         if (hasDummy22()) {
            output.writeInt32(22, getDummy22());
         }
         if (hasDummy23()) {
            output.writeInt32(23, getDummy23());
         }
         if (hasDummy24()) {
            output.writeInt32(24, getDummy24());
         }
         if (hasDummy25()) {
            output.writeInt32(25, getDummy25());
         }
         if (hasDummy26()) {
            output.writeInt32(26, getDummy26());
         }
         if (hasDummy27()) {
            output.writeInt32(27, getDummy27());
         }
         if (hasDummy28()) {
            output.writeInt32(28, getDummy28());
         }
         if (hasDummy29()) {
            output.writeInt32(29, getDummy29());
         }
         if (hasDummy30()) {
            output.writeInt32(30, getDummy30());
         }
         if (hasDummy31()) {
            output.writeInt32(31, getDummy31());
         }
         if (hasDummy32()) {
            output.writeInt32(32, getDummy32());
         }
         if (hasC()) {
            output.writeInt32(33, getC());
         }
      }

      public static TestRequired parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequired().mergeUnframed(data).checktInitialized();
      }

      public static TestRequired parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequired().mergeUnframed(data).checktInitialized();
      }

      public static TestRequired parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequired().mergeUnframed(data).checktInitialized();
      }

      public static TestRequired parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequired().mergeUnframed(data).checktInitialized();
      }

      public static TestRequired parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequired().mergeFramed(data).checktInitialized();
      }

      public static TestRequired parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequired().mergeFramed(data).checktInitialized();
      }

      public static TestRequired parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequired().mergeFramed(data).checktInitialized();
      }

      public static TestRequired parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequired().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasA() ) {
            sb.append(prefix+"a: ");
            sb.append(getA());
            sb.append("\n");
         }
         if(  hasDummy2() ) {
            sb.append(prefix+"dummy2: ");
            sb.append(getDummy2());
            sb.append("\n");
         }
         if(  hasB() ) {
            sb.append(prefix+"b: ");
            sb.append(getB());
            sb.append("\n");
         }
         if(  hasDummy4() ) {
            sb.append(prefix+"dummy4: ");
            sb.append(getDummy4());
            sb.append("\n");
         }
         if(  hasDummy5() ) {
            sb.append(prefix+"dummy5: ");
            sb.append(getDummy5());
            sb.append("\n");
         }
         if(  hasDummy6() ) {
            sb.append(prefix+"dummy6: ");
            sb.append(getDummy6());
            sb.append("\n");
         }
         if(  hasDummy7() ) {
            sb.append(prefix+"dummy7: ");
            sb.append(getDummy7());
            sb.append("\n");
         }
         if(  hasDummy8() ) {
            sb.append(prefix+"dummy8: ");
            sb.append(getDummy8());
            sb.append("\n");
         }
         if(  hasDummy9() ) {
            sb.append(prefix+"dummy9: ");
            sb.append(getDummy9());
            sb.append("\n");
         }
         if(  hasDummy10() ) {
            sb.append(prefix+"dummy10: ");
            sb.append(getDummy10());
            sb.append("\n");
         }
         if(  hasDummy11() ) {
            sb.append(prefix+"dummy11: ");
            sb.append(getDummy11());
            sb.append("\n");
         }
         if(  hasDummy12() ) {
            sb.append(prefix+"dummy12: ");
            sb.append(getDummy12());
            sb.append("\n");
         }
         if(  hasDummy13() ) {
            sb.append(prefix+"dummy13: ");
            sb.append(getDummy13());
            sb.append("\n");
         }
         if(  hasDummy14() ) {
            sb.append(prefix+"dummy14: ");
            sb.append(getDummy14());
            sb.append("\n");
         }
         if(  hasDummy15() ) {
            sb.append(prefix+"dummy15: ");
            sb.append(getDummy15());
            sb.append("\n");
         }
         if(  hasDummy16() ) {
            sb.append(prefix+"dummy16: ");
            sb.append(getDummy16());
            sb.append("\n");
         }
         if(  hasDummy17() ) {
            sb.append(prefix+"dummy17: ");
            sb.append(getDummy17());
            sb.append("\n");
         }
         if(  hasDummy18() ) {
            sb.append(prefix+"dummy18: ");
            sb.append(getDummy18());
            sb.append("\n");
         }
         if(  hasDummy19() ) {
            sb.append(prefix+"dummy19: ");
            sb.append(getDummy19());
            sb.append("\n");
         }
         if(  hasDummy20() ) {
            sb.append(prefix+"dummy20: ");
            sb.append(getDummy20());
            sb.append("\n");
         }
         if(  hasDummy21() ) {
            sb.append(prefix+"dummy21: ");
            sb.append(getDummy21());
            sb.append("\n");
         }
         if(  hasDummy22() ) {
            sb.append(prefix+"dummy22: ");
            sb.append(getDummy22());
            sb.append("\n");
         }
         if(  hasDummy23() ) {
            sb.append(prefix+"dummy23: ");
            sb.append(getDummy23());
            sb.append("\n");
         }
         if(  hasDummy24() ) {
            sb.append(prefix+"dummy24: ");
            sb.append(getDummy24());
            sb.append("\n");
         }
         if(  hasDummy25() ) {
            sb.append(prefix+"dummy25: ");
            sb.append(getDummy25());
            sb.append("\n");
         }
         if(  hasDummy26() ) {
            sb.append(prefix+"dummy26: ");
            sb.append(getDummy26());
            sb.append("\n");
         }
         if(  hasDummy27() ) {
            sb.append(prefix+"dummy27: ");
            sb.append(getDummy27());
            sb.append("\n");
         }
         if(  hasDummy28() ) {
            sb.append(prefix+"dummy28: ");
            sb.append(getDummy28());
            sb.append("\n");
         }
         if(  hasDummy29() ) {
            sb.append(prefix+"dummy29: ");
            sb.append(getDummy29());
            sb.append("\n");
         }
         if(  hasDummy30() ) {
            sb.append(prefix+"dummy30: ");
            sb.append(getDummy30());
            sb.append("\n");
         }
         if(  hasDummy31() ) {
            sb.append(prefix+"dummy31: ");
            sb.append(getDummy31());
            sb.append("\n");
         }
         if(  hasDummy32() ) {
            sb.append(prefix+"dummy32: ");
            sb.append(getDummy32());
            sb.append("\n");
         }
         if(  hasC() ) {
            sb.append(prefix+"c: ");
            sb.append(getC());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestRequired.class )
            return false;
         
         return equals((TestRequired)obj);
      }
      
      public boolean equals(TestRequired obj) {
         if (hasA() ^ obj.hasA() ) 
            return false;
         if (hasA() && ( getA()!=obj.getA() ))
            return false;
         if (hasDummy2() ^ obj.hasDummy2() ) 
            return false;
         if (hasDummy2() && ( getDummy2()!=obj.getDummy2() ))
            return false;
         if (hasB() ^ obj.hasB() ) 
            return false;
         if (hasB() && ( getB()!=obj.getB() ))
            return false;
         if (hasDummy4() ^ obj.hasDummy4() ) 
            return false;
         if (hasDummy4() && ( getDummy4()!=obj.getDummy4() ))
            return false;
         if (hasDummy5() ^ obj.hasDummy5() ) 
            return false;
         if (hasDummy5() && ( getDummy5()!=obj.getDummy5() ))
            return false;
         if (hasDummy6() ^ obj.hasDummy6() ) 
            return false;
         if (hasDummy6() && ( getDummy6()!=obj.getDummy6() ))
            return false;
         if (hasDummy7() ^ obj.hasDummy7() ) 
            return false;
         if (hasDummy7() && ( getDummy7()!=obj.getDummy7() ))
            return false;
         if (hasDummy8() ^ obj.hasDummy8() ) 
            return false;
         if (hasDummy8() && ( getDummy8()!=obj.getDummy8() ))
            return false;
         if (hasDummy9() ^ obj.hasDummy9() ) 
            return false;
         if (hasDummy9() && ( getDummy9()!=obj.getDummy9() ))
            return false;
         if (hasDummy10() ^ obj.hasDummy10() ) 
            return false;
         if (hasDummy10() && ( getDummy10()!=obj.getDummy10() ))
            return false;
         if (hasDummy11() ^ obj.hasDummy11() ) 
            return false;
         if (hasDummy11() && ( getDummy11()!=obj.getDummy11() ))
            return false;
         if (hasDummy12() ^ obj.hasDummy12() ) 
            return false;
         if (hasDummy12() && ( getDummy12()!=obj.getDummy12() ))
            return false;
         if (hasDummy13() ^ obj.hasDummy13() ) 
            return false;
         if (hasDummy13() && ( getDummy13()!=obj.getDummy13() ))
            return false;
         if (hasDummy14() ^ obj.hasDummy14() ) 
            return false;
         if (hasDummy14() && ( getDummy14()!=obj.getDummy14() ))
            return false;
         if (hasDummy15() ^ obj.hasDummy15() ) 
            return false;
         if (hasDummy15() && ( getDummy15()!=obj.getDummy15() ))
            return false;
         if (hasDummy16() ^ obj.hasDummy16() ) 
            return false;
         if (hasDummy16() && ( getDummy16()!=obj.getDummy16() ))
            return false;
         if (hasDummy17() ^ obj.hasDummy17() ) 
            return false;
         if (hasDummy17() && ( getDummy17()!=obj.getDummy17() ))
            return false;
         if (hasDummy18() ^ obj.hasDummy18() ) 
            return false;
         if (hasDummy18() && ( getDummy18()!=obj.getDummy18() ))
            return false;
         if (hasDummy19() ^ obj.hasDummy19() ) 
            return false;
         if (hasDummy19() && ( getDummy19()!=obj.getDummy19() ))
            return false;
         if (hasDummy20() ^ obj.hasDummy20() ) 
            return false;
         if (hasDummy20() && ( getDummy20()!=obj.getDummy20() ))
            return false;
         if (hasDummy21() ^ obj.hasDummy21() ) 
            return false;
         if (hasDummy21() && ( getDummy21()!=obj.getDummy21() ))
            return false;
         if (hasDummy22() ^ obj.hasDummy22() ) 
            return false;
         if (hasDummy22() && ( getDummy22()!=obj.getDummy22() ))
            return false;
         if (hasDummy23() ^ obj.hasDummy23() ) 
            return false;
         if (hasDummy23() && ( getDummy23()!=obj.getDummy23() ))
            return false;
         if (hasDummy24() ^ obj.hasDummy24() ) 
            return false;
         if (hasDummy24() && ( getDummy24()!=obj.getDummy24() ))
            return false;
         if (hasDummy25() ^ obj.hasDummy25() ) 
            return false;
         if (hasDummy25() && ( getDummy25()!=obj.getDummy25() ))
            return false;
         if (hasDummy26() ^ obj.hasDummy26() ) 
            return false;
         if (hasDummy26() && ( getDummy26()!=obj.getDummy26() ))
            return false;
         if (hasDummy27() ^ obj.hasDummy27() ) 
            return false;
         if (hasDummy27() && ( getDummy27()!=obj.getDummy27() ))
            return false;
         if (hasDummy28() ^ obj.hasDummy28() ) 
            return false;
         if (hasDummy28() && ( getDummy28()!=obj.getDummy28() ))
            return false;
         if (hasDummy29() ^ obj.hasDummy29() ) 
            return false;
         if (hasDummy29() && ( getDummy29()!=obj.getDummy29() ))
            return false;
         if (hasDummy30() ^ obj.hasDummy30() ) 
            return false;
         if (hasDummy30() && ( getDummy30()!=obj.getDummy30() ))
            return false;
         if (hasDummy31() ^ obj.hasDummy31() ) 
            return false;
         if (hasDummy31() && ( getDummy31()!=obj.getDummy31() ))
            return false;
         if (hasDummy32() ^ obj.hasDummy32() ) 
            return false;
         if (hasDummy32() && ( getDummy32()!=obj.getDummy32() ))
            return false;
         if (hasC() ^ obj.hasC() ) 
            return false;
         if (hasC() && ( getC()!=obj.getC() ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=485521009;
         if (hasA()) {
            rc ^= ( 65^getA() );
         }
         if (hasDummy2()) {
            rc ^= ( 2058189994^getDummy2() );
         }
         if (hasB()) {
            rc ^= ( 66^getB() );
         }
         if (hasDummy4()) {
            rc ^= ( 2058189996^getDummy4() );
         }
         if (hasDummy5()) {
            rc ^= ( 2058189997^getDummy5() );
         }
         if (hasDummy6()) {
            rc ^= ( 2058189998^getDummy6() );
         }
         if (hasDummy7()) {
            rc ^= ( 2058189999^getDummy7() );
         }
         if (hasDummy8()) {
            rc ^= ( 2058190000^getDummy8() );
         }
         if (hasDummy9()) {
            rc ^= ( 2058190001^getDummy9() );
         }
         if (hasDummy10()) {
            rc ^= ( -620619609^getDummy10() );
         }
         if (hasDummy11()) {
            rc ^= ( -620619608^getDummy11() );
         }
         if (hasDummy12()) {
            rc ^= ( -620619607^getDummy12() );
         }
         if (hasDummy13()) {
            rc ^= ( -620619606^getDummy13() );
         }
         if (hasDummy14()) {
            rc ^= ( -620619605^getDummy14() );
         }
         if (hasDummy15()) {
            rc ^= ( -620619604^getDummy15() );
         }
         if (hasDummy16()) {
            rc ^= ( -620619603^getDummy16() );
         }
         if (hasDummy17()) {
            rc ^= ( -620619602^getDummy17() );
         }
         if (hasDummy18()) {
            rc ^= ( -620619601^getDummy18() );
         }
         if (hasDummy19()) {
            rc ^= ( -620619600^getDummy19() );
         }
         if (hasDummy20()) {
            rc ^= ( -620619578^getDummy20() );
         }
         if (hasDummy21()) {
            rc ^= ( -620619577^getDummy21() );
         }
         if (hasDummy22()) {
            rc ^= ( -620619576^getDummy22() );
         }
         if (hasDummy23()) {
            rc ^= ( -620619575^getDummy23() );
         }
         if (hasDummy24()) {
            rc ^= ( -620619574^getDummy24() );
         }
         if (hasDummy25()) {
            rc ^= ( -620619573^getDummy25() );
         }
         if (hasDummy26()) {
            rc ^= ( -620619572^getDummy26() );
         }
         if (hasDummy27()) {
            rc ^= ( -620619571^getDummy27() );
         }
         if (hasDummy28()) {
            rc ^= ( -620619570^getDummy28() );
         }
         if (hasDummy29()) {
            rc ^= ( -620619569^getDummy29() );
         }
         if (hasDummy30()) {
            rc ^= ( -620619547^getDummy30() );
         }
         if (hasDummy31()) {
            rc ^= ( -620619546^getDummy31() );
         }
         if (hasDummy32()) {
            rc ^= ( -620619545^getDummy32() );
         }
         if (hasC()) {
            rc ^= ( 67^getC() );
         }
         return rc;
      }
      
   }

   static abstract class TestRequiredBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // required int32 a = 1;
      private int f_a = 0;
      private boolean b_a;

      public boolean hasA() {
         return this.b_a;
      }

      public int getA() {
         return this.f_a;
      }

      public T setA(int a) {
         loadAndClear();
         this.b_a = true;
         this.f_a = a;
         return (T)this;
      }

      public void clearA() {
         loadAndClear();
         this.b_a = false;
         this.f_a = 0;
      }

      // optional int32 dummy2 = 2;
      private int f_dummy2 = 0;
      private boolean b_dummy2;

      public boolean hasDummy2() {
         return this.b_dummy2;
      }

      public int getDummy2() {
         return this.f_dummy2;
      }

      public T setDummy2(int dummy2) {
         loadAndClear();
         this.b_dummy2 = true;
         this.f_dummy2 = dummy2;
         return (T)this;
      }

      public void clearDummy2() {
         loadAndClear();
         this.b_dummy2 = false;
         this.f_dummy2 = 0;
      }

      // required int32 b = 3;
      private int f_b = 0;
      private boolean b_b;

      public boolean hasB() {
         return this.b_b;
      }

      public int getB() {
         return this.f_b;
      }

      public T setB(int b) {
         loadAndClear();
         this.b_b = true;
         this.f_b = b;
         return (T)this;
      }

      public void clearB() {
         loadAndClear();
         this.b_b = false;
         this.f_b = 0;
      }

      // optional int32 dummy4 = 4;
      private int f_dummy4 = 0;
      private boolean b_dummy4;

      public boolean hasDummy4() {
         return this.b_dummy4;
      }

      public int getDummy4() {
         return this.f_dummy4;
      }

      public T setDummy4(int dummy4) {
         loadAndClear();
         this.b_dummy4 = true;
         this.f_dummy4 = dummy4;
         return (T)this;
      }

      public void clearDummy4() {
         loadAndClear();
         this.b_dummy4 = false;
         this.f_dummy4 = 0;
      }

      // optional int32 dummy5 = 5;
      private int f_dummy5 = 0;
      private boolean b_dummy5;

      public boolean hasDummy5() {
         return this.b_dummy5;
      }

      public int getDummy5() {
         return this.f_dummy5;
      }

      public T setDummy5(int dummy5) {
         loadAndClear();
         this.b_dummy5 = true;
         this.f_dummy5 = dummy5;
         return (T)this;
      }

      public void clearDummy5() {
         loadAndClear();
         this.b_dummy5 = false;
         this.f_dummy5 = 0;
      }

      // optional int32 dummy6 = 6;
      private int f_dummy6 = 0;
      private boolean b_dummy6;

      public boolean hasDummy6() {
         return this.b_dummy6;
      }

      public int getDummy6() {
         return this.f_dummy6;
      }

      public T setDummy6(int dummy6) {
         loadAndClear();
         this.b_dummy6 = true;
         this.f_dummy6 = dummy6;
         return (T)this;
      }

      public void clearDummy6() {
         loadAndClear();
         this.b_dummy6 = false;
         this.f_dummy6 = 0;
      }

      // optional int32 dummy7 = 7;
      private int f_dummy7 = 0;
      private boolean b_dummy7;

      public boolean hasDummy7() {
         return this.b_dummy7;
      }

      public int getDummy7() {
         return this.f_dummy7;
      }

      public T setDummy7(int dummy7) {
         loadAndClear();
         this.b_dummy7 = true;
         this.f_dummy7 = dummy7;
         return (T)this;
      }

      public void clearDummy7() {
         loadAndClear();
         this.b_dummy7 = false;
         this.f_dummy7 = 0;
      }

      // optional int32 dummy8 = 8;
      private int f_dummy8 = 0;
      private boolean b_dummy8;

      public boolean hasDummy8() {
         return this.b_dummy8;
      }

      public int getDummy8() {
         return this.f_dummy8;
      }

      public T setDummy8(int dummy8) {
         loadAndClear();
         this.b_dummy8 = true;
         this.f_dummy8 = dummy8;
         return (T)this;
      }

      public void clearDummy8() {
         loadAndClear();
         this.b_dummy8 = false;
         this.f_dummy8 = 0;
      }

      // optional int32 dummy9 = 9;
      private int f_dummy9 = 0;
      private boolean b_dummy9;

      public boolean hasDummy9() {
         return this.b_dummy9;
      }

      public int getDummy9() {
         return this.f_dummy9;
      }

      public T setDummy9(int dummy9) {
         loadAndClear();
         this.b_dummy9 = true;
         this.f_dummy9 = dummy9;
         return (T)this;
      }

      public void clearDummy9() {
         loadAndClear();
         this.b_dummy9 = false;
         this.f_dummy9 = 0;
      }

      // optional int32 dummy10 = 10;
      private int f_dummy10 = 0;
      private boolean b_dummy10;

      public boolean hasDummy10() {
         return this.b_dummy10;
      }

      public int getDummy10() {
         return this.f_dummy10;
      }

      public T setDummy10(int dummy10) {
         loadAndClear();
         this.b_dummy10 = true;
         this.f_dummy10 = dummy10;
         return (T)this;
      }

      public void clearDummy10() {
         loadAndClear();
         this.b_dummy10 = false;
         this.f_dummy10 = 0;
      }

      // optional int32 dummy11 = 11;
      private int f_dummy11 = 0;
      private boolean b_dummy11;

      public boolean hasDummy11() {
         return this.b_dummy11;
      }

      public int getDummy11() {
         return this.f_dummy11;
      }

      public T setDummy11(int dummy11) {
         loadAndClear();
         this.b_dummy11 = true;
         this.f_dummy11 = dummy11;
         return (T)this;
      }

      public void clearDummy11() {
         loadAndClear();
         this.b_dummy11 = false;
         this.f_dummy11 = 0;
      }

      // optional int32 dummy12 = 12;
      private int f_dummy12 = 0;
      private boolean b_dummy12;

      public boolean hasDummy12() {
         return this.b_dummy12;
      }

      public int getDummy12() {
         return this.f_dummy12;
      }

      public T setDummy12(int dummy12) {
         loadAndClear();
         this.b_dummy12 = true;
         this.f_dummy12 = dummy12;
         return (T)this;
      }

      public void clearDummy12() {
         loadAndClear();
         this.b_dummy12 = false;
         this.f_dummy12 = 0;
      }

      // optional int32 dummy13 = 13;
      private int f_dummy13 = 0;
      private boolean b_dummy13;

      public boolean hasDummy13() {
         return this.b_dummy13;
      }

      public int getDummy13() {
         return this.f_dummy13;
      }

      public T setDummy13(int dummy13) {
         loadAndClear();
         this.b_dummy13 = true;
         this.f_dummy13 = dummy13;
         return (T)this;
      }

      public void clearDummy13() {
         loadAndClear();
         this.b_dummy13 = false;
         this.f_dummy13 = 0;
      }

      // optional int32 dummy14 = 14;
      private int f_dummy14 = 0;
      private boolean b_dummy14;

      public boolean hasDummy14() {
         return this.b_dummy14;
      }

      public int getDummy14() {
         return this.f_dummy14;
      }

      public T setDummy14(int dummy14) {
         loadAndClear();
         this.b_dummy14 = true;
         this.f_dummy14 = dummy14;
         return (T)this;
      }

      public void clearDummy14() {
         loadAndClear();
         this.b_dummy14 = false;
         this.f_dummy14 = 0;
      }

      // optional int32 dummy15 = 15;
      private int f_dummy15 = 0;
      private boolean b_dummy15;

      public boolean hasDummy15() {
         return this.b_dummy15;
      }

      public int getDummy15() {
         return this.f_dummy15;
      }

      public T setDummy15(int dummy15) {
         loadAndClear();
         this.b_dummy15 = true;
         this.f_dummy15 = dummy15;
         return (T)this;
      }

      public void clearDummy15() {
         loadAndClear();
         this.b_dummy15 = false;
         this.f_dummy15 = 0;
      }

      // optional int32 dummy16 = 16;
      private int f_dummy16 = 0;
      private boolean b_dummy16;

      public boolean hasDummy16() {
         return this.b_dummy16;
      }

      public int getDummy16() {
         return this.f_dummy16;
      }

      public T setDummy16(int dummy16) {
         loadAndClear();
         this.b_dummy16 = true;
         this.f_dummy16 = dummy16;
         return (T)this;
      }

      public void clearDummy16() {
         loadAndClear();
         this.b_dummy16 = false;
         this.f_dummy16 = 0;
      }

      // optional int32 dummy17 = 17;
      private int f_dummy17 = 0;
      private boolean b_dummy17;

      public boolean hasDummy17() {
         return this.b_dummy17;
      }

      public int getDummy17() {
         return this.f_dummy17;
      }

      public T setDummy17(int dummy17) {
         loadAndClear();
         this.b_dummy17 = true;
         this.f_dummy17 = dummy17;
         return (T)this;
      }

      public void clearDummy17() {
         loadAndClear();
         this.b_dummy17 = false;
         this.f_dummy17 = 0;
      }

      // optional int32 dummy18 = 18;
      private int f_dummy18 = 0;
      private boolean b_dummy18;

      public boolean hasDummy18() {
         return this.b_dummy18;
      }

      public int getDummy18() {
         return this.f_dummy18;
      }

      public T setDummy18(int dummy18) {
         loadAndClear();
         this.b_dummy18 = true;
         this.f_dummy18 = dummy18;
         return (T)this;
      }

      public void clearDummy18() {
         loadAndClear();
         this.b_dummy18 = false;
         this.f_dummy18 = 0;
      }

      // optional int32 dummy19 = 19;
      private int f_dummy19 = 0;
      private boolean b_dummy19;

      public boolean hasDummy19() {
         return this.b_dummy19;
      }

      public int getDummy19() {
         return this.f_dummy19;
      }

      public T setDummy19(int dummy19) {
         loadAndClear();
         this.b_dummy19 = true;
         this.f_dummy19 = dummy19;
         return (T)this;
      }

      public void clearDummy19() {
         loadAndClear();
         this.b_dummy19 = false;
         this.f_dummy19 = 0;
      }

      // optional int32 dummy20 = 20;
      private int f_dummy20 = 0;
      private boolean b_dummy20;

      public boolean hasDummy20() {
         return this.b_dummy20;
      }

      public int getDummy20() {
         return this.f_dummy20;
      }

      public T setDummy20(int dummy20) {
         loadAndClear();
         this.b_dummy20 = true;
         this.f_dummy20 = dummy20;
         return (T)this;
      }

      public void clearDummy20() {
         loadAndClear();
         this.b_dummy20 = false;
         this.f_dummy20 = 0;
      }

      // optional int32 dummy21 = 21;
      private int f_dummy21 = 0;
      private boolean b_dummy21;

      public boolean hasDummy21() {
         return this.b_dummy21;
      }

      public int getDummy21() {
         return this.f_dummy21;
      }

      public T setDummy21(int dummy21) {
         loadAndClear();
         this.b_dummy21 = true;
         this.f_dummy21 = dummy21;
         return (T)this;
      }

      public void clearDummy21() {
         loadAndClear();
         this.b_dummy21 = false;
         this.f_dummy21 = 0;
      }

      // optional int32 dummy22 = 22;
      private int f_dummy22 = 0;
      private boolean b_dummy22;

      public boolean hasDummy22() {
         return this.b_dummy22;
      }

      public int getDummy22() {
         return this.f_dummy22;
      }

      public T setDummy22(int dummy22) {
         loadAndClear();
         this.b_dummy22 = true;
         this.f_dummy22 = dummy22;
         return (T)this;
      }

      public void clearDummy22() {
         loadAndClear();
         this.b_dummy22 = false;
         this.f_dummy22 = 0;
      }

      // optional int32 dummy23 = 23;
      private int f_dummy23 = 0;
      private boolean b_dummy23;

      public boolean hasDummy23() {
         return this.b_dummy23;
      }

      public int getDummy23() {
         return this.f_dummy23;
      }

      public T setDummy23(int dummy23) {
         loadAndClear();
         this.b_dummy23 = true;
         this.f_dummy23 = dummy23;
         return (T)this;
      }

      public void clearDummy23() {
         loadAndClear();
         this.b_dummy23 = false;
         this.f_dummy23 = 0;
      }

      // optional int32 dummy24 = 24;
      private int f_dummy24 = 0;
      private boolean b_dummy24;

      public boolean hasDummy24() {
         return this.b_dummy24;
      }

      public int getDummy24() {
         return this.f_dummy24;
      }

      public T setDummy24(int dummy24) {
         loadAndClear();
         this.b_dummy24 = true;
         this.f_dummy24 = dummy24;
         return (T)this;
      }

      public void clearDummy24() {
         loadAndClear();
         this.b_dummy24 = false;
         this.f_dummy24 = 0;
      }

      // optional int32 dummy25 = 25;
      private int f_dummy25 = 0;
      private boolean b_dummy25;

      public boolean hasDummy25() {
         return this.b_dummy25;
      }

      public int getDummy25() {
         return this.f_dummy25;
      }

      public T setDummy25(int dummy25) {
         loadAndClear();
         this.b_dummy25 = true;
         this.f_dummy25 = dummy25;
         return (T)this;
      }

      public void clearDummy25() {
         loadAndClear();
         this.b_dummy25 = false;
         this.f_dummy25 = 0;
      }

      // optional int32 dummy26 = 26;
      private int f_dummy26 = 0;
      private boolean b_dummy26;

      public boolean hasDummy26() {
         return this.b_dummy26;
      }

      public int getDummy26() {
         return this.f_dummy26;
      }

      public T setDummy26(int dummy26) {
         loadAndClear();
         this.b_dummy26 = true;
         this.f_dummy26 = dummy26;
         return (T)this;
      }

      public void clearDummy26() {
         loadAndClear();
         this.b_dummy26 = false;
         this.f_dummy26 = 0;
      }

      // optional int32 dummy27 = 27;
      private int f_dummy27 = 0;
      private boolean b_dummy27;

      public boolean hasDummy27() {
         return this.b_dummy27;
      }

      public int getDummy27() {
         return this.f_dummy27;
      }

      public T setDummy27(int dummy27) {
         loadAndClear();
         this.b_dummy27 = true;
         this.f_dummy27 = dummy27;
         return (T)this;
      }

      public void clearDummy27() {
         loadAndClear();
         this.b_dummy27 = false;
         this.f_dummy27 = 0;
      }

      // optional int32 dummy28 = 28;
      private int f_dummy28 = 0;
      private boolean b_dummy28;

      public boolean hasDummy28() {
         return this.b_dummy28;
      }

      public int getDummy28() {
         return this.f_dummy28;
      }

      public T setDummy28(int dummy28) {
         loadAndClear();
         this.b_dummy28 = true;
         this.f_dummy28 = dummy28;
         return (T)this;
      }

      public void clearDummy28() {
         loadAndClear();
         this.b_dummy28 = false;
         this.f_dummy28 = 0;
      }

      // optional int32 dummy29 = 29;
      private int f_dummy29 = 0;
      private boolean b_dummy29;

      public boolean hasDummy29() {
         return this.b_dummy29;
      }

      public int getDummy29() {
         return this.f_dummy29;
      }

      public T setDummy29(int dummy29) {
         loadAndClear();
         this.b_dummy29 = true;
         this.f_dummy29 = dummy29;
         return (T)this;
      }

      public void clearDummy29() {
         loadAndClear();
         this.b_dummy29 = false;
         this.f_dummy29 = 0;
      }

      // optional int32 dummy30 = 30;
      private int f_dummy30 = 0;
      private boolean b_dummy30;

      public boolean hasDummy30() {
         return this.b_dummy30;
      }

      public int getDummy30() {
         return this.f_dummy30;
      }

      public T setDummy30(int dummy30) {
         loadAndClear();
         this.b_dummy30 = true;
         this.f_dummy30 = dummy30;
         return (T)this;
      }

      public void clearDummy30() {
         loadAndClear();
         this.b_dummy30 = false;
         this.f_dummy30 = 0;
      }

      // optional int32 dummy31 = 31;
      private int f_dummy31 = 0;
      private boolean b_dummy31;

      public boolean hasDummy31() {
         return this.b_dummy31;
      }

      public int getDummy31() {
         return this.f_dummy31;
      }

      public T setDummy31(int dummy31) {
         loadAndClear();
         this.b_dummy31 = true;
         this.f_dummy31 = dummy31;
         return (T)this;
      }

      public void clearDummy31() {
         loadAndClear();
         this.b_dummy31 = false;
         this.f_dummy31 = 0;
      }

      // optional int32 dummy32 = 32;
      private int f_dummy32 = 0;
      private boolean b_dummy32;

      public boolean hasDummy32() {
         return this.b_dummy32;
      }

      public int getDummy32() {
         return this.f_dummy32;
      }

      public T setDummy32(int dummy32) {
         loadAndClear();
         this.b_dummy32 = true;
         this.f_dummy32 = dummy32;
         return (T)this;
      }

      public void clearDummy32() {
         loadAndClear();
         this.b_dummy32 = false;
         this.f_dummy32 = 0;
      }

      // required int32 c = 33;
      private int f_c = 0;
      private boolean b_c;

      public boolean hasC() {
         return this.b_c;
      }

      public int getC() {
         return this.f_c;
      }

      public T setC(int c) {
         loadAndClear();
         this.b_c = true;
         this.f_c = c;
         return (T)this;
      }

      public void clearC() {
         loadAndClear();
         this.b_c = false;
         this.f_c = 0;
      }

   }


   static public final class TestRequiredForeign extends TestRequiredForeignBase<TestRequiredForeign> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasOptionalMessage() ) {
            try {
               getOptionalMessage().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"optional_message."));
            }
         }
         if( hasRepeatedMessage() ) {
            java.util.List<TestRequired> l = getRepeatedMessageList();
            for( int i=0; i < l.size(); i++ ) {
               try {
                  l.get(i).assertInitialized();
               } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                  missingFields.addAll(prefix(e.getMissingFields(),"repeated_message["+i+"]"));
               }
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearOptionalMessage();
         clearRepeatedMessage();
         clearDummy();
      }

      public TestRequiredForeign clone() {
         return new TestRequiredForeign().mergeFrom(this);
      }

      public TestRequiredForeign mergeFrom(TestRequiredForeign other) {
         if (other.hasOptionalMessage()) {
            if (hasOptionalMessage()) {
               getOptionalMessage().mergeFrom(other.getOptionalMessage());
            } else {
               setOptionalMessage(other.getOptionalMessage().clone());
            }
         }
         if (other.hasRepeatedMessage()) {
            for(TestRequired element: other.getRepeatedMessageList() ) {
               getRepeatedMessageList().add(element.clone());
            }
         }
         if (other.hasDummy()) {
            setDummy(other.getDummy());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasOptionalMessage()) {
            size += computeMessageSize(1, getOptionalMessage());
         }
         if (hasRepeatedMessage()) {
            for (TestRequired i : getRepeatedMessageList()) {
               size += computeMessageSize(2, i);
            }
         }
         if (hasDummy()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(3, getDummy());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestRequiredForeign mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               if (hasOptionalMessage()) {
                  getOptionalMessage().mergeFramed(input);
               } else {
                  setOptionalMessage(new TestRequired().mergeFramed(input));
               }
               break;
            case 18:
               getRepeatedMessageList().add(new TestRequired().mergeFramed(input));
               break;
            case 24:
               setDummy(input.readInt32());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasOptionalMessage()) {
            writeMessage(output, 1, getOptionalMessage());
         }
         if (hasRepeatedMessage()) {
            for (TestRequired i : getRepeatedMessageList()) {
               writeMessage(output, 2, i);
            }
         }
         if (hasDummy()) {
            output.writeInt32(3, getDummy());
         }
      }

      public static TestRequiredForeign parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequiredForeign().mergeUnframed(data).checktInitialized();
      }

      public static TestRequiredForeign parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequiredForeign().mergeUnframed(data).checktInitialized();
      }

      public static TestRequiredForeign parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequiredForeign().mergeUnframed(data).checktInitialized();
      }

      public static TestRequiredForeign parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequiredForeign().mergeUnframed(data).checktInitialized();
      }

      public static TestRequiredForeign parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequiredForeign().mergeFramed(data).checktInitialized();
      }

      public static TestRequiredForeign parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequiredForeign().mergeFramed(data).checktInitialized();
      }

      public static TestRequiredForeign parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRequiredForeign().mergeFramed(data).checktInitialized();
      }

      public static TestRequiredForeign parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRequiredForeign().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasOptionalMessage() ) {
            sb.append(prefix+"optional_message {\n");
            getOptionalMessage().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasRepeatedMessage() ) {
            java.util.List<TestRequired> l = getRepeatedMessageList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"repeated_message["+i+"] {\n");
               l.get(i).toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
         }
         if(  hasDummy() ) {
            sb.append(prefix+"dummy: ");
            sb.append(getDummy());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestRequiredForeign.class )
            return false;
         
         return equals((TestRequiredForeign)obj);
      }
      
      public boolean equals(TestRequiredForeign obj) {
         if (hasOptionalMessage() ^ obj.hasOptionalMessage() ) 
            return false;
         if (hasOptionalMessage() && ( !getOptionalMessage().equals(obj.getOptionalMessage()) ))
            return false;
         if (hasRepeatedMessage() ^ obj.hasRepeatedMessage() ) 
            return false;
         if (hasRepeatedMessage() && ( !getRepeatedMessageList().equals(obj.getRepeatedMessageList()) ))
            return false;
         if (hasDummy() ^ obj.hasDummy() ) 
            return false;
         if (hasDummy() && ( getDummy()!=obj.getDummy() ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=1425518883;
         if (hasOptionalMessage()) {
            rc ^= ( -356353945^getOptionalMessage().hashCode() );
         }
         if (hasRepeatedMessage()) {
            rc ^= ( 305763085^getRepeatedMessageList().hashCode() );
         }
         if (hasDummy()) {
            rc ^= ( 66393224^getDummy() );
         }
         return rc;
      }
      
   }

   static abstract class TestRequiredForeignBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional TestRequired optional_message = 1;
      private TestRequired f_optionalMessage = null;

      public boolean hasOptionalMessage() {
         return this.f_optionalMessage!=null;
      }

      public TestRequired getOptionalMessage() {
         if( this.f_optionalMessage == null ) {
            this.f_optionalMessage = new TestRequired();
         }
         return this.f_optionalMessage;
      }

      public T setOptionalMessage(TestRequired optionalMessage) {
         loadAndClear();
         this.f_optionalMessage = optionalMessage;
         return (T)this;
      }

      public void clearOptionalMessage() {
         loadAndClear();
         this.f_optionalMessage = null;
      }

      // repeated TestRequired repeated_message = 2;
      private java.util.List<TestRequired> f_repeatedMessage;

      public boolean hasRepeatedMessage() {
         return this.f_repeatedMessage!=null && !this.f_repeatedMessage.isEmpty();
      }

      public java.util.List<TestRequired> getRepeatedMessageList() {
         if( this.f_repeatedMessage == null ) {
            this.f_repeatedMessage = new java.util.ArrayList<TestRequired>();
         }
         return this.f_repeatedMessage;
      }

      public T setRepeatedMessageList(java.util.List<TestRequired> repeatedMessage) {
         loadAndClear();
         this.f_repeatedMessage = repeatedMessage;
         return (T)this;
      }

      public int getRepeatedMessageCount() {
         if( this.f_repeatedMessage == null ) {
            return 0;
         }
         return this.f_repeatedMessage.size();
      }

      public TestRequired getRepeatedMessage(int index) {
         if( this.f_repeatedMessage == null ) {
            return null;
         }
         return this.f_repeatedMessage.get(index);
      }

      public T setRepeatedMessage(int index, TestRequired value) {
         loadAndClear();
         getRepeatedMessageList().set(index, value);
         return (T)this;
      }

      public T addRepeatedMessage(TestRequired value) {
         loadAndClear();
         getRepeatedMessageList().add(value);
         return (T)this;
      }

      public T addAllRepeatedMessage(java.lang.Iterable<? extends TestRequired> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedMessageList());
         return (T)this;
      }

      public void clearRepeatedMessage() {
         loadAndClear();
         this.f_repeatedMessage = null;
      }

      // optional int32 dummy = 3;
      private int f_dummy = 0;
      private boolean b_dummy;

      public boolean hasDummy() {
         return this.b_dummy;
      }

      public int getDummy() {
         return this.f_dummy;
      }

      public T setDummy(int dummy) {
         loadAndClear();
         this.b_dummy = true;
         this.f_dummy = dummy;
         return (T)this;
      }

      public void clearDummy() {
         loadAndClear();
         this.b_dummy = false;
         this.f_dummy = 0;
      }

   }


   static public final class TestForeignNested extends TestForeignNestedBase<TestForeignNested> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasForeignNested() ) {
            try {
               getForeignNested().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"foreign_nested."));
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearForeignNested();
      }

      public TestForeignNested clone() {
         return new TestForeignNested().mergeFrom(this);
      }

      public TestForeignNested mergeFrom(TestForeignNested other) {
         if (other.hasForeignNested()) {
            if (hasForeignNested()) {
               getForeignNested().mergeFrom(other.getForeignNested());
            } else {
               setForeignNested(other.getForeignNested().clone());
            }
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasForeignNested()) {
            size += computeMessageSize(1, getForeignNested());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestForeignNested mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               if (hasForeignNested()) {
                  getForeignNested().mergeFramed(input);
               } else {
                  setForeignNested(new TestAllTypes.NestedMessage().mergeFramed(input));
               }
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasForeignNested()) {
            writeMessage(output, 1, getForeignNested());
         }
      }

      public static TestForeignNested parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestForeignNested().mergeUnframed(data).checktInitialized();
      }

      public static TestForeignNested parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestForeignNested().mergeUnframed(data).checktInitialized();
      }

      public static TestForeignNested parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestForeignNested().mergeUnframed(data).checktInitialized();
      }

      public static TestForeignNested parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestForeignNested().mergeUnframed(data).checktInitialized();
      }

      public static TestForeignNested parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestForeignNested().mergeFramed(data).checktInitialized();
      }

      public static TestForeignNested parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestForeignNested().mergeFramed(data).checktInitialized();
      }

      public static TestForeignNested parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestForeignNested().mergeFramed(data).checktInitialized();
      }

      public static TestForeignNested parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestForeignNested().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasForeignNested() ) {
            sb.append(prefix+"foreign_nested {\n");
            getForeignNested().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestForeignNested.class )
            return false;
         
         return equals((TestForeignNested)obj);
      }
      
      public boolean equals(TestForeignNested obj) {
         if (hasForeignNested() ^ obj.hasForeignNested() ) 
            return false;
         if (hasForeignNested() && ( !getForeignNested().equals(obj.getForeignNested()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=1249675097;
         if (hasForeignNested()) {
            rc ^= ( 505614027^getForeignNested().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestForeignNestedBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional TestAllTypes.NestedMessage foreign_nested = 1;
      private TestAllTypes.NestedMessage f_foreignNested = null;

      public boolean hasForeignNested() {
         return this.f_foreignNested!=null;
      }

      public TestAllTypes.NestedMessage getForeignNested() {
         if( this.f_foreignNested == null ) {
            this.f_foreignNested = new TestAllTypes.NestedMessage();
         }
         return this.f_foreignNested;
      }

      public T setForeignNested(TestAllTypes.NestedMessage foreignNested) {
         loadAndClear();
         this.f_foreignNested = foreignNested;
         return (T)this;
      }

      public void clearForeignNested() {
         loadAndClear();
         this.f_foreignNested = null;
      }

   }


   static public final class TestEmptyMessage extends TestEmptyMessageBase<TestEmptyMessage> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
      }

      public TestEmptyMessage clone() {
         return new TestEmptyMessage().mergeFrom(this);
      }

      public TestEmptyMessage mergeFrom(TestEmptyMessage other) {
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         memoizedSerializedSize = size;
         return size;
      }

      public TestEmptyMessage mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
      }

      public static TestEmptyMessage parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessage parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessage parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessage parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessage parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessage().mergeFramed(data).checktInitialized();
      }

      public static TestEmptyMessage parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessage().mergeFramed(data).checktInitialized();
      }

      public static TestEmptyMessage parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessage().mergeFramed(data).checktInitialized();
      }

      public static TestEmptyMessage parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessage().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestEmptyMessage.class )
            return false;
         
         return equals((TestEmptyMessage)obj);
      }
      
      public boolean equals(TestEmptyMessage obj) {
         return true;
      }
      
      public int hashCode() {
         int rc=1046840268;
         return rc;
      }
      
   }

   static abstract class TestEmptyMessageBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

   }


   static public final class TestEmptyMessageWithExtensions extends TestEmptyMessageWithExtensionsBase<TestEmptyMessageWithExtensions> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
      }

      public TestEmptyMessageWithExtensions clone() {
         return new TestEmptyMessageWithExtensions().mergeFrom(this);
      }

      public TestEmptyMessageWithExtensions mergeFrom(TestEmptyMessageWithExtensions other) {
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         memoizedSerializedSize = size;
         return size;
      }

      public TestEmptyMessageWithExtensions mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
      }

      public static TestEmptyMessageWithExtensions parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessageWithExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessageWithExtensions parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessageWithExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessageWithExtensions parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessageWithExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessageWithExtensions parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessageWithExtensions().mergeUnframed(data).checktInitialized();
      }

      public static TestEmptyMessageWithExtensions parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessageWithExtensions().mergeFramed(data).checktInitialized();
      }

      public static TestEmptyMessageWithExtensions parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessageWithExtensions().mergeFramed(data).checktInitialized();
      }

      public static TestEmptyMessageWithExtensions parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestEmptyMessageWithExtensions().mergeFramed(data).checktInitialized();
      }

      public static TestEmptyMessageWithExtensions parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestEmptyMessageWithExtensions().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestEmptyMessageWithExtensions.class )
            return false;
         
         return equals((TestEmptyMessageWithExtensions)obj);
      }
      
      public boolean equals(TestEmptyMessageWithExtensions obj) {
         return true;
      }
      
      public int hashCode() {
         int rc=643429478;
         return rc;
      }
      
   }

   static abstract class TestEmptyMessageWithExtensionsBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

   }


   static public final class TestReallyLargeTagNumber extends TestReallyLargeTagNumberBase<TestReallyLargeTagNumber> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearA();
         clearBb();
      }

      public TestReallyLargeTagNumber clone() {
         return new TestReallyLargeTagNumber().mergeFrom(this);
      }

      public TestReallyLargeTagNumber mergeFrom(TestReallyLargeTagNumber other) {
         if (other.hasA()) {
            setA(other.getA());
         }
         if (other.hasBb()) {
            setBb(other.getBb());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasA()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getA());
         }
         if (hasBb()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(268435455, getBb());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestReallyLargeTagNumber mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setA(input.readInt32());
               break;
            case 2147483640:
               setBb(input.readInt32());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasA()) {
            output.writeInt32(1, getA());
         }
         if (hasBb()) {
            output.writeInt32(268435455, getBb());
         }
      }

      public static TestReallyLargeTagNumber parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestReallyLargeTagNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestReallyLargeTagNumber parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestReallyLargeTagNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestReallyLargeTagNumber parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestReallyLargeTagNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestReallyLargeTagNumber parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestReallyLargeTagNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestReallyLargeTagNumber parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestReallyLargeTagNumber().mergeFramed(data).checktInitialized();
      }

      public static TestReallyLargeTagNumber parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestReallyLargeTagNumber().mergeFramed(data).checktInitialized();
      }

      public static TestReallyLargeTagNumber parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestReallyLargeTagNumber().mergeFramed(data).checktInitialized();
      }

      public static TestReallyLargeTagNumber parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestReallyLargeTagNumber().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasA() ) {
            sb.append(prefix+"a: ");
            sb.append(getA());
            sb.append("\n");
         }
         if(  hasBb() ) {
            sb.append(prefix+"bb: ");
            sb.append(getBb());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestReallyLargeTagNumber.class )
            return false;
         
         return equals((TestReallyLargeTagNumber)obj);
      }
      
      public boolean equals(TestReallyLargeTagNumber obj) {
         if (hasA() ^ obj.hasA() ) 
            return false;
         if (hasA() && ( getA()!=obj.getA() ))
            return false;
         if (hasBb() ^ obj.hasBb() ) 
            return false;
         if (hasBb() && ( getBb()!=obj.getBb() ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-1888395547;
         if (hasA()) {
            rc ^= ( 65^getA() );
         }
         if (hasBb()) {
            rc ^= ( 2144^getBb() );
         }
         return rc;
      }
      
   }

   static abstract class TestReallyLargeTagNumberBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional int32 a = 1;
      private int f_a = 0;
      private boolean b_a;

      public boolean hasA() {
         return this.b_a;
      }

      public int getA() {
         return this.f_a;
      }

      public T setA(int a) {
         loadAndClear();
         this.b_a = true;
         this.f_a = a;
         return (T)this;
      }

      public void clearA() {
         loadAndClear();
         this.b_a = false;
         this.f_a = 0;
      }

      // optional int32 bb = 268435455;
      private int f_bb = 0;
      private boolean b_bb;

      public boolean hasBb() {
         return this.b_bb;
      }

      public int getBb() {
         return this.f_bb;
      }

      public T setBb(int bb) {
         loadAndClear();
         this.b_bb = true;
         this.f_bb = bb;
         return (T)this;
      }

      public void clearBb() {
         loadAndClear();
         this.b_bb = false;
         this.f_bb = 0;
      }

   }


   static public final class TestRecursiveMessage extends TestRecursiveMessageBase<TestRecursiveMessage> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasA() ) {
            try {
               getA().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"a."));
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearA();
         clearI();
      }

      public TestRecursiveMessage clone() {
         return new TestRecursiveMessage().mergeFrom(this);
      }

      public TestRecursiveMessage mergeFrom(TestRecursiveMessage other) {
         if (other.hasA()) {
            if (hasA()) {
               getA().mergeFrom(other.getA());
            } else {
               setA(other.getA().clone());
            }
         }
         if (other.hasI()) {
            setI(other.getI());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasA()) {
            size += computeMessageSize(1, getA());
         }
         if (hasI()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(2, getI());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestRecursiveMessage mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               if (hasA()) {
                  getA().mergeFramed(input);
               } else {
                  setA(new TestRecursiveMessage().mergeFramed(input));
               }
               break;
            case 16:
               setI(input.readInt32());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasA()) {
            writeMessage(output, 1, getA());
         }
         if (hasI()) {
            output.writeInt32(2, getI());
         }
      }

      public static TestRecursiveMessage parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRecursiveMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestRecursiveMessage parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRecursiveMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestRecursiveMessage parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRecursiveMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestRecursiveMessage parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRecursiveMessage().mergeUnframed(data).checktInitialized();
      }

      public static TestRecursiveMessage parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRecursiveMessage().mergeFramed(data).checktInitialized();
      }

      public static TestRecursiveMessage parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRecursiveMessage().mergeFramed(data).checktInitialized();
      }

      public static TestRecursiveMessage parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestRecursiveMessage().mergeFramed(data).checktInitialized();
      }

      public static TestRecursiveMessage parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestRecursiveMessage().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasA() ) {
            sb.append(prefix+"a {\n");
            getA().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasI() ) {
            sb.append(prefix+"i: ");
            sb.append(getI());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestRecursiveMessage.class )
            return false;
         
         return equals((TestRecursiveMessage)obj);
      }
      
      public boolean equals(TestRecursiveMessage obj) {
         if (hasA() ^ obj.hasA() ) 
            return false;
         if (hasA() && ( !getA().equals(obj.getA()) ))
            return false;
         if (hasI() ^ obj.hasI() ) 
            return false;
         if (hasI() && ( getI()!=obj.getI() ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-2143170489;
         if (hasA()) {
            rc ^= ( 65^getA().hashCode() );
         }
         if (hasI()) {
            rc ^= ( 73^getI() );
         }
         return rc;
      }
      
   }

   static abstract class TestRecursiveMessageBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional TestRecursiveMessage a = 1;
      private TestRecursiveMessage f_a = null;

      public boolean hasA() {
         return this.f_a!=null;
      }

      public TestRecursiveMessage getA() {
         if( this.f_a == null ) {
            this.f_a = new TestRecursiveMessage();
         }
         return this.f_a;
      }

      public T setA(TestRecursiveMessage a) {
         loadAndClear();
         this.f_a = a;
         return (T)this;
      }

      public void clearA() {
         loadAndClear();
         this.f_a = null;
      }

      // optional int32 i = 2;
      private int f_i = 0;
      private boolean b_i;

      public boolean hasI() {
         return this.b_i;
      }

      public int getI() {
         return this.f_i;
      }

      public T setI(int i) {
         loadAndClear();
         this.b_i = true;
         this.f_i = i;
         return (T)this;
      }

      public void clearI() {
         loadAndClear();
         this.b_i = false;
         this.f_i = 0;
      }

   }


   static public final class TestMutualRecursionA extends TestMutualRecursionABase<TestMutualRecursionA> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasBb() ) {
            try {
               getBb().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"bb."));
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearBb();
      }

      public TestMutualRecursionA clone() {
         return new TestMutualRecursionA().mergeFrom(this);
      }

      public TestMutualRecursionA mergeFrom(TestMutualRecursionA other) {
         if (other.hasBb()) {
            if (hasBb()) {
               getBb().mergeFrom(other.getBb());
            } else {
               setBb(other.getBb().clone());
            }
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasBb()) {
            size += computeMessageSize(1, getBb());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestMutualRecursionA mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               if (hasBb()) {
                  getBb().mergeFramed(input);
               } else {
                  setBb(new TestMutualRecursionB().mergeFramed(input));
               }
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasBb()) {
            writeMessage(output, 1, getBb());
         }
      }

      public static TestMutualRecursionA parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionA().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionA parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionA().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionA parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionA().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionA parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionA().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionA parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionA().mergeFramed(data).checktInitialized();
      }

      public static TestMutualRecursionA parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionA().mergeFramed(data).checktInitialized();
      }

      public static TestMutualRecursionA parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionA().mergeFramed(data).checktInitialized();
      }

      public static TestMutualRecursionA parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionA().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasBb() ) {
            sb.append(prefix+"bb {\n");
            getBb().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestMutualRecursionA.class )
            return false;
         
         return equals((TestMutualRecursionA)obj);
      }
      
      public boolean equals(TestMutualRecursionA obj) {
         if (hasBb() ^ obj.hasBb() ) 
            return false;
         if (hasBb() && ( !getBb().equals(obj.getBb()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-536236763;
         if (hasBb()) {
            rc ^= ( 2144^getBb().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestMutualRecursionABase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional TestMutualRecursionB bb = 1;
      private TestMutualRecursionB f_bb = null;

      public boolean hasBb() {
         return this.f_bb!=null;
      }

      public TestMutualRecursionB getBb() {
         if( this.f_bb == null ) {
            this.f_bb = new TestMutualRecursionB();
         }
         return this.f_bb;
      }

      public T setBb(TestMutualRecursionB bb) {
         loadAndClear();
         this.f_bb = bb;
         return (T)this;
      }

      public void clearBb() {
         loadAndClear();
         this.f_bb = null;
      }

   }


   static public final class TestMutualRecursionB extends TestMutualRecursionBBase<TestMutualRecursionB> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasA() ) {
            try {
               getA().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"a."));
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearA();
         clearOptionalInt32();
      }

      public TestMutualRecursionB clone() {
         return new TestMutualRecursionB().mergeFrom(this);
      }

      public TestMutualRecursionB mergeFrom(TestMutualRecursionB other) {
         if (other.hasA()) {
            if (hasA()) {
               getA().mergeFrom(other.getA());
            } else {
               setA(other.getA().clone());
            }
         }
         if (other.hasOptionalInt32()) {
            setOptionalInt32(other.getOptionalInt32());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasA()) {
            size += computeMessageSize(1, getA());
         }
         if (hasOptionalInt32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(2, getOptionalInt32());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestMutualRecursionB mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               if (hasA()) {
                  getA().mergeFramed(input);
               } else {
                  setA(new TestMutualRecursionA().mergeFramed(input));
               }
               break;
            case 16:
               setOptionalInt32(input.readInt32());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasA()) {
            writeMessage(output, 1, getA());
         }
         if (hasOptionalInt32()) {
            output.writeInt32(2, getOptionalInt32());
         }
      }

      public static TestMutualRecursionB parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionB().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionB parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionB().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionB parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionB().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionB parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionB().mergeUnframed(data).checktInitialized();
      }

      public static TestMutualRecursionB parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionB().mergeFramed(data).checktInitialized();
      }

      public static TestMutualRecursionB parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionB().mergeFramed(data).checktInitialized();
      }

      public static TestMutualRecursionB parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestMutualRecursionB().mergeFramed(data).checktInitialized();
      }

      public static TestMutualRecursionB parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestMutualRecursionB().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasA() ) {
            sb.append(prefix+"a {\n");
            getA().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasOptionalInt32() ) {
            sb.append(prefix+"optional_int32: ");
            sb.append(getOptionalInt32());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestMutualRecursionB.class )
            return false;
         
         return equals((TestMutualRecursionB)obj);
      }
      
      public boolean equals(TestMutualRecursionB obj) {
         if (hasA() ^ obj.hasA() ) 
            return false;
         if (hasA() && ( !getA().equals(obj.getA()) ))
            return false;
         if (hasOptionalInt32() ^ obj.hasOptionalInt32() ) 
            return false;
         if (hasOptionalInt32() && ( getOptionalInt32()!=obj.getOptionalInt32() ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-536236762;
         if (hasA()) {
            rc ^= ( 65^getA().hashCode() );
         }
         if (hasOptionalInt32()) {
            rc ^= ( 1444245230^getOptionalInt32() );
         }
         return rc;
      }
      
   }

   static abstract class TestMutualRecursionBBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional TestMutualRecursionA a = 1;
      private TestMutualRecursionA f_a = null;

      public boolean hasA() {
         return this.f_a!=null;
      }

      public TestMutualRecursionA getA() {
         if( this.f_a == null ) {
            this.f_a = new TestMutualRecursionA();
         }
         return this.f_a;
      }

      public T setA(TestMutualRecursionA a) {
         loadAndClear();
         this.f_a = a;
         return (T)this;
      }

      public void clearA() {
         loadAndClear();
         this.f_a = null;
      }

      // optional int32 optional_int32 = 2;
      private int f_optionalInt32 = 0;
      private boolean b_optionalInt32;

      public boolean hasOptionalInt32() {
         return this.b_optionalInt32;
      }

      public int getOptionalInt32() {
         return this.f_optionalInt32;
      }

      public T setOptionalInt32(int optionalInt32) {
         loadAndClear();
         this.b_optionalInt32 = true;
         this.f_optionalInt32 = optionalInt32;
         return (T)this;
      }

      public void clearOptionalInt32() {
         loadAndClear();
         this.b_optionalInt32 = false;
         this.f_optionalInt32 = 0;
      }

   }


   static public final class TestDupFieldNumber extends TestDupFieldNumberBase<TestDupFieldNumber> {


      static public final class Foo extends FooBase<Foo> {

         public java.util.ArrayList<String> missingFields() {
            java.util.ArrayList<String> missingFields = super.missingFields();
            return missingFields;
         }

         public void clear() {
            super.clear();
            clearA();
         }

         public Foo clone() {
            return new Foo().mergeFrom(this);
         }

         public Foo mergeFrom(Foo other) {
            if (other.hasA()) {
               setA(other.getA());
            }
            return this;
         }

         public int serializedSizeUnframed() {
            if (memoizedSerializedSize != -1)
               return memoizedSerializedSize;

            int size = 0;
            if (hasA()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getA());
            }
            memoizedSerializedSize = size;
            return size;
         }

         public Foo mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setA(input.readInt32());
                  break;
               }
            }
         }
         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (hasA()) {
               output.writeInt32(1, getA());
            }
         }

         public static Foo parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Foo().mergeUnframed(data).checktInitialized();
         }

         public static Foo parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Foo().mergeUnframed(data).checktInitialized();
         }

         public static Foo parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Foo().mergeUnframed(data).checktInitialized();
         }

         public static Foo parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Foo().mergeUnframed(data).checktInitialized();
         }

         public static Foo parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Foo().mergeFramed(data).checktInitialized();
         }

         public static Foo parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Foo().mergeFramed(data).checktInitialized();
         }

         public static Foo parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Foo().mergeFramed(data).checktInitialized();
         }

         public static Foo parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Foo().mergeFramed(data).checktInitialized();
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasA() ) {
               sb.append(prefix+"a: ");
               sb.append(getA());
               sb.append("\n");
            }
            return sb;
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=Foo.class )
               return false;
            
            return equals((Foo)obj);
         }
         
         public boolean equals(Foo obj) {
            if (hasA() ^ obj.hasA() ) 
               return false;
            if (hasA() && ( getA()!=obj.getA() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=70822;
            if (hasA()) {
               rc ^= ( 65^getA() );
            }
            return rc;
         }
         
      }

      static abstract class FooBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

         // optional int32 a = 1;
         private int f_a = 0;
         private boolean b_a;

         public boolean hasA() {
            return this.b_a;
         }

         public int getA() {
            return this.f_a;
         }

         public T setA(int a) {
            loadAndClear();
            this.b_a = true;
            this.f_a = a;
            return (T)this;
         }

         public void clearA() {
            loadAndClear();
            this.b_a = false;
            this.f_a = 0;
         }

      }


      static public final class Bar extends BarBase<Bar> {

         public java.util.ArrayList<String> missingFields() {
            java.util.ArrayList<String> missingFields = super.missingFields();
            return missingFields;
         }

         public void clear() {
            super.clear();
            clearA();
         }

         public Bar clone() {
            return new Bar().mergeFrom(this);
         }

         public Bar mergeFrom(Bar other) {
            if (other.hasA()) {
               setA(other.getA());
            }
            return this;
         }

         public int serializedSizeUnframed() {
            if (memoizedSerializedSize != -1)
               return memoizedSerializedSize;

            int size = 0;
            if (hasA()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getA());
            }
            memoizedSerializedSize = size;
            return size;
         }

         public Bar mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  setA(input.readInt32());
                  break;
               }
            }
         }
         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (hasA()) {
               output.writeInt32(1, getA());
            }
         }

         public static Bar parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Bar().mergeUnframed(data).checktInitialized();
         }

         public static Bar parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Bar().mergeUnframed(data).checktInitialized();
         }

         public static Bar parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Bar().mergeUnframed(data).checktInitialized();
         }

         public static Bar parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Bar().mergeUnframed(data).checktInitialized();
         }

         public static Bar parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Bar().mergeFramed(data).checktInitialized();
         }

         public static Bar parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Bar().mergeFramed(data).checktInitialized();
         }

         public static Bar parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new Bar().mergeFramed(data).checktInitialized();
         }

         public static Bar parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new Bar().mergeFramed(data).checktInitialized();
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasA() ) {
               sb.append(prefix+"a: ");
               sb.append(getA());
               sb.append("\n");
            }
            return sb;
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=Bar.class )
               return false;
            
            return equals((Bar)obj);
         }
         
         public boolean equals(Bar obj) {
            if (hasA() ^ obj.hasA() ) 
               return false;
            if (hasA() && ( getA()!=obj.getA() ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=66547;
            if (hasA()) {
               rc ^= ( 65^getA() );
            }
            return rc;
         }
         
      }

      static abstract class BarBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

         // optional int32 a = 1;
         private int f_a = 0;
         private boolean b_a;

         public boolean hasA() {
            return this.b_a;
         }

         public int getA() {
            return this.f_a;
         }

         public T setA(int a) {
            loadAndClear();
            this.b_a = true;
            this.f_a = a;
            return (T)this;
         }

         public void clearA() {
            loadAndClear();
            this.b_a = false;
            this.f_a = 0;
         }

      }

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasFoo() ) {
            try {
               getFoo().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"Foo."));
            }
         }
         if( hasBar() ) {
            try {
               getBar().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"Bar."));
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearA();
         clearFoo();
         clearBar();
      }

      public TestDupFieldNumber clone() {
         return new TestDupFieldNumber().mergeFrom(this);
      }

      public TestDupFieldNumber mergeFrom(TestDupFieldNumber other) {
         if (other.hasA()) {
            setA(other.getA());
         }
         if (other.hasFoo()) {
            if (hasFoo()) {
               getFoo().mergeFrom(other.getFoo());
            } else {
               setFoo(other.getFoo().clone());
            }
         }
         if (other.hasBar()) {
            if (hasBar()) {
               getBar().mergeFrom(other.getBar());
            } else {
               setBar(other.getBar().clone());
            }
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasA()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getA());
         }
         if (hasFoo()) {
            size += computeGroupSize(2, getFoo());
         }
         if (hasBar()) {
            size += computeGroupSize(3, getBar());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestDupFieldNumber mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setA(input.readInt32());
               break;
            case 19:
               if (hasFoo()) {
                  readGroup(input, 2, getFoo());
               } else {
                  setFoo(readGroup(input, 2,new TestDupFieldNumber.Foo()));
               }
               
               break;
            case 27:
               if (hasBar()) {
                  readGroup(input, 3, getBar());
               } else {
                  setBar(readGroup(input, 3,new TestDupFieldNumber.Bar()));
               }
               
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasA()) {
            output.writeInt32(1, getA());
         }
         if (hasFoo()) {
            writeGroup(output, 2, getFoo());
         }
         if (hasBar()) {
            writeGroup(output, 3, getBar());
         }
      }

      public static TestDupFieldNumber parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestDupFieldNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestDupFieldNumber parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestDupFieldNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestDupFieldNumber parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestDupFieldNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestDupFieldNumber parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestDupFieldNumber().mergeUnframed(data).checktInitialized();
      }

      public static TestDupFieldNumber parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestDupFieldNumber().mergeFramed(data).checktInitialized();
      }

      public static TestDupFieldNumber parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestDupFieldNumber().mergeFramed(data).checktInitialized();
      }

      public static TestDupFieldNumber parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestDupFieldNumber().mergeFramed(data).checktInitialized();
      }

      public static TestDupFieldNumber parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestDupFieldNumber().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasA() ) {
            sb.append(prefix+"a: ");
            sb.append(getA());
            sb.append("\n");
         }
         if(  hasFoo() ) {
            sb.append(prefix+"Foo {\n");
            getFoo().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasBar() ) {
            sb.append(prefix+"Bar {\n");
            getBar().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestDupFieldNumber.class )
            return false;
         
         return equals((TestDupFieldNumber)obj);
      }
      
      public boolean equals(TestDupFieldNumber obj) {
         if (hasA() ^ obj.hasA() ) 
            return false;
         if (hasA() && ( getA()!=obj.getA() ))
            return false;
         if (hasFoo() ^ obj.hasFoo() ) 
            return false;
         if (hasFoo() && ( !getFoo().equals(obj.getFoo()) ))
            return false;
         if (hasBar() ^ obj.hasBar() ) 
            return false;
         if (hasBar() && ( !getBar().equals(obj.getBar()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=766338742;
         if (hasA()) {
            rc ^= ( 65^getA() );
         }
         if (hasFoo()) {
            rc ^= ( 70822^getFoo().hashCode() );
         }
         if (hasBar()) {
            rc ^= ( 66547^getBar().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestDupFieldNumberBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional int32 a = 1;
      private int f_a = 0;
      private boolean b_a;

      public boolean hasA() {
         return this.b_a;
      }

      public int getA() {
         return this.f_a;
      }

      public T setA(int a) {
         loadAndClear();
         this.b_a = true;
         this.f_a = a;
         return (T)this;
      }

      public void clearA() {
         loadAndClear();
         this.b_a = false;
         this.f_a = 0;
      }

      // optional Foo Foo = 2;
      private TestDupFieldNumber.Foo f_foo = null;

      public boolean hasFoo() {
         return this.f_foo!=null;
      }

      public TestDupFieldNumber.Foo getFoo() {
         if( this.f_foo == null ) {
            this.f_foo = new TestDupFieldNumber.Foo();
         }
         return this.f_foo;
      }

      public T setFoo(TestDupFieldNumber.Foo foo) {
         loadAndClear();
         this.f_foo = foo;
         return (T)this;
      }

      public void clearFoo() {
         loadAndClear();
         this.f_foo = null;
      }

      // optional Bar Bar = 3;
      private TestDupFieldNumber.Bar f_bar = null;

      public boolean hasBar() {
         return this.f_bar!=null;
      }

      public TestDupFieldNumber.Bar getBar() {
         if( this.f_bar == null ) {
            this.f_bar = new TestDupFieldNumber.Bar();
         }
         return this.f_bar;
      }

      public T setBar(TestDupFieldNumber.Bar bar) {
         loadAndClear();
         this.f_bar = bar;
         return (T)this;
      }

      public void clearBar() {
         loadAndClear();
         this.f_bar = null;
      }

   }


   static public final class TestNestedMessageHasBits extends TestNestedMessageHasBitsBase<TestNestedMessageHasBits> {


      static public final class NestedMessage extends NestedMessageBase<NestedMessage> {

         public java.util.ArrayList<String> missingFields() {
            java.util.ArrayList<String> missingFields = super.missingFields();
            if( hasNestedmessageRepeatedForeignmessage() ) {
               java.util.List<ForeignMessage> l = getNestedmessageRepeatedForeignmessageList();
               for( int i=0; i < l.size(); i++ ) {
                  try {
                     l.get(i).assertInitialized();
                  } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                     missingFields.addAll(prefix(e.getMissingFields(),"nestedmessage_repeated_foreignmessage["+i+"]"));
                  }
               }
            }
            return missingFields;
         }

         public void clear() {
            super.clear();
            clearNestedmessageRepeatedInt32();
            clearNestedmessageRepeatedForeignmessage();
         }

         public NestedMessage clone() {
            return new NestedMessage().mergeFrom(this);
         }

         public NestedMessage mergeFrom(NestedMessage other) {
            if (other.hasNestedmessageRepeatedInt32()) {
               getNestedmessageRepeatedInt32List().addAll(other.getNestedmessageRepeatedInt32List());
            }
            if (other.hasNestedmessageRepeatedForeignmessage()) {
               for(ForeignMessage element: other.getNestedmessageRepeatedForeignmessageList() ) {
                  getNestedmessageRepeatedForeignmessageList().add(element.clone());
               }
            }
            return this;
         }

         public int serializedSizeUnframed() {
            if (memoizedSerializedSize != -1)
               return memoizedSerializedSize;

            int size = 0;
            if (hasNestedmessageRepeatedInt32()) {
               for (int i : getNestedmessageRepeatedInt32List()) {
                  size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, i);
               }
            }
            if (hasNestedmessageRepeatedForeignmessage()) {
               for (ForeignMessage i : getNestedmessageRepeatedForeignmessageList()) {
                  size += computeMessageSize(2, i);
               }
            }
            memoizedSerializedSize = size;
            return size;
         }

         public NestedMessage mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
            while (true) {
               int tag = input.readTag();
               if ((tag & 0x07) == 4) {
                  return this;
               }
               switch (tag) {
               case 0:
                  return this;
               default: {
                  break;
               }
               case 8:
                  getNestedmessageRepeatedInt32List().add(input.readInt32());
                  break;
               case 18:
                  getNestedmessageRepeatedForeignmessageList().add(new ForeignMessage().mergeFramed(input));
                  break;
               }
            }
         }
         public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
            if (hasNestedmessageRepeatedInt32()) {
               for (int i : getNestedmessageRepeatedInt32List()) {
                  output.writeInt32(1, i);
               }
            }
            if (hasNestedmessageRepeatedForeignmessage()) {
               for (ForeignMessage i : getNestedmessageRepeatedForeignmessageList()) {
                  writeMessage(output, 2, i);
               }
            }
         }

         public static NestedMessage parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeUnframed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public static NestedMessage parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
            return new NestedMessage().mergeFramed(data).checktInitialized();
         }

         public String toString() {
            return toString(new java.lang.StringBuilder(), "").toString();
         }

         public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
            if(  hasNestedmessageRepeatedInt32() ) {
               java.util.List<java.lang.Integer> l = getNestedmessageRepeatedInt32List();
               for( int i=0; i < l.size(); i++ ) {
                  sb.append(prefix+"nestedmessage_repeated_int32["+i+"]: ");
                  sb.append(l.get(i));
                  sb.append("\n");
               }
            }
            if(  hasNestedmessageRepeatedForeignmessage() ) {
               java.util.List<ForeignMessage> l = getNestedmessageRepeatedForeignmessageList();
               for( int i=0; i < l.size(); i++ ) {
                  sb.append(prefix+"nestedmessage_repeated_foreignmessage["+i+"] {\n");
                  l.get(i).toString(sb, prefix+"  ");
                  sb.append(prefix+"}\n");
               }
            }
            return sb;
         }

         public boolean equals(Object obj) {
            if( obj==this )
               return true;
            
            if( obj==null || obj.getClass()!=NestedMessage.class )
               return false;
            
            return equals((NestedMessage)obj);
         }
         
         public boolean equals(NestedMessage obj) {
            if (hasNestedmessageRepeatedInt32() ^ obj.hasNestedmessageRepeatedInt32() ) 
               return false;
            if (hasNestedmessageRepeatedInt32() && ( !getNestedmessageRepeatedInt32List().equals(obj.getNestedmessageRepeatedInt32List()) ))
               return false;
            if (hasNestedmessageRepeatedForeignmessage() ^ obj.hasNestedmessageRepeatedForeignmessage() ) 
               return false;
            if (hasNestedmessageRepeatedForeignmessage() && ( !getNestedmessageRepeatedForeignmessageList().equals(obj.getNestedmessageRepeatedForeignmessageList()) ))
               return false;
            return true;
         }
         
         public int hashCode() {
            int rc=-132205840;
            if (hasNestedmessageRepeatedInt32()) {
               rc ^= ( 1421433348^getNestedmessageRepeatedInt32List().hashCode() );
            }
            if (hasNestedmessageRepeatedForeignmessage()) {
               rc ^= ( -612421123^getNestedmessageRepeatedForeignmessageList().hashCode() );
            }
            return rc;
         }
         
      }

      static abstract class NestedMessageBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

         // repeated int32 nestedmessage_repeated_int32 = 1;
         private java.util.List<java.lang.Integer> f_nestedmessageRepeatedInt32;

         public boolean hasNestedmessageRepeatedInt32() {
            return this.f_nestedmessageRepeatedInt32!=null && !this.f_nestedmessageRepeatedInt32.isEmpty();
         }

         public java.util.List<java.lang.Integer> getNestedmessageRepeatedInt32List() {
            if( this.f_nestedmessageRepeatedInt32 == null ) {
               this.f_nestedmessageRepeatedInt32 = new java.util.ArrayList<java.lang.Integer>();
            }
            return this.f_nestedmessageRepeatedInt32;
         }

         public T setNestedmessageRepeatedInt32List(java.util.List<java.lang.Integer> nestedmessageRepeatedInt32) {
            loadAndClear();
            this.f_nestedmessageRepeatedInt32 = nestedmessageRepeatedInt32;
            return (T)this;
         }

         public int getNestedmessageRepeatedInt32Count() {
            if( this.f_nestedmessageRepeatedInt32 == null ) {
               return 0;
            }
            return this.f_nestedmessageRepeatedInt32.size();
         }

         public java.lang.Integer getNestedmessageRepeatedInt32(int index) {
            if( this.f_nestedmessageRepeatedInt32 == null ) {
               return null;
            }
            return this.f_nestedmessageRepeatedInt32.get(index);
         }

         public T setNestedmessageRepeatedInt32(int index, java.lang.Integer value) {
            loadAndClear();
            getNestedmessageRepeatedInt32List().set(index, value);
            return (T)this;
         }

         public T addNestedmessageRepeatedInt32(java.lang.Integer value) {
            loadAndClear();
            getNestedmessageRepeatedInt32List().add(value);
            return (T)this;
         }

         public T addAllNestedmessageRepeatedInt32(java.lang.Iterable<? extends java.lang.Integer> collection) {
            loadAndClear();
            super.addAll(collection, getNestedmessageRepeatedInt32List());
            return (T)this;
         }

         public void clearNestedmessageRepeatedInt32() {
            loadAndClear();
            this.f_nestedmessageRepeatedInt32 = null;
         }

         // repeated ForeignMessage nestedmessage_repeated_foreignmessage = 2;
         private java.util.List<ForeignMessage> f_nestedmessageRepeatedForeignmessage;

         public boolean hasNestedmessageRepeatedForeignmessage() {
            return this.f_nestedmessageRepeatedForeignmessage!=null && !this.f_nestedmessageRepeatedForeignmessage.isEmpty();
         }

         public java.util.List<ForeignMessage> getNestedmessageRepeatedForeignmessageList() {
            if( this.f_nestedmessageRepeatedForeignmessage == null ) {
               this.f_nestedmessageRepeatedForeignmessage = new java.util.ArrayList<ForeignMessage>();
            }
            return this.f_nestedmessageRepeatedForeignmessage;
         }

         public T setNestedmessageRepeatedForeignmessageList(java.util.List<ForeignMessage> nestedmessageRepeatedForeignmessage) {
            loadAndClear();
            this.f_nestedmessageRepeatedForeignmessage = nestedmessageRepeatedForeignmessage;
            return (T)this;
         }

         public int getNestedmessageRepeatedForeignmessageCount() {
            if( this.f_nestedmessageRepeatedForeignmessage == null ) {
               return 0;
            }
            return this.f_nestedmessageRepeatedForeignmessage.size();
         }

         public ForeignMessage getNestedmessageRepeatedForeignmessage(int index) {
            if( this.f_nestedmessageRepeatedForeignmessage == null ) {
               return null;
            }
            return this.f_nestedmessageRepeatedForeignmessage.get(index);
         }

         public T setNestedmessageRepeatedForeignmessage(int index, ForeignMessage value) {
            loadAndClear();
            getNestedmessageRepeatedForeignmessageList().set(index, value);
            return (T)this;
         }

         public T addNestedmessageRepeatedForeignmessage(ForeignMessage value) {
            loadAndClear();
            getNestedmessageRepeatedForeignmessageList().add(value);
            return (T)this;
         }

         public T addAllNestedmessageRepeatedForeignmessage(java.lang.Iterable<? extends ForeignMessage> collection) {
            loadAndClear();
            super.addAll(collection, getNestedmessageRepeatedForeignmessageList());
            return (T)this;
         }

         public void clearNestedmessageRepeatedForeignmessage() {
            loadAndClear();
            this.f_nestedmessageRepeatedForeignmessage = null;
         }

      }

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasOptionalNestedMessage() ) {
            try {
               getOptionalNestedMessage().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"optional_nested_message."));
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearOptionalNestedMessage();
      }

      public TestNestedMessageHasBits clone() {
         return new TestNestedMessageHasBits().mergeFrom(this);
      }

      public TestNestedMessageHasBits mergeFrom(TestNestedMessageHasBits other) {
         if (other.hasOptionalNestedMessage()) {
            if (hasOptionalNestedMessage()) {
               getOptionalNestedMessage().mergeFrom(other.getOptionalNestedMessage());
            } else {
               setOptionalNestedMessage(other.getOptionalNestedMessage().clone());
            }
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasOptionalNestedMessage()) {
            size += computeMessageSize(1, getOptionalNestedMessage());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestNestedMessageHasBits mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               if (hasOptionalNestedMessage()) {
                  getOptionalNestedMessage().mergeFramed(input);
               } else {
                  setOptionalNestedMessage(new TestNestedMessageHasBits.NestedMessage().mergeFramed(input));
               }
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasOptionalNestedMessage()) {
            writeMessage(output, 1, getOptionalNestedMessage());
         }
      }

      public static TestNestedMessageHasBits parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestNestedMessageHasBits().mergeUnframed(data).checktInitialized();
      }

      public static TestNestedMessageHasBits parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestNestedMessageHasBits().mergeUnframed(data).checktInitialized();
      }

      public static TestNestedMessageHasBits parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestNestedMessageHasBits().mergeUnframed(data).checktInitialized();
      }

      public static TestNestedMessageHasBits parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestNestedMessageHasBits().mergeUnframed(data).checktInitialized();
      }

      public static TestNestedMessageHasBits parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestNestedMessageHasBits().mergeFramed(data).checktInitialized();
      }

      public static TestNestedMessageHasBits parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestNestedMessageHasBits().mergeFramed(data).checktInitialized();
      }

      public static TestNestedMessageHasBits parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestNestedMessageHasBits().mergeFramed(data).checktInitialized();
      }

      public static TestNestedMessageHasBits parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestNestedMessageHasBits().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasOptionalNestedMessage() ) {
            sb.append(prefix+"optional_nested_message {\n");
            getOptionalNestedMessage().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestNestedMessageHasBits.class )
            return false;
         
         return equals((TestNestedMessageHasBits)obj);
      }
      
      public boolean equals(TestNestedMessageHasBits obj) {
         if (hasOptionalNestedMessage() ^ obj.hasOptionalNestedMessage() ) 
            return false;
         if (hasOptionalNestedMessage() && ( !getOptionalNestedMessage().equals(obj.getOptionalNestedMessage()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-459247262;
         if (hasOptionalNestedMessage()) {
            rc ^= ( 1060320112^getOptionalNestedMessage().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestNestedMessageHasBitsBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional NestedMessage optional_nested_message = 1;
      private TestNestedMessageHasBits.NestedMessage f_optionalNestedMessage = null;

      public boolean hasOptionalNestedMessage() {
         return this.f_optionalNestedMessage!=null;
      }

      public TestNestedMessageHasBits.NestedMessage getOptionalNestedMessage() {
         if( this.f_optionalNestedMessage == null ) {
            this.f_optionalNestedMessage = new TestNestedMessageHasBits.NestedMessage();
         }
         return this.f_optionalNestedMessage;
      }

      public T setOptionalNestedMessage(TestNestedMessageHasBits.NestedMessage optionalNestedMessage) {
         loadAndClear();
         this.f_optionalNestedMessage = optionalNestedMessage;
         return (T)this;
      }

      public void clearOptionalNestedMessage() {
         loadAndClear();
         this.f_optionalNestedMessage = null;
      }

   }


   static public final class TestCamelCaseFieldNames extends TestCamelCaseFieldNamesBase<TestCamelCaseFieldNames> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         if( hasMessageField() ) {
            try {
               getMessageField().assertInitialized();
            } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
               missingFields.addAll(prefix(e.getMissingFields(),"MessageField."));
            }
         }
         if( hasRepeatedMessageField() ) {
            java.util.List<ForeignMessage> l = getRepeatedMessageFieldList();
            for( int i=0; i < l.size(); i++ ) {
               try {
                  l.get(i).assertInitialized();
               } catch (org.fusesource.hawtbuf.proto.UninitializedMessageException e){
                  missingFields.addAll(prefix(e.getMissingFields(),"RepeatedMessageField["+i+"]"));
               }
            }
         }
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearPrimitiveField();
         clearStringField();
         clearEnumField();
         clearMessageField();
         clearStringPieceField();
         clearCordField();
         clearRepeatedPrimitiveField();
         clearRepeatedStringField();
         clearRepeatedEnumField();
         clearRepeatedMessageField();
         clearRepeatedStringPieceField();
         clearRepeatedCordField();
      }

      public TestCamelCaseFieldNames clone() {
         return new TestCamelCaseFieldNames().mergeFrom(this);
      }

      public TestCamelCaseFieldNames mergeFrom(TestCamelCaseFieldNames other) {
         if (other.hasPrimitiveField()) {
            setPrimitiveField(other.getPrimitiveField());
         }
         if (other.hasStringField()) {
            setStringField(other.getStringField());
         }
         if (other.hasEnumField()) {
            setEnumField(other.getEnumField());
         }
         if (other.hasMessageField()) {
            if (hasMessageField()) {
               getMessageField().mergeFrom(other.getMessageField());
            } else {
               setMessageField(other.getMessageField().clone());
            }
         }
         if (other.hasStringPieceField()) {
            setStringPieceField(other.getStringPieceField());
         }
         if (other.hasCordField()) {
            setCordField(other.getCordField());
         }
         if (other.hasRepeatedPrimitiveField()) {
            getRepeatedPrimitiveFieldList().addAll(other.getRepeatedPrimitiveFieldList());
         }
         if (other.hasRepeatedStringField()) {
            getRepeatedStringFieldList().addAll(other.getRepeatedStringFieldList());
         }
         if (other.hasRepeatedEnumField()) {
            getRepeatedEnumFieldList().addAll(other.getRepeatedEnumFieldList());
         }
         if (other.hasRepeatedMessageField()) {
            for(ForeignMessage element: other.getRepeatedMessageFieldList() ) {
               getRepeatedMessageFieldList().add(element.clone());
            }
         }
         if (other.hasRepeatedStringPieceField()) {
            getRepeatedStringPieceFieldList().addAll(other.getRepeatedStringPieceFieldList());
         }
         if (other.hasRepeatedCordField()) {
            getRepeatedCordFieldList().addAll(other.getRepeatedCordFieldList());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasPrimitiveField()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(1, getPrimitiveField());
         }
         if (hasStringField()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(2, getStringField());
         }
         if (hasEnumField()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(3, getEnumField().getNumber());
         }
         if (hasMessageField()) {
            size += computeMessageSize(4, getMessageField());
         }
         if (hasStringPieceField()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(5, getStringPieceField());
         }
         if (hasCordField()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(6, getCordField());
         }
         if (hasRepeatedPrimitiveField()) {
            for (int i : getRepeatedPrimitiveFieldList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(7, i);
            }
         }
         if (hasRepeatedStringField()) {
            for (java.lang.String i : getRepeatedStringFieldList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(8, i);
            }
         }
         if (hasRepeatedEnumField()) {
            for (ForeignEnum i : getRepeatedEnumFieldList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeEnumSize(9, i.getNumber());
            }
         }
         if (hasRepeatedMessageField()) {
            for (ForeignMessage i : getRepeatedMessageFieldList()) {
               size += computeMessageSize(10, i);
            }
         }
         if (hasRepeatedStringPieceField()) {
            for (java.lang.String i : getRepeatedStringPieceFieldList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(11, i);
            }
         }
         if (hasRepeatedCordField()) {
            for (java.lang.String i : getRepeatedCordFieldList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(12, i);
            }
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestCamelCaseFieldNames mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setPrimitiveField(input.readInt32());
               break;
            case 18:
               setStringField(input.readString());
               break;
            case 24:
               {
                  int t = input.readEnum();
                  ForeignEnum value = ForeignEnum.valueOf(t);
                  if( value !=null ) {
                     setEnumField(value);
                  }
               }
               break;
            case 34:
               if (hasMessageField()) {
                  getMessageField().mergeFramed(input);
               } else {
                  setMessageField(new ForeignMessage().mergeFramed(input));
               }
               break;
            case 42:
               setStringPieceField(input.readString());
               break;
            case 50:
               setCordField(input.readString());
               break;
            case 56:
               getRepeatedPrimitiveFieldList().add(input.readInt32());
               break;
            case 66:
               getRepeatedStringFieldList().add(input.readString());
               break;
            case 72:
               {
                  int t = input.readEnum();
                  ForeignEnum value = ForeignEnum.valueOf(t);
                  if( value !=null ) {
                     getRepeatedEnumFieldList().add(value);
                  }
               }
               break;
            case 82:
               getRepeatedMessageFieldList().add(new ForeignMessage().mergeFramed(input));
               break;
            case 90:
               getRepeatedStringPieceFieldList().add(input.readString());
               break;
            case 98:
               getRepeatedCordFieldList().add(input.readString());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasPrimitiveField()) {
            output.writeInt32(1, getPrimitiveField());
         }
         if (hasStringField()) {
            output.writeString(2, getStringField());
         }
         if (hasEnumField()) {
            output.writeEnum(3, getEnumField().getNumber());
         }
         if (hasMessageField()) {
            writeMessage(output, 4, getMessageField());
         }
         if (hasStringPieceField()) {
            output.writeString(5, getStringPieceField());
         }
         if (hasCordField()) {
            output.writeString(6, getCordField());
         }
         if (hasRepeatedPrimitiveField()) {
            for (int i : getRepeatedPrimitiveFieldList()) {
               output.writeInt32(7, i);
            }
         }
         if (hasRepeatedStringField()) {
            for (java.lang.String i : getRepeatedStringFieldList()) {
               output.writeString(8, i);
            }
         }
         if (hasRepeatedEnumField()) {
            for (ForeignEnum i : getRepeatedEnumFieldList()) {
               output.writeEnum(9, i.getNumber());
            }
         }
         if (hasRepeatedMessageField()) {
            for (ForeignMessage i : getRepeatedMessageFieldList()) {
               writeMessage(output, 10, i);
            }
         }
         if (hasRepeatedStringPieceField()) {
            for (java.lang.String i : getRepeatedStringPieceFieldList()) {
               output.writeString(11, i);
            }
         }
         if (hasRepeatedCordField()) {
            for (java.lang.String i : getRepeatedCordFieldList()) {
               output.writeString(12, i);
            }
         }
      }

      public static TestCamelCaseFieldNames parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestCamelCaseFieldNames().mergeUnframed(data).checktInitialized();
      }

      public static TestCamelCaseFieldNames parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestCamelCaseFieldNames().mergeUnframed(data).checktInitialized();
      }

      public static TestCamelCaseFieldNames parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestCamelCaseFieldNames().mergeUnframed(data).checktInitialized();
      }

      public static TestCamelCaseFieldNames parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestCamelCaseFieldNames().mergeUnframed(data).checktInitialized();
      }

      public static TestCamelCaseFieldNames parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestCamelCaseFieldNames().mergeFramed(data).checktInitialized();
      }

      public static TestCamelCaseFieldNames parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestCamelCaseFieldNames().mergeFramed(data).checktInitialized();
      }

      public static TestCamelCaseFieldNames parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestCamelCaseFieldNames().mergeFramed(data).checktInitialized();
      }

      public static TestCamelCaseFieldNames parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestCamelCaseFieldNames().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasPrimitiveField() ) {
            sb.append(prefix+"PrimitiveField: ");
            sb.append(getPrimitiveField());
            sb.append("\n");
         }
         if(  hasStringField() ) {
            sb.append(prefix+"StringField: ");
            sb.append(getStringField());
            sb.append("\n");
         }
         if(  hasEnumField() ) {
            sb.append(prefix+"EnumField: ");
            sb.append(getEnumField());
            sb.append("\n");
         }
         if(  hasMessageField() ) {
            sb.append(prefix+"MessageField {\n");
            getMessageField().toString(sb, prefix+"  ");
            sb.append(prefix+"}\n");
         }
         if(  hasStringPieceField() ) {
            sb.append(prefix+"StringPieceField: ");
            sb.append(getStringPieceField());
            sb.append("\n");
         }
         if(  hasCordField() ) {
            sb.append(prefix+"CordField: ");
            sb.append(getCordField());
            sb.append("\n");
         }
         if(  hasRepeatedPrimitiveField() ) {
            java.util.List<java.lang.Integer> l = getRepeatedPrimitiveFieldList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"RepeatedPrimitiveField["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedStringField() ) {
            java.util.List<java.lang.String> l = getRepeatedStringFieldList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"RepeatedStringField["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedEnumField() ) {
            java.util.List<ForeignEnum> l = getRepeatedEnumFieldList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"RepeatedEnumField["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedMessageField() ) {
            java.util.List<ForeignMessage> l = getRepeatedMessageFieldList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"RepeatedMessageField["+i+"] {\n");
               l.get(i).toString(sb, prefix+"  ");
               sb.append(prefix+"}\n");
            }
         }
         if(  hasRepeatedStringPieceField() ) {
            java.util.List<java.lang.String> l = getRepeatedStringPieceFieldList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"RepeatedStringPieceField["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         if(  hasRepeatedCordField() ) {
            java.util.List<java.lang.String> l = getRepeatedCordFieldList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"RepeatedCordField["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestCamelCaseFieldNames.class )
            return false;
         
         return equals((TestCamelCaseFieldNames)obj);
      }
      
      public boolean equals(TestCamelCaseFieldNames obj) {
         if (hasPrimitiveField() ^ obj.hasPrimitiveField() ) 
            return false;
         if (hasPrimitiveField() && ( getPrimitiveField()!=obj.getPrimitiveField() ))
            return false;
         if (hasStringField() ^ obj.hasStringField() ) 
            return false;
         if (hasStringField() && ( !getStringField().equals(obj.getStringField()) ))
            return false;
         if (hasEnumField() ^ obj.hasEnumField() ) 
            return false;
         if (hasEnumField() && ( !getEnumField().equals(obj.getEnumField()) ))
            return false;
         if (hasMessageField() ^ obj.hasMessageField() ) 
            return false;
         if (hasMessageField() && ( !getMessageField().equals(obj.getMessageField()) ))
            return false;
         if (hasStringPieceField() ^ obj.hasStringPieceField() ) 
            return false;
         if (hasStringPieceField() && ( !getStringPieceField().equals(obj.getStringPieceField()) ))
            return false;
         if (hasCordField() ^ obj.hasCordField() ) 
            return false;
         if (hasCordField() && ( !getCordField().equals(obj.getCordField()) ))
            return false;
         if (hasRepeatedPrimitiveField() ^ obj.hasRepeatedPrimitiveField() ) 
            return false;
         if (hasRepeatedPrimitiveField() && ( !getRepeatedPrimitiveFieldList().equals(obj.getRepeatedPrimitiveFieldList()) ))
            return false;
         if (hasRepeatedStringField() ^ obj.hasRepeatedStringField() ) 
            return false;
         if (hasRepeatedStringField() && ( !getRepeatedStringFieldList().equals(obj.getRepeatedStringFieldList()) ))
            return false;
         if (hasRepeatedEnumField() ^ obj.hasRepeatedEnumField() ) 
            return false;
         if (hasRepeatedEnumField() && ( !getRepeatedEnumFieldList().equals(obj.getRepeatedEnumFieldList()) ))
            return false;
         if (hasRepeatedMessageField() ^ obj.hasRepeatedMessageField() ) 
            return false;
         if (hasRepeatedMessageField() && ( !getRepeatedMessageFieldList().equals(obj.getRepeatedMessageFieldList()) ))
            return false;
         if (hasRepeatedStringPieceField() ^ obj.hasRepeatedStringPieceField() ) 
            return false;
         if (hasRepeatedStringPieceField() && ( !getRepeatedStringPieceFieldList().equals(obj.getRepeatedStringPieceFieldList()) ))
            return false;
         if (hasRepeatedCordField() ^ obj.hasRepeatedCordField() ) 
            return false;
         if (hasRepeatedCordField() && ( !getRepeatedCordFieldList().equals(obj.getRepeatedCordFieldList()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-547867134;
         if (hasPrimitiveField()) {
            rc ^= ( 1743153267^getPrimitiveField() );
         }
         if (hasStringField()) {
            rc ^= ( 134110025^getStringField().hashCode() );
         }
         if (hasEnumField()) {
            rc ^= ( -2072497063^getEnumField().hashCode() );
         }
         if (hasMessageField()) {
            rc ^= ( -1145179821^getMessageField().hashCode() );
         }
         if (hasStringPieceField()) {
            rc ^= ( -1059378755^getStringPieceField().hashCode() );
         }
         if (hasCordField()) {
            rc ^= ( 365048796^getCordField().hashCode() );
         }
         if (hasRepeatedPrimitiveField()) {
            rc ^= ( 312260237^getRepeatedPrimitiveFieldList().hashCode() );
         }
         if (hasRepeatedStringField()) {
            rc ^= ( 1052136303^getRepeatedStringFieldList().hashCode() );
         }
         if (hasRepeatedEnumField()) {
            rc ^= ( -855900673^getRepeatedEnumFieldList().hashCode() );
         }
         if (hasRepeatedMessageField()) {
            rc ^= ( 1543831021^getRepeatedMessageFieldList().hashCode() );
         }
         if (hasRepeatedStringPieceField()) {
            rc ^= ( -1758045865^getRepeatedStringPieceFieldList().hashCode() );
         }
         if (hasRepeatedCordField()) {
            rc ^= ( 1581645186^getRepeatedCordFieldList().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestCamelCaseFieldNamesBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional int32 PrimitiveField = 1;
      private int f_primitiveField = 0;
      private boolean b_primitiveField;

      public boolean hasPrimitiveField() {
         return this.b_primitiveField;
      }

      public int getPrimitiveField() {
         return this.f_primitiveField;
      }

      public T setPrimitiveField(int primitiveField) {
         loadAndClear();
         this.b_primitiveField = true;
         this.f_primitiveField = primitiveField;
         return (T)this;
      }

      public void clearPrimitiveField() {
         loadAndClear();
         this.b_primitiveField = false;
         this.f_primitiveField = 0;
      }

      // optional string StringField = 2;
      private java.lang.String f_stringField = null;
      private boolean b_stringField;

      public boolean hasStringField() {
         return this.b_stringField;
      }

      public java.lang.String getStringField() {
         return this.f_stringField;
      }

      public T setStringField(java.lang.String stringField) {
         loadAndClear();
         this.b_stringField = true;
         this.f_stringField = stringField;
         return (T)this;
      }

      public void clearStringField() {
         loadAndClear();
         this.b_stringField = false;
         this.f_stringField = null;
      }

      // optional ForeignEnum EnumField = 3;
      private ForeignEnum f_enumField = null;
      private boolean b_enumField;

      public boolean hasEnumField() {
         return this.b_enumField;
      }

      public ForeignEnum getEnumField() {
         return this.f_enumField;
      }

      public T setEnumField(ForeignEnum enumField) {
         loadAndClear();
         this.b_enumField = true;
         this.f_enumField = enumField;
         return (T)this;
      }

      public void clearEnumField() {
         loadAndClear();
         this.b_enumField = false;
         this.f_enumField = null;
      }

      // optional ForeignMessage MessageField = 4;
      private ForeignMessage f_messageField = null;

      public boolean hasMessageField() {
         return this.f_messageField!=null;
      }

      public ForeignMessage getMessageField() {
         if( this.f_messageField == null ) {
            this.f_messageField = new ForeignMessage();
         }
         return this.f_messageField;
      }

      public T setMessageField(ForeignMessage messageField) {
         loadAndClear();
         this.f_messageField = messageField;
         return (T)this;
      }

      public void clearMessageField() {
         loadAndClear();
         this.f_messageField = null;
      }

      // optional string StringPieceField = 5;
      private java.lang.String f_stringPieceField = null;
      private boolean b_stringPieceField;

      public boolean hasStringPieceField() {
         return this.b_stringPieceField;
      }

      public java.lang.String getStringPieceField() {
         return this.f_stringPieceField;
      }

      public T setStringPieceField(java.lang.String stringPieceField) {
         loadAndClear();
         this.b_stringPieceField = true;
         this.f_stringPieceField = stringPieceField;
         return (T)this;
      }

      public void clearStringPieceField() {
         loadAndClear();
         this.b_stringPieceField = false;
         this.f_stringPieceField = null;
      }

      // optional string CordField = 6;
      private java.lang.String f_cordField = null;
      private boolean b_cordField;

      public boolean hasCordField() {
         return this.b_cordField;
      }

      public java.lang.String getCordField() {
         return this.f_cordField;
      }

      public T setCordField(java.lang.String cordField) {
         loadAndClear();
         this.b_cordField = true;
         this.f_cordField = cordField;
         return (T)this;
      }

      public void clearCordField() {
         loadAndClear();
         this.b_cordField = false;
         this.f_cordField = null;
      }

      // repeated int32 RepeatedPrimitiveField = 7;
      private java.util.List<java.lang.Integer> f_repeatedPrimitiveField;

      public boolean hasRepeatedPrimitiveField() {
         return this.f_repeatedPrimitiveField!=null && !this.f_repeatedPrimitiveField.isEmpty();
      }

      public java.util.List<java.lang.Integer> getRepeatedPrimitiveFieldList() {
         if( this.f_repeatedPrimitiveField == null ) {
            this.f_repeatedPrimitiveField = new java.util.ArrayList<java.lang.Integer>();
         }
         return this.f_repeatedPrimitiveField;
      }

      public T setRepeatedPrimitiveFieldList(java.util.List<java.lang.Integer> repeatedPrimitiveField) {
         loadAndClear();
         this.f_repeatedPrimitiveField = repeatedPrimitiveField;
         return (T)this;
      }

      public int getRepeatedPrimitiveFieldCount() {
         if( this.f_repeatedPrimitiveField == null ) {
            return 0;
         }
         return this.f_repeatedPrimitiveField.size();
      }

      public java.lang.Integer getRepeatedPrimitiveField(int index) {
         if( this.f_repeatedPrimitiveField == null ) {
            return null;
         }
         return this.f_repeatedPrimitiveField.get(index);
      }

      public T setRepeatedPrimitiveField(int index, java.lang.Integer value) {
         loadAndClear();
         getRepeatedPrimitiveFieldList().set(index, value);
         return (T)this;
      }

      public T addRepeatedPrimitiveField(java.lang.Integer value) {
         loadAndClear();
         getRepeatedPrimitiveFieldList().add(value);
         return (T)this;
      }

      public T addAllRepeatedPrimitiveField(java.lang.Iterable<? extends java.lang.Integer> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedPrimitiveFieldList());
         return (T)this;
      }

      public void clearRepeatedPrimitiveField() {
         loadAndClear();
         this.f_repeatedPrimitiveField = null;
      }

      // repeated string RepeatedStringField = 8;
      private java.util.List<java.lang.String> f_repeatedStringField;

      public boolean hasRepeatedStringField() {
         return this.f_repeatedStringField!=null && !this.f_repeatedStringField.isEmpty();
      }

      public java.util.List<java.lang.String> getRepeatedStringFieldList() {
         if( this.f_repeatedStringField == null ) {
            this.f_repeatedStringField = new java.util.ArrayList<java.lang.String>();
         }
         return this.f_repeatedStringField;
      }

      public T setRepeatedStringFieldList(java.util.List<java.lang.String> repeatedStringField) {
         loadAndClear();
         this.f_repeatedStringField = repeatedStringField;
         return (T)this;
      }

      public int getRepeatedStringFieldCount() {
         if( this.f_repeatedStringField == null ) {
            return 0;
         }
         return this.f_repeatedStringField.size();
      }

      public java.lang.String getRepeatedStringField(int index) {
         if( this.f_repeatedStringField == null ) {
            return null;
         }
         return this.f_repeatedStringField.get(index);
      }

      public T setRepeatedStringField(int index, java.lang.String value) {
         loadAndClear();
         getRepeatedStringFieldList().set(index, value);
         return (T)this;
      }

      public T addRepeatedStringField(java.lang.String value) {
         loadAndClear();
         getRepeatedStringFieldList().add(value);
         return (T)this;
      }

      public T addAllRepeatedStringField(java.lang.Iterable<? extends java.lang.String> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedStringFieldList());
         return (T)this;
      }

      public void clearRepeatedStringField() {
         loadAndClear();
         this.f_repeatedStringField = null;
      }

      // repeated ForeignEnum RepeatedEnumField = 9;
      private java.util.List<ForeignEnum> f_repeatedEnumField;

      public boolean hasRepeatedEnumField() {
         return this.f_repeatedEnumField!=null && !this.f_repeatedEnumField.isEmpty();
      }

      public java.util.List<ForeignEnum> getRepeatedEnumFieldList() {
         if( this.f_repeatedEnumField == null ) {
            this.f_repeatedEnumField = new java.util.ArrayList<ForeignEnum>();
         }
         return this.f_repeatedEnumField;
      }

      public T setRepeatedEnumFieldList(java.util.List<ForeignEnum> repeatedEnumField) {
         loadAndClear();
         this.f_repeatedEnumField = repeatedEnumField;
         return (T)this;
      }

      public int getRepeatedEnumFieldCount() {
         if( this.f_repeatedEnumField == null ) {
            return 0;
         }
         return this.f_repeatedEnumField.size();
      }

      public ForeignEnum getRepeatedEnumField(int index) {
         if( this.f_repeatedEnumField == null ) {
            return null;
         }
         return this.f_repeatedEnumField.get(index);
      }

      public T setRepeatedEnumField(int index, ForeignEnum value) {
         loadAndClear();
         getRepeatedEnumFieldList().set(index, value);
         return (T)this;
      }

      public T addRepeatedEnumField(ForeignEnum value) {
         loadAndClear();
         getRepeatedEnumFieldList().add(value);
         return (T)this;
      }

      public T addAllRepeatedEnumField(java.lang.Iterable<? extends ForeignEnum> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedEnumFieldList());
         return (T)this;
      }

      public void clearRepeatedEnumField() {
         loadAndClear();
         this.f_repeatedEnumField = null;
      }

      // repeated ForeignMessage RepeatedMessageField = 10;
      private java.util.List<ForeignMessage> f_repeatedMessageField;

      public boolean hasRepeatedMessageField() {
         return this.f_repeatedMessageField!=null && !this.f_repeatedMessageField.isEmpty();
      }

      public java.util.List<ForeignMessage> getRepeatedMessageFieldList() {
         if( this.f_repeatedMessageField == null ) {
            this.f_repeatedMessageField = new java.util.ArrayList<ForeignMessage>();
         }
         return this.f_repeatedMessageField;
      }

      public T setRepeatedMessageFieldList(java.util.List<ForeignMessage> repeatedMessageField) {
         loadAndClear();
         this.f_repeatedMessageField = repeatedMessageField;
         return (T)this;
      }

      public int getRepeatedMessageFieldCount() {
         if( this.f_repeatedMessageField == null ) {
            return 0;
         }
         return this.f_repeatedMessageField.size();
      }

      public ForeignMessage getRepeatedMessageField(int index) {
         if( this.f_repeatedMessageField == null ) {
            return null;
         }
         return this.f_repeatedMessageField.get(index);
      }

      public T setRepeatedMessageField(int index, ForeignMessage value) {
         loadAndClear();
         getRepeatedMessageFieldList().set(index, value);
         return (T)this;
      }

      public T addRepeatedMessageField(ForeignMessage value) {
         loadAndClear();
         getRepeatedMessageFieldList().add(value);
         return (T)this;
      }

      public T addAllRepeatedMessageField(java.lang.Iterable<? extends ForeignMessage> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedMessageFieldList());
         return (T)this;
      }

      public void clearRepeatedMessageField() {
         loadAndClear();
         this.f_repeatedMessageField = null;
      }

      // repeated string RepeatedStringPieceField = 11;
      private java.util.List<java.lang.String> f_repeatedStringPieceField;

      public boolean hasRepeatedStringPieceField() {
         return this.f_repeatedStringPieceField!=null && !this.f_repeatedStringPieceField.isEmpty();
      }

      public java.util.List<java.lang.String> getRepeatedStringPieceFieldList() {
         if( this.f_repeatedStringPieceField == null ) {
            this.f_repeatedStringPieceField = new java.util.ArrayList<java.lang.String>();
         }
         return this.f_repeatedStringPieceField;
      }

      public T setRepeatedStringPieceFieldList(java.util.List<java.lang.String> repeatedStringPieceField) {
         loadAndClear();
         this.f_repeatedStringPieceField = repeatedStringPieceField;
         return (T)this;
      }

      public int getRepeatedStringPieceFieldCount() {
         if( this.f_repeatedStringPieceField == null ) {
            return 0;
         }
         return this.f_repeatedStringPieceField.size();
      }

      public java.lang.String getRepeatedStringPieceField(int index) {
         if( this.f_repeatedStringPieceField == null ) {
            return null;
         }
         return this.f_repeatedStringPieceField.get(index);
      }

      public T setRepeatedStringPieceField(int index, java.lang.String value) {
         loadAndClear();
         getRepeatedStringPieceFieldList().set(index, value);
         return (T)this;
      }

      public T addRepeatedStringPieceField(java.lang.String value) {
         loadAndClear();
         getRepeatedStringPieceFieldList().add(value);
         return (T)this;
      }

      public T addAllRepeatedStringPieceField(java.lang.Iterable<? extends java.lang.String> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedStringPieceFieldList());
         return (T)this;
      }

      public void clearRepeatedStringPieceField() {
         loadAndClear();
         this.f_repeatedStringPieceField = null;
      }

      // repeated string RepeatedCordField = 12;
      private java.util.List<java.lang.String> f_repeatedCordField;

      public boolean hasRepeatedCordField() {
         return this.f_repeatedCordField!=null && !this.f_repeatedCordField.isEmpty();
      }

      public java.util.List<java.lang.String> getRepeatedCordFieldList() {
         if( this.f_repeatedCordField == null ) {
            this.f_repeatedCordField = new java.util.ArrayList<java.lang.String>();
         }
         return this.f_repeatedCordField;
      }

      public T setRepeatedCordFieldList(java.util.List<java.lang.String> repeatedCordField) {
         loadAndClear();
         this.f_repeatedCordField = repeatedCordField;
         return (T)this;
      }

      public int getRepeatedCordFieldCount() {
         if( this.f_repeatedCordField == null ) {
            return 0;
         }
         return this.f_repeatedCordField.size();
      }

      public java.lang.String getRepeatedCordField(int index) {
         if( this.f_repeatedCordField == null ) {
            return null;
         }
         return this.f_repeatedCordField.get(index);
      }

      public T setRepeatedCordField(int index, java.lang.String value) {
         loadAndClear();
         getRepeatedCordFieldList().set(index, value);
         return (T)this;
      }

      public T addRepeatedCordField(java.lang.String value) {
         loadAndClear();
         getRepeatedCordFieldList().add(value);
         return (T)this;
      }

      public T addAllRepeatedCordField(java.lang.Iterable<? extends java.lang.String> collection) {
         loadAndClear();
         super.addAll(collection, getRepeatedCordFieldList());
         return (T)this;
      }

      public void clearRepeatedCordField() {
         loadAndClear();
         this.f_repeatedCordField = null;
      }

   }


   static public final class TestFieldOrderings extends TestFieldOrderingsBase<TestFieldOrderings> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearMyString();
         clearMyInt();
         clearMyFloat();
      }

      public TestFieldOrderings clone() {
         return new TestFieldOrderings().mergeFrom(this);
      }

      public TestFieldOrderings mergeFrom(TestFieldOrderings other) {
         if (other.hasMyString()) {
            setMyString(other.getMyString());
         }
         if (other.hasMyInt()) {
            setMyInt(other.getMyInt());
         }
         if (other.hasMyFloat()) {
            setMyFloat(other.getMyFloat());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasMyString()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(11, getMyString());
         }
         if (hasMyInt()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getMyInt());
         }
         if (hasMyFloat()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeFloatSize(101, getMyFloat());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestFieldOrderings mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 90:
               setMyString(input.readString());
               break;
            case 8:
               setMyInt(input.readInt64());
               break;
            case 813:
               setMyFloat(input.readFloat());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasMyString()) {
            output.writeString(11, getMyString());
         }
         if (hasMyInt()) {
            output.writeInt64(1, getMyInt());
         }
         if (hasMyFloat()) {
            output.writeFloat(101, getMyFloat());
         }
      }

      public static TestFieldOrderings parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestFieldOrderings().mergeUnframed(data).checktInitialized();
      }

      public static TestFieldOrderings parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestFieldOrderings().mergeUnframed(data).checktInitialized();
      }

      public static TestFieldOrderings parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestFieldOrderings().mergeUnframed(data).checktInitialized();
      }

      public static TestFieldOrderings parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestFieldOrderings().mergeUnframed(data).checktInitialized();
      }

      public static TestFieldOrderings parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestFieldOrderings().mergeFramed(data).checktInitialized();
      }

      public static TestFieldOrderings parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestFieldOrderings().mergeFramed(data).checktInitialized();
      }

      public static TestFieldOrderings parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestFieldOrderings().mergeFramed(data).checktInitialized();
      }

      public static TestFieldOrderings parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestFieldOrderings().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasMyString() ) {
            sb.append(prefix+"my_string: ");
            sb.append(getMyString());
            sb.append("\n");
         }
         if(  hasMyInt() ) {
            sb.append(prefix+"my_int: ");
            sb.append(getMyInt());
            sb.append("\n");
         }
         if(  hasMyFloat() ) {
            sb.append(prefix+"my_float: ");
            sb.append(getMyFloat());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestFieldOrderings.class )
            return false;
         
         return equals((TestFieldOrderings)obj);
      }
      
      public boolean equals(TestFieldOrderings obj) {
         if (hasMyString() ^ obj.hasMyString() ) 
            return false;
         if (hasMyString() && ( !getMyString().equals(obj.getMyString()) ))
            return false;
         if (hasMyInt() ^ obj.hasMyInt() ) 
            return false;
         if (hasMyInt() && ( getMyInt()!=obj.getMyInt() ))
            return false;
         if (hasMyFloat() ^ obj.hasMyFloat() ) 
            return false;
         if (hasMyFloat() && ( getMyFloat()!=obj.getMyFloat() ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-1684082025;
         if (hasMyString()) {
            rc ^= ( -741946115^getMyString().hashCode() );
         }
         if (hasMyInt()) {
            rc ^= ( 74789507^(new Long(getMyInt())).hashCode() );
         }
         if (hasMyFloat()) {
            rc ^= ( -1144559632^(new Double(getMyFloat())).hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestFieldOrderingsBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional string my_string = 11;
      private java.lang.String f_myString = null;
      private boolean b_myString;

      public boolean hasMyString() {
         return this.b_myString;
      }

      public java.lang.String getMyString() {
         return this.f_myString;
      }

      public T setMyString(java.lang.String myString) {
         loadAndClear();
         this.b_myString = true;
         this.f_myString = myString;
         return (T)this;
      }

      public void clearMyString() {
         loadAndClear();
         this.b_myString = false;
         this.f_myString = null;
      }

      // optional int64 my_int = 1;
      private long f_myInt = 0;
      private boolean b_myInt;

      public boolean hasMyInt() {
         return this.b_myInt;
      }

      public long getMyInt() {
         return this.f_myInt;
      }

      public T setMyInt(long myInt) {
         loadAndClear();
         this.b_myInt = true;
         this.f_myInt = myInt;
         return (T)this;
      }

      public void clearMyInt() {
         loadAndClear();
         this.b_myInt = false;
         this.f_myInt = 0;
      }

      // optional float my_float = 101;
      private float f_myFloat = 0;
      private boolean b_myFloat;

      public boolean hasMyFloat() {
         return this.b_myFloat;
      }

      public float getMyFloat() {
         return this.f_myFloat;
      }

      public T setMyFloat(float myFloat) {
         loadAndClear();
         this.b_myFloat = true;
         this.f_myFloat = myFloat;
         return (T)this;
      }

      public void clearMyFloat() {
         loadAndClear();
         this.b_myFloat = false;
         this.f_myFloat = 0;
      }

   }


   static public final class TestExtremeDefaultValues extends TestExtremeDefaultValuesBase<TestExtremeDefaultValues> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
         clearEscapedBytes();
         clearLargeUint32();
         clearLargeUint64();
         clearSmallInt32();
         clearSmallInt64();
         clearUtf8String();
      }

      public TestExtremeDefaultValues clone() {
         return new TestExtremeDefaultValues().mergeFrom(this);
      }

      public TestExtremeDefaultValues mergeFrom(TestExtremeDefaultValues other) {
         if (other.hasEscapedBytes()) {
            setEscapedBytes(other.getEscapedBytes());
         }
         if (other.hasLargeUint32()) {
            setLargeUint32(other.getLargeUint32());
         }
         if (other.hasLargeUint64()) {
            setLargeUint64(other.getLargeUint64());
         }
         if (other.hasSmallInt32()) {
            setSmallInt32(other.getSmallInt32());
         }
         if (other.hasSmallInt64()) {
            setSmallInt64(other.getSmallInt64());
         }
         if (other.hasUtf8String()) {
            setUtf8String(other.getUtf8String());
         }
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         if (hasEscapedBytes()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(1, getEscapedBytes());
         }
         if (hasLargeUint32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt32Size(2, getLargeUint32());
         }
         if (hasLargeUint64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeUInt64Size(3, getLargeUint64());
         }
         if (hasSmallInt32()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(4, getSmallInt32());
         }
         if (hasSmallInt64()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(5, getSmallInt64());
         }
         if (hasUtf8String()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeStringSize(6, getUtf8String());
         }
         memoizedSerializedSize = size;
         return size;
      }

      public TestExtremeDefaultValues mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 10:
               setEscapedBytes(input.readBytes());
               break;
            case 16:
               setLargeUint32(input.readUInt32());
               break;
            case 24:
               setLargeUint64(input.readUInt64());
               break;
            case 32:
               setSmallInt32(input.readInt32());
               break;
            case 40:
               setSmallInt64(input.readInt64());
               break;
            case 50:
               setUtf8String(input.readString());
               break;
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (hasEscapedBytes()) {
            output.writeBytes(1, getEscapedBytes());
         }
         if (hasLargeUint32()) {
            output.writeUInt32(2, getLargeUint32());
         }
         if (hasLargeUint64()) {
            output.writeUInt64(3, getLargeUint64());
         }
         if (hasSmallInt32()) {
            output.writeInt32(4, getSmallInt32());
         }
         if (hasSmallInt64()) {
            output.writeInt64(5, getSmallInt64());
         }
         if (hasUtf8String()) {
            output.writeString(6, getUtf8String());
         }
      }

      public static TestExtremeDefaultValues parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestExtremeDefaultValues().mergeUnframed(data).checktInitialized();
      }

      public static TestExtremeDefaultValues parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestExtremeDefaultValues().mergeUnframed(data).checktInitialized();
      }

      public static TestExtremeDefaultValues parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestExtremeDefaultValues().mergeUnframed(data).checktInitialized();
      }

      public static TestExtremeDefaultValues parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestExtremeDefaultValues().mergeUnframed(data).checktInitialized();
      }

      public static TestExtremeDefaultValues parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestExtremeDefaultValues().mergeFramed(data).checktInitialized();
      }

      public static TestExtremeDefaultValues parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestExtremeDefaultValues().mergeFramed(data).checktInitialized();
      }

      public static TestExtremeDefaultValues parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new TestExtremeDefaultValues().mergeFramed(data).checktInitialized();
      }

      public static TestExtremeDefaultValues parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new TestExtremeDefaultValues().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasEscapedBytes() ) {
            sb.append(prefix+"escaped_bytes: ");
            sb.append(getEscapedBytes());
            sb.append("\n");
         }
         if(  hasLargeUint32() ) {
            sb.append(prefix+"large_uint32: ");
            sb.append(getLargeUint32());
            sb.append("\n");
         }
         if(  hasLargeUint64() ) {
            sb.append(prefix+"large_uint64: ");
            sb.append(getLargeUint64());
            sb.append("\n");
         }
         if(  hasSmallInt32() ) {
            sb.append(prefix+"small_int32: ");
            sb.append(getSmallInt32());
            sb.append("\n");
         }
         if(  hasSmallInt64() ) {
            sb.append(prefix+"small_int64: ");
            sb.append(getSmallInt64());
            sb.append("\n");
         }
         if(  hasUtf8String() ) {
            sb.append(prefix+"utf8_string: ");
            sb.append(getUtf8String());
            sb.append("\n");
         }
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=TestExtremeDefaultValues.class )
            return false;
         
         return equals((TestExtremeDefaultValues)obj);
      }
      
      public boolean equals(TestExtremeDefaultValues obj) {
         if (hasEscapedBytes() ^ obj.hasEscapedBytes() ) 
            return false;
         if (hasEscapedBytes() && ( !getEscapedBytes().equals(obj.getEscapedBytes()) ))
            return false;
         if (hasLargeUint32() ^ obj.hasLargeUint32() ) 
            return false;
         if (hasLargeUint32() && ( getLargeUint32()!=obj.getLargeUint32() ))
            return false;
         if (hasLargeUint64() ^ obj.hasLargeUint64() ) 
            return false;
         if (hasLargeUint64() && ( getLargeUint64()!=obj.getLargeUint64() ))
            return false;
         if (hasSmallInt32() ^ obj.hasSmallInt32() ) 
            return false;
         if (hasSmallInt32() && ( getSmallInt32()!=obj.getSmallInt32() ))
            return false;
         if (hasSmallInt64() ^ obj.hasSmallInt64() ) 
            return false;
         if (hasSmallInt64() && ( getSmallInt64()!=obj.getSmallInt64() ))
            return false;
         if (hasUtf8String() ^ obj.hasUtf8String() ) 
            return false;
         if (hasUtf8String() && ( !getUtf8String().equals(obj.getUtf8String()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=-1192901303;
         if (hasEscapedBytes()) {
            rc ^= ( -1681187256^getEscapedBytes().hashCode() );
         }
         if (hasLargeUint32()) {
            rc ^= ( 195565108^getLargeUint32() );
         }
         if (hasLargeUint64()) {
            rc ^= ( 195565203^(new Long(getLargeUint64())).hashCode() );
         }
         if (hasSmallInt32()) {
            rc ^= ( -1091976729^getSmallInt32() );
         }
         if (hasSmallInt64()) {
            rc ^= ( -1091976634^(new Long(getSmallInt64())).hashCode() );
         }
         if (hasUtf8String()) {
            rc ^= ( -709624062^getUtf8String().hashCode() );
         }
         return rc;
      }
      
   }

   static abstract class TestExtremeDefaultValuesBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

      // optional bytes escaped_bytes = 1;
      private org.fusesource.hawtbuf.Buffer f_escapedBytes = new org.fusesource.hawtbuf.Buffer(org.fusesource.hawtbuf.UTF8Buffer.encode("\u0000\u0001\u0007\b\f\n\r\t\u000b\\\'\"\ufffd"));
      private boolean b_escapedBytes;

      public boolean hasEscapedBytes() {
         return this.b_escapedBytes;
      }

      public org.fusesource.hawtbuf.Buffer getEscapedBytes() {
         return this.f_escapedBytes;
      }

      public T setEscapedBytes(org.fusesource.hawtbuf.Buffer escapedBytes) {
         loadAndClear();
         this.b_escapedBytes = true;
         this.f_escapedBytes = escapedBytes;
         return (T)this;
      }

      public void clearEscapedBytes() {
         loadAndClear();
         this.b_escapedBytes = false;
         this.f_escapedBytes = new org.fusesource.hawtbuf.Buffer(org.fusesource.hawtbuf.UTF8Buffer.encode("\u0000\u0001\u0007\b\f\n\r\t\u000b\\\'\"\ufffd"));
      }

      // optional uint32 large_uint32 = 2;
      private int f_largeUint32 = -1;
      private boolean b_largeUint32;

      public boolean hasLargeUint32() {
         return this.b_largeUint32;
      }

      public int getLargeUint32() {
         return this.f_largeUint32;
      }

      public T setLargeUint32(int largeUint32) {
         loadAndClear();
         this.b_largeUint32 = true;
         this.f_largeUint32 = largeUint32;
         return (T)this;
      }

      public void clearLargeUint32() {
         loadAndClear();
         this.b_largeUint32 = false;
         this.f_largeUint32 = -1;
      }

      // optional uint64 large_uint64 = 3;
      private long f_largeUint64 = -1l;
      private boolean b_largeUint64;

      public boolean hasLargeUint64() {
         return this.b_largeUint64;
      }

      public long getLargeUint64() {
         return this.f_largeUint64;
      }

      public T setLargeUint64(long largeUint64) {
         loadAndClear();
         this.b_largeUint64 = true;
         this.f_largeUint64 = largeUint64;
         return (T)this;
      }

      public void clearLargeUint64() {
         loadAndClear();
         this.b_largeUint64 = false;
         this.f_largeUint64 = -1l;
      }

      // optional int32 small_int32 = 4;
      private int f_smallInt32 = -2147483647;
      private boolean b_smallInt32;

      public boolean hasSmallInt32() {
         return this.b_smallInt32;
      }

      public int getSmallInt32() {
         return this.f_smallInt32;
      }

      public T setSmallInt32(int smallInt32) {
         loadAndClear();
         this.b_smallInt32 = true;
         this.f_smallInt32 = smallInt32;
         return (T)this;
      }

      public void clearSmallInt32() {
         loadAndClear();
         this.b_smallInt32 = false;
         this.f_smallInt32 = -2147483647;
      }

      // optional int64 small_int64 = 5;
      private long f_smallInt64 = -9223372036854775807l;
      private boolean b_smallInt64;

      public boolean hasSmallInt64() {
         return this.b_smallInt64;
      }

      public long getSmallInt64() {
         return this.f_smallInt64;
      }

      public T setSmallInt64(long smallInt64) {
         loadAndClear();
         this.b_smallInt64 = true;
         this.f_smallInt64 = smallInt64;
         return (T)this;
      }

      public void clearSmallInt64() {
         loadAndClear();
         this.b_smallInt64 = false;
         this.f_smallInt64 = -9223372036854775807l;
      }

      // optional string utf8_string = 6;
      private java.lang.String f_utf8String = "\u1234";
      private boolean b_utf8String;

      public boolean hasUtf8String() {
         return this.b_utf8String;
      }

      public java.lang.String getUtf8String() {
         return this.f_utf8String;
      }

      public T setUtf8String(java.lang.String utf8String) {
         loadAndClear();
         this.b_utf8String = true;
         this.f_utf8String = utf8String;
         return (T)this;
      }

      public void clearUtf8String() {
         loadAndClear();
         this.b_utf8String = false;
         this.f_utf8String = "\u1234";
      }

   }


   static public final class FooRequest extends FooRequestBase<FooRequest> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
      }

      public FooRequest clone() {
         return new FooRequest().mergeFrom(this);
      }

      public FooRequest mergeFrom(FooRequest other) {
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         memoizedSerializedSize = size;
         return size;
      }

      public FooRequest mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
      }

      public static FooRequest parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooRequest().mergeUnframed(data).checktInitialized();
      }

      public static FooRequest parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooRequest().mergeUnframed(data).checktInitialized();
      }

      public static FooRequest parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooRequest().mergeUnframed(data).checktInitialized();
      }

      public static FooRequest parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooRequest().mergeUnframed(data).checktInitialized();
      }

      public static FooRequest parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooRequest().mergeFramed(data).checktInitialized();
      }

      public static FooRequest parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooRequest().mergeFramed(data).checktInitialized();
      }

      public static FooRequest parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooRequest().mergeFramed(data).checktInitialized();
      }

      public static FooRequest parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooRequest().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=FooRequest.class )
            return false;
         
         return equals((FooRequest)obj);
      }
      
      public boolean equals(FooRequest obj) {
         return true;
      }
      
      public int hashCode() {
         int rc=-991228151;
         return rc;
      }
      
   }

   static abstract class FooRequestBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

   }


   static public final class FooResponse extends FooResponseBase<FooResponse> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
      }

      public FooResponse clone() {
         return new FooResponse().mergeFrom(this);
      }

      public FooResponse mergeFrom(FooResponse other) {
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         memoizedSerializedSize = size;
         return size;
      }

      public FooResponse mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
      }

      public static FooResponse parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooResponse().mergeUnframed(data).checktInitialized();
      }

      public static FooResponse parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooResponse().mergeUnframed(data).checktInitialized();
      }

      public static FooResponse parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooResponse().mergeUnframed(data).checktInitialized();
      }

      public static FooResponse parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooResponse().mergeUnframed(data).checktInitialized();
      }

      public static FooResponse parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooResponse().mergeFramed(data).checktInitialized();
      }

      public static FooResponse parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooResponse().mergeFramed(data).checktInitialized();
      }

      public static FooResponse parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new FooResponse().mergeFramed(data).checktInitialized();
      }

      public static FooResponse parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new FooResponse().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=FooResponse.class )
            return false;
         
         return equals((FooResponse)obj);
      }
      
      public boolean equals(FooResponse obj) {
         return true;
      }
      
      public int hashCode() {
         int rc=-610367737;
         return rc;
      }
      
   }

   static abstract class FooResponseBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

   }


   static public final class BarRequest extends BarRequestBase<BarRequest> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
      }

      public BarRequest clone() {
         return new BarRequest().mergeFrom(this);
      }

      public BarRequest mergeFrom(BarRequest other) {
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         memoizedSerializedSize = size;
         return size;
      }

      public BarRequest mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
      }

      public static BarRequest parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarRequest().mergeUnframed(data).checktInitialized();
      }

      public static BarRequest parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarRequest().mergeUnframed(data).checktInitialized();
      }

      public static BarRequest parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarRequest().mergeUnframed(data).checktInitialized();
      }

      public static BarRequest parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarRequest().mergeUnframed(data).checktInitialized();
      }

      public static BarRequest parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarRequest().mergeFramed(data).checktInitialized();
      }

      public static BarRequest parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarRequest().mergeFramed(data).checktInitialized();
      }

      public static BarRequest parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarRequest().mergeFramed(data).checktInitialized();
      }

      public static BarRequest parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarRequest().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=BarRequest.class )
            return false;
         
         return equals((BarRequest)obj);
      }
      
      public boolean equals(BarRequest obj) {
         return true;
      }
      
      public int hashCode() {
         int rc=262848284;
         return rc;
      }
      
   }

   static abstract class BarRequestBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

   }


   static public final class BarResponse extends BarResponseBase<BarResponse> {

      public java.util.ArrayList<String> missingFields() {
         java.util.ArrayList<String> missingFields = super.missingFields();
         return missingFields;
      }

      public void clear() {
         super.clear();
      }

      public BarResponse clone() {
         return new BarResponse().mergeFrom(this);
      }

      public BarResponse mergeFrom(BarResponse other) {
         return this;
      }

      public int serializedSizeUnframed() {
         if (memoizedSerializedSize != -1)
            return memoizedSerializedSize;

         int size = 0;
         memoizedSerializedSize = size;
         return size;
      }

      public BarResponse mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            }
         }
      }
      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
      }

      public static BarResponse parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarResponse().mergeUnframed(data).checktInitialized();
      }

      public static BarResponse parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarResponse().mergeUnframed(data).checktInitialized();
      }

      public static BarResponse parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarResponse().mergeUnframed(data).checktInitialized();
      }

      public static BarResponse parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarResponse().mergeUnframed(data).checktInitialized();
      }

      public static BarResponse parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarResponse().mergeFramed(data).checktInitialized();
      }

      public static BarResponse parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarResponse().mergeFramed(data).checktInitialized();
      }

      public static BarResponse parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
         return new BarResponse().mergeFramed(data).checktInitialized();
      }

      public static BarResponse parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
         return new BarResponse().mergeFramed(data).checktInitialized();
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return sb;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=BarResponse.class )
            return false;
         
         return equals((BarResponse)obj);
      }
      
      public boolean equals(BarResponse obj) {
         return true;
      }
      
      public int hashCode() {
         int rc=-388703916;
         return rc;
      }
      
   }

   static abstract class BarResponseBase<T> extends org.fusesource.hawtbuf.proto.BaseMessage<T> {

   }

}
